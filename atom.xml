<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nova7y</title>
  
  
  <link href="/yyy/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-10T05:51:47.210Z</updated>
  <id>/</id>
  
  <author>
    <name>nova7y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>element-ui的table表格不对齐问题</title>
    <link href="/2019/05/10/element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E4%B8%8D%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/"/>
    <id>/2019/05/10/element-ui的table表格不对齐问题/</id>
    <published>2019-05-10T05:29:40.575Z</published>
    <updated>2019-05-10T05:51:47.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>将以下样式代码添加到index.html、或app.vue中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.el-table</span> <span class="selector-tag">colgroup</span><span class="selector-class">.gutter</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h1&gt;&lt;p&gt;将以下样式代码添加到index.html、或app.vue中&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Vue" scheme="/categories/Vue/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何让多个li居中于ul中间</title>
    <link href="/2019/05/10/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%A4%9A%E4%B8%AAli%E5%B1%85%E4%B8%AD%E4%BA%8Eul%E4%B8%AD%E9%97%B4/"/>
    <id>/2019/05/10/如何让多个li居中于ul中间/</id>
    <published>2019-05-10T05:27:05.549Z</published>
    <updated>2019-05-10T05:29:06.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决方法一："><a href="#解决方法一：" class="headerlink" title="解决方法一："></a>解决方法一：</h1><blockquote><p>利用margin-left设置；<br>比如 侧边栏的div宽300px;我有四个li，每个设置height：30px；width：60px；并让这四个li位于侧边栏的头部；就可以设置ul的margin-left：80px；</p></blockquote><p>这样就会使四个li居于中间；如果想使四个li之间有间隔。可以设置li的margin-left:5px;这样就需要改变先前ul的margin-left为（300-240-20）/2-2.5，因为margin-left是透明的，所以才会有上面这个计算式子。可见可能会出现小数，这样是我们要避免的。利用ul的margin-left很简单地设置居中，只是不是强迫症患者的首选。因为这个方法，大家应该都会，而且百度一下，都会出来这样的例子，在此不贴代码。</p><p>在这个方法中，我们可以设置ul的高和宽，但只要不让ul的宽超过div的宽，以及不让ul的宽低于四个li的和的宽，就不会出现排版错误。</p><p>本人也不喜欢这个方法，于是，就有了第二种方法。</p><h1 id="解决方法二："><a href="#解决方法二：" class="headerlink" title="解决方法二："></a>解决方法二：</h1><blockquote><p>利用ul的text-align：center属性；<br>对于第二种方法，首先要说的是，设置ul的display：table，text-align:center。是不是觉得好神奇，怎么会出现display：table，说实话，这也是我第一次用到这个属性，虽然知道有这个属性，但一般还真不用，我们似乎只用none，inline和block，但这里我们必须用这个属性，不然解决不了。下面是一段代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#ul1</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: table;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.li1</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: 5px;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            width: 70px;</span></span><br><span class="line"><span class="undefined">            height: 60px;</span></span><br><span class="line"><span class="undefined">            line-height: 60px;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            list-style-type: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>33333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>这段代码可以解决居中方法，注意：ul设为display：table；text-align：center；但记住千万千万不可以设置ul的宽，不然无法实现。</p><h1 id="解决方法三："><a href="#解决方法三：" class="headerlink" title="解决方法三："></a>解决方法三：</h1><blockquote><p>其实这不能用的方法，这方法太渣；<br>就是ul的设为text-align：center；</p></blockquote><p>li的设为display：inline；</p><p>但这样的话，就无法做出li的宽和高，虽然也会居中，但已经失去了其解决的意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决方法一：&quot;&gt;&lt;a href=&quot;#解决方法一：&quot; class=&quot;headerlink&quot; title=&quot;解决方法一：&quot;&gt;&lt;/a&gt;解决方法一：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;利用margin-left设置；&lt;br&gt;比如 侧边栏的div宽300px;我有四个
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js获取客户端真实IP</title>
    <link href="/2019/05/10/js%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9EIP/"/>
    <id>/2019/05/10/js获取客户端真实IP/</id>
    <published>2019-05-10T05:23:35.910Z</published>
    <updated>2019-05-10T05:25:32.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：（所有的平台及浏览器）"><a href="#方法一：（所有的平台及浏览器）" class="headerlink" title="方法一：（所有的平台及浏览器）"></a>方法一：（所有的平台及浏览器）</h2><p>使用搜狐接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="built_in">document</span>.write(returnCitySN[<span class="string">"cip"</span>]+<span class="string">','</span>+returnCitySN[<span class="string">"cname"</span>])</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二：（所有的平台及浏览器）"><a href="#方法二：（所有的平台及浏览器）" class="headerlink" title="方法二：（所有的平台及浏览器）"></a>方法二：（所有的平台及浏览器）</h2><p>使用新浪接口：(我测试过，此方法好像不行。访问网站也不能访问了。)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://counter.sina.com.cn/ip/"</span> charset=<span class="string">"gb2312"</span>&gt;&lt;/script&gt;       &lt;!--获取接口数据，注意charset --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"IP地址："</span>+ILData[<span class="number">0</span>]+<span class="string">"&lt;br /&gt;"</span>);             <span class="comment">//输出接口数据中的IP地址</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">1</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的类型</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">2</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的省市</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">3</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">4</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的运营商</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>个人Robert Hashemian写的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"JavaScript"</span> src=<span class="string">"http://www.hashemian.com/js/visitorIP.js.php"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</span><br><span class="line">    VIH_BackColor = <span class="string">"palegreen"</span>;</span><br><span class="line">    VIH_ForeColor = <span class="string">"navy"</span>;</span><br><span class="line">    VIH_FontPix = <span class="string">"16"</span>;</span><br><span class="line">    VIH_DisplayFormat = <span class="string">"You are visiting from:&lt;br&gt;IP Address: %%IP%%&lt;br&gt;Host: %%HOST%%"</span>;</span><br><span class="line">    VIH_DisplayOnPage = <span class="string">"yes"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h2><blockquote><p>（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）</p></blockquote><p>利用ActiveXObject控件，ie浏览器里要开启此控件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class="line">function GetLocalIPAddr()&#123; var oSetting = null; var ip = null; try&#123; oSetting = new ActiveXObject(&quot;rcbdyctl.Setting&quot;); ip = oSetting.GetIPAddress; if (ip.length == 0)&#123; return &quot;没有连接到Internet&quot;; &#125; oSetting = null; &#125;catch(e)&#123; return ip; &#125; return ip; &#125; document.write(GetLocalIPAddr()+&quot;&lt;br/&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一：（所有的平台及浏览器）&quot;&gt;&lt;a href=&quot;#方法一：（所有的平台及浏览器）&quot; class=&quot;headerlink&quot; title=&quot;方法一：（所有的平台及浏览器）&quot;&gt;&lt;/a&gt;方法一：（所有的平台及浏览器）&lt;/h2&gt;&lt;p&gt;使用搜狐接口：&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>时间格式化、时间戳转换</title>
    <link href="/2019/05/09/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/"/>
    <id>/2019/05/09/时间格式化、时间戳转换/</id>
    <published>2019-05-09T08:38:53.862Z</published>
    <updated>2019-05-09T10:18:17.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> ddd = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">var</span> year = ddd.getFullYear()</span><br><span class="line">  <span class="keyword">var</span> month = ddd.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> day = ddd.getDate()</span><br><span class="line">  <span class="keyword">var</span> hours = ddd.getHours()</span><br><span class="line">  <span class="keyword">var</span> minutes = ddd.getMinutes()</span><br><span class="line">  <span class="keyword">var</span> seconds = ddd.getSeconds()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> tempTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">return</span> tempTime.toLocaleDateString().replace(<span class="regexp">/\//g</span>, <span class="string">"-"</span>) + <span class="string">" "</span> + tempTime.toTimeString().substr(<span class="number">0</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h1 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h1><blockquote><p>javascript获得时间戳的方法有四种，都是通过实例化时间对象 new Date() 来进一步获取当前的时间戳</p></blockquote><p>1.var timestamp1 = Date.parse(new Date()); // 结果：1477808630000 不推荐这种办法，毫秒级别的数值被转化为000</p><p>  console.log(timestamp1);</p><p>2.var timestamp2 = (new Date()).valueOf(); // 结果：1477808630404 通过<code>valueOf()</code>函数返回指定对象的原始值获得准确的时间戳值</p><p>console.log(timestamp2);</p><p>3.var timestamp3 = new Date().getTime(); // 结果：1477808630404 ，通过原型方法直接获得当前时间的毫秒值，准确</p><p>console.log(timestamp3);</p><p>4.var timetamp4 = Number(new Date()) ; //结果：1477808630404 ,将时间转化为一个number类型的数值，即时间戳</p><p>console.log(timetamp4);</p><p><strong>如果不需要精确到毫秒，可以 / 1000</strong></p><h1 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h1><p>var timestamp4 = new Date(1472048779952);**//直接用 new Date(时间戳) 格式转化获得当前时间</p><p>console.log(timestamp4);</p><p>console.log(timestamp4.toLocaleDateString().replace(/\//g, “-“) + “ “ + timestamp4.toTimeString().substr(0, 8)); //再利用拼接正则等手段转化为yyyy-MM-dd hh:mm:ss 格式</p><p>不过这样转换在某些浏览器上会出现不理想的效果，因为toLocaleDateString()方法是因浏览器而异的，比如 IE为2016年8月24日 22:26:19 格式 搜狗为Wednesday, August 24, 2016 22:39:42</p><p><em>可以通过分别获取时间的年月日进行拼接，比如：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">                y = now.getFullYear(),</span><br><span class="line">                m = now.getMonth() + <span class="number">1</span>,</span><br><span class="line">                d = now.getDate();</span><br><span class="line">            <span class="keyword">return</span> y + <span class="string">"-"</span> + (m &lt; <span class="number">10</span> ? <span class="string">"0"</span> + m : m) + <span class="string">"-"</span> + (d &lt; <span class="number">10</span> ? <span class="string">"0"</span> + d : d) + <span class="string">" "</span> + now.toTimeString().substr(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间格式化&quot;&gt;&lt;a href=&quot;#时间格式化&quot; class=&quot;headerlink&quot; title=&quot;时间格式化&quot;&gt;&lt;/a&gt;时间格式化&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 盒子模型塌陷的解决方法</title>
    <link href="/2019/05/09/CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%A1%8C%E9%99%B7%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>/2019/05/09/CSS 盒子模型塌陷的解决方法/</id>
    <published>2019-05-09T07:33:02.154Z</published>
    <updated>2019-05-10T05:27:02.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="一、盒子塌陷是什么？"><a href="#一、盒子塌陷是什么？" class="headerlink" title="一、盒子塌陷是什么？"></a>一、盒子塌陷是什么？</h2><p>本应该在父盒子内部的元素跑到了外部。</p><h2 id="二，为什么会出现盒子塌陷？"><a href="#二，为什么会出现盒子塌陷？" class="headerlink" title="二，为什么会出现盒子塌陷？"></a>二，为什么会出现盒子塌陷？</h2><p> 当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是<strong>CSS高度塌陷</strong>。</p><h2 id="三，关于盒子塌陷的几种解决方法"><a href="#三，关于盒子塌陷的几种解决方法" class="headerlink" title="三，关于盒子塌陷的几种解决方法"></a>三，关于盒子塌陷的几种解决方法</h2><ol><li><p>最简单，直接，粗暴的方法就是盒子大小写死，给每个盒子设定固定的width和height，直到合适为止，这样的好处是简单方便，兼容性好，适合只改动少量内容不涉及盒子排布的版面，缺点是非自适应，浏览器的窗口大小直接影响用户体验。</p></li><li><p>给外部的父盒子也添加浮动，让其也脱离标准文档流，这种方法方便，但是对页面的布局不是很友好，不易维护。</p></li><li><p>给父盒子添加overflow属性。<br> overflow:auto; 有可能出现滚动条，影响美观。<br> overflow:hidden; 可能会带来内容不可见的问题。</p></li><li><p>父盒子里最下方引入清除浮动块。最简单的有：<br> <code>&lt;span style=&quot;clear:both;&quot;&gt;&lt;/span&gt;</code><br> 有很多人是这么解决的，但是我们并不推荐，因为其引入了不必要的冗余元素 。</p></li><li><p>after伪类清除浮动。<br> 外部盒子的after伪元素设置clear属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">       <span class="attribute">clear</span>: both;</span><br><span class="line">       <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">display</span>: block;</span><br><span class="line">       <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS&quot;&gt;&lt;/a&gt;HTML+CSS&lt;/h1&gt;&lt;h2 id=&quot;一、盒子塌陷是什么？&quot;&gt;&lt;a href=&quot;#一、盒子塌陷是什么？&quot; class=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mock.js+easyMock</title>
    <link href="/2019/05/09/mock.js+easyMock/"/>
    <id>/2019/05/09/mock.js+easyMock/</id>
    <published>2019-05-09T07:09:27.856Z</published>
    <updated>2019-05-09T07:10:41.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mock和easymock"><a href="#mock和easymock" class="headerlink" title="mock和easymock"></a>mock和easymock</h1><h3 id="WHY-mock-js"><a href="#WHY-mock-js" class="headerlink" title="WHY? mock.js"></a>WHY? <a href="http://mockjs.com/" target="_blank" rel="noopener">mock.js</a></h3><p>  <img src="./static/02.png" alt="mockjs"></p><h3 id="and-easymock"><a href="#and-easymock" class="headerlink" title="and easymock"></a>and <a href="https://www.easy-mock.com/" target="_blank" rel="noopener">easymock</a></h3><p>  <img src="./static/03.png" alt="easymock"></p><p>  <strong>对于全端开发工程师在与后台同学协同开发的时候会遇到问题</strong>: <em>(问号脸)后台接口都没有,请求个吉尔?</em><br>  我们只能使用比如Apache/node等后台语言搭建一个服务器,再加上Mysql数据库加上可视化Navicat,给我们提供数据服务. <strong>很烦</strong>,因为我们要模拟假数据表,关联数据库,测试运行后台服务并解决跨域等问题,然后才能做 <strong>前端开发</strong>,很难受,假如<strong>有一款在线工具能按照我们的接口文档咔咔往上整数据,然后发送的ajax请求都能响应且数据格式正确</strong>, 这就很舒服 ,最好<strong>能和Vue等主流框架配合使用</strong>那就更舒服了(<code>到vue再说</code>).</p><p><strong>面试装逼:</strong> <em>Mock.js</em>是一款前端开发中拦截Ajax请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.</p><hr><hr><h2 id="思考-提个简单的开发需求"><a href="#思考-提个简单的开发需求" class="headerlink" title="思考: 提个简单的开发需求:"></a>思考: 提个简单的开发需求:</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">请求后台某个接口,返回<span class="number">10</span><span class="number">-15</span>条学生数据: 要求包含 姓名,年龄,性别. 成功状态码:<span class="number">200</span> .成功状态信息: success.</span><br><span class="line"></span><br><span class="line"><span class="string">`响应数据结构分析:`</span></span><br><span class="line">&#123;</span><br><span class="line">  status:<span class="number">200</span>,</span><br><span class="line">  msg:<span class="string">'success'</span>,</span><br><span class="line">  stuInfo:</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">'abc'</span>,</span><br><span class="line">      age:<span class="number">10</span>,</span><br><span class="line">      gender:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    ...</span><br><span class="line">    ,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">'abc'</span>,</span><br><span class="line">      age:<span class="number">10</span>,</span><br><span class="line">      gender:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`方法1: 模拟后台(node/php + mysql)`</span></span><br><span class="line">  <span class="number">1</span>,搭建node服务器/Apache服务器 </span><br><span class="line">  <span class="number">2</span>,开启Mysql服务, 制定数据库,数据表,添加表信息(添加姓名,年龄,性别的值 和 值类型)</span><br><span class="line">  <span class="number">3</span>,使用node或者php语法关联数据库,声明查询sql语句,并执行sql.</span><br><span class="line">  <span class="number">4</span>,将查询db内容处理为json返回</span><br><span class="line">代码量: 前端ajax+模板引擎<span class="number">20</span>行左右 + 后台实现代码<span class="number">40</span>行左右 + 繁琐的数据表设计 + 一条条的添加数据库内容  =  BOOM心态爆炸!!!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者你可以...</span></span><br><span class="line"><span class="string">`方法2: 完全脱离后台和数据库(mockjs配合vue的拦截器),或者 脱离数据库操作(mockjs简单的node后台)`</span></span><br><span class="line">  <span class="number">1</span>,搭建node服务器</span><br><span class="line">  <span class="number">2</span>,使用mockjs的mock方法制定随机数据</span><br><span class="line">  <span class="number">3</span>,处理为json返回</span><br><span class="line">代码量: 前端ajax+模板引擎<span class="number">20</span>行左右 + node服务响应mock数据<span class="number">11</span>行 = 咦嘿嘿很开心!</span><br><span class="line">代码:</span><br><span class="line">  <span class="keyword">const</span> app = reqire(<span class="string">'express'</span>)</span><br><span class="line">  <span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line">  app.get(<span class="string">'/someApi'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> resData = Mock.mock(&#123;</span><br><span class="line">      <span class="string">'status'</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="string">'msg'</span>:<span class="string">'success'</span>,</span><br><span class="line">      <span class="string">'stuData|10-20'</span>:[&#123;</span><br><span class="line">        <span class="string">'name|1-3'</span>:<span class="regexp">/[a-z][A-Z]/</span>,</span><br><span class="line">        <span class="string">'age|+1'</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="string">'gender|1'</span>:<span class="literal">true</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData))</span><br><span class="line">  &#125;)</span><br><span class="line">  app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><hr><hr><h2 id="一-Mockjs怎么用"><a href="#一-Mockjs怎么用" class="headerlink" title="一 Mockjs怎么用?"></a>一 Mockjs怎么用?</h2><h3 id="1-mock-js的使用"><a href="#1-mock-js的使用" class="headerlink" title="1 mock.js的使用"></a>1 mock.js的使用</h3><h5 id="1-1-1-安装并引入mock-js"><a href="#1-1-1-安装并引入mock-js" class="headerlink" title="1.1.1 安装并引入mock.js"></a>1.1.1 安装并引入mock.js</h5><p>  创建一个node服务器–server.js文件<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'123'</span></span><br><span class="line"><span class="comment">// 监听路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; </span><br><span class="line">  res.end(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 开启服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h5 id="1-1-2-安装并引入mock-js"><a href="#1-1-2-安装并引入mock-js" class="headerlink" title="1.1.2 安装并引入mock.js"></a>1.1.2 安装并引入mock.js</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs </span><br><span class="line">或者 </span><br><span class="line">script:src=&quot;http://mockjs.com/dist/mock.js&quot;</span><br></pre></td></tr></table></figure><h5 id="1-1-3-mockjs模块模拟数据"><a href="#1-1-3-mockjs模块模拟数据" class="headerlink" title="1.1.3 mockjs模块模拟数据"></a>1.1.3 mockjs模块模拟数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引进express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 引进mockjs</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备随机数据</span></span><br><span class="line">  <span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|1-20'</span>: [&#123;</span><br><span class="line">      <span class="string">'name|3-5'</span>: <span class="regexp">/[a-z][A-Z]/</span>,</span><br><span class="line">      <span class="string">'age|10-15'</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="string">'gender|1'</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h5 id="1-1-4-测试服务"><a href="#1-1-4-测试服务" class="headerlink" title="1.1.4 测试服务"></a>1.1.4 测试服务</h5><p>在terminal窗口中运行命令nodemoon server.js<br>在浏览器中请求127.0.0.1:3000 观察响应体<br><img src="./static/01.bmp" alt="响应数据"></p><h5 id="1-1-5-使用"><a href="#1-1-5-使用" class="headerlink" title="1.1.5 使用"></a>1.1.5 使用</h5><p>这样在ajax请求相关接口就能返回内容随机,结构固定的JSON数据了</p><hr><h4 id="2-mockjs语法"><a href="#2-mockjs语法" class="headerlink" title="2 mockjs语法"></a>2 <a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification" target="_blank" rel="noopener">mockjs语法</a></h4><h5 id="2-1-Mock-mock-方法"><a href="#2-1-Mock-mock-方法" class="headerlink" title="2.1 Mock.mock()方法"></a>2.1 <strong>Mock.mock()方法</strong></h5><p>  加对象参数就可以生成响应数据</p><hr><h5 id="2-2-参数对象模板规则"><a href="#2-2-参数对象模板规则" class="headerlink" title="2.2 参数对象模板规则"></a>2.2 参数对象模板规则</h5><ul><li><strong>属性名|生成规则：属性值 name | rule : value</strong>  </li><li><strong>name</strong>: 生成数据的名字字符串</li><li><strong>|</strong>: 一定要加</li><li><strong>rule</strong>: 生成数据的规则<pre><code>|min-max                  生成个数min至max条|count                    生成count条|min-max.dmin-dmax        1-9.2-3  数字值在1-9之间,小数点后保留2-3位  如 2.1   3.74|min-max.dcount           1-9.2     数字值在1-9之间,小数点后保留2位   如2.13  8.54|count.dmin-dmax          10.1-2    整数部分是10,小数点部分1-2位      如10.99   10.1|count.dcount             10.2      整数部分是10,小数点部分2位        如10.11   10.43|+step                    &apos;score|+1&apos;:1,   以value 1为基准,递增1</code></pre></li><li><p><strong>value</strong>: 属性值的规则</p><ul><li><p>字符串</p><pre><code>&apos;name|min-max&apos;: string 通过重复 string 生成一个字符串，min&lt;=重复次数&lt;=max&apos;name|count&apos;: string 通过重复 string 生成一个字符串，重复次数==count。</code></pre></li><li><p>数字</p><pre><code>&apos;name|+1&apos;: number 属性值自动加 1，初始值为 number。&apos;name|min-max&apos;: number    number确定数据类型,生成值在min-max间的整数&apos;name|min-max.dmin-dmax&apos;: numbernumber确定数据类型,生成值在min-max间的小数</code></pre></li><li>布尔<pre><code>&apos;name|1&apos;: boolean随机生成一个布尔值,真假各50%&apos;name|t-f&apos;: true随机生成一个布尔值,真占t/t+f  假占f/t+f</code></pre></li><li><p>对象</p><pre><code>&apos;name|count&apos;: object从属性值 object 中随机选取 count 个属性。&apos;name|min-max&apos;: object从属性值 object 中随机选取 min 到 max 个属性。</code></pre></li><li><p><code>数组</code>  </p><pre><code>&apos;name|1&apos;: array从属性值 array 中随机选取 1 个元素，作为最终值。&apos;name|+1&apos;: array从属性值 array 中顺序选取 1 个元素，作为最终值。&apos;name|min-max&apos;: array通过重复属性值 array 生成一个新数组，重复次数大于等于 min，小于等于 max。&apos;name|count&apos;: array通过重复属性值 array 生成一个新数组，重复次数为 count。var data = mock.mock({  // 将value数组中的项(对象) 重复计算1-10次 添加到新数组返回  &apos;obj|1-10&apos;:[    {      &apos;score|+1&apos;:1    }  ]})//生成 { obj: [ { score: 1 }, { score: 2 }, { score: 3 }, { score: 4 } ] }</code></pre></li><li><p>函数(不用)</p><pre><code>&apos;name&apos;: function执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 &apos;name&apos; 所在的对象。</code></pre></li><li>正则<pre><code>&apos;name&apos;: regexp根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。/[a-z][A-Z][0-9]/  /\w\W\s\S\d\D/  /\d{5,10}/ [\u4e00-\u9fa5]    </code></pre></li></ul></li></ul><hr><h5 id="2-3-Mock-valid-template-data-校验数据-处理请求发送来的数据-如果完全脱离后台就需要该方法"><a href="#2-3-Mock-valid-template-data-校验数据-处理请求发送来的数据-如果完全脱离后台就需要该方法" class="headerlink" title="2.3  Mock.valid( template, data ) 校验数据(处理请求发送来的数据,如果完全脱离后台就需要该方法)"></a>2.3  <strong>Mock.valid( template, data )</strong> 校验数据(处理请求发送来的数据,如果完全脱离后台就需要该方法)</h5><ul><li><code>在vue中可以脱离后台开发(到下个自习说)</code></li><li><strong>template</strong> 必选, 表示数据模板，可以是对象或字符串</li><li><strong>data</strong> 必选, 表示真实数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用来做基于mock的ajax请求参数的处理</span></span><br><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line">    name: <span class="string">'value1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'value2'</span></span><br><span class="line">&#125;</span><br><span class="line">Mock.valid(template, data)<span class="comment">//返回值是一个校验结果数组</span></span><br><span class="line"><span class="comment">// 如果匹配则 返回空数组</span></span><br><span class="line"><span class="comment">// 如果不匹配 messages属性表示tteamplate和data不匹配的原因</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="2-4-Mock-random工具对象"><a href="#2-4-Mock-random工具对象" class="headerlink" title="2.4 Mock.random工具对象"></a>2.4 <a href="https://github.com/nuysoft/Mock/wiki/Mock.Random" target="_blank" rel="noopener">Mock.random</a>工具对象</h5><ul><li>Mock.Random 是一个工具类，<code>用于生成各种随机数据。不用掌握,用到就点击蓝字查</code></li></ul><hr><h1 id="3-easymock的使用"><a href="#3-easymock的使用" class="headerlink" title="3 easymock的使用"></a>3 easymock的使用</h1><p>  <img src="./static/06.png" alt="easymock"></p><h4 id="3-1-注册"><a href="#3-1-注册" class="headerlink" title="3.1 注册"></a>3.1 <a href="https://www.easy-mock.com/login" target="_blank" rel="noopener"><code>注册</code></a></h4><p>  <img src="./static/04.png" alt="个人页面"></p><h4 id="3-2-注意右侧的使用文档右键新窗口打开"><a href="#3-2-注意右侧的使用文档右键新窗口打开" class="headerlink" title="3.2 注意右侧的使用文档右键新窗口打开"></a>3.2 注意右侧的<a href="https://www.easy-mock.com/docs" target="_blank" rel="noopener"><code>使用文档</code></a>右键新窗口打开</h4><p>  <img src="./static/05.png" alt="文档"></p><h4 id="3-3-快速开始-创建一个项目-点击左侧演示项目"><a href="#3-3-快速开始-创建一个项目-点击左侧演示项目" class="headerlink" title="3.3 快速开始 - 创建一个项目 点击左侧演示项目"></a>3.3 <code>快速开始 - 创建一个项目</code> 点击左侧演示项目</h4><p>  <img src="./static/07.png" alt="打开项目"></p><h4 id="3-5-打开项目设置"><a href="#3-5-打开项目设置" class="headerlink" title="3.5 打开项目设置"></a>3.5 <code>打开项目设置</code></h4><p>  <img src="./static/08.png" alt="项目设置"></p><h4 id="3-6-配置接口点击保存-提示更新成功就OK了"><a href="#3-6-配置接口点击保存-提示更新成功就OK了" class="headerlink" title="3.6 配置接口点击保存,提示更新成功就OK了"></a>3.6 <code>配置接口</code>点击保存,提示更新成功就OK了</h4><p>  <img src="./static/09.png" alt="项目设置"></p><h4 id="3-7-接口列表配置"><a href="#3-7-接口列表配置" class="headerlink" title="3.7 接口列表配置"></a>3.7 <code>接口列表配置</code></h4><pre><code>记录当前项目的基本地址  `Base URL,注意要记录自己项目的啊!`https://www.easy-mock.com/mock/5bcd7381617c6c67bc2a20f8/itcast点击3.1左侧项目,进入个人项目,点击创建接口</code></pre><p>  <img src="./static/10.png" alt="接口列表位置"></p><h4 id="3-8-接口配置页面-左侧是当前接口返回值设置-右侧接口请求方式-地址等设置"><a href="#3-8-接口配置页面-左侧是当前接口返回值设置-右侧接口请求方式-地址等设置" class="headerlink" title="3.8 接口配置页面: 左侧是当前接口返回值设置,右侧接口请求方式,地址等设置"></a>3.8 <code>接口配置页面</code>: 左侧是当前接口返回值设置,右侧接口请求方式,地址等设置</h4><p>  <img src="./static/11.png" alt="接口详情设置">  <img src="./static/12.png" alt="配置"><br>  将以下代码粘贴至左侧区域,并配置右侧选项<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//响应状态码</span></span><br><span class="line">  <span class="string">'status'</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stus 值为数组</span></span><br><span class="line">  <span class="string">'stus|5-10'</span>: [&#123;</span><br><span class="line">    <span class="string">'name|2-4'</span>: <span class="regexp">/[\u4e00-\u9fa5]/</span>, <span class="comment">//生辰任意内容的字符串</span></span><br><span class="line">    <span class="string">'age|+1'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'score|1-100'</span>: <span class="number">100</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-9创建或更新接口后会返回到列表页面-点击预览按钮"><a href="#3-9创建或更新接口后会返回到列表页面-点击预览按钮" class="headerlink" title="3.9创建或更新接口后会返回到列表页面, 点击预览按钮"></a>3.9创建或更新接口后会返回到列表页面, <strong>点击预览按钮</strong></h4><pre><code>如果能够看到响应的数据,就说明本次请求配置是欧克的</code></pre><p>  <img src="./static/14.png" alt="接口预览-响应"><br>  <img src="./static/15.png" alt="接口预览-请求"></p><h4 id="3-10使用-POSTMan测试接口"><a href="#3-10使用-POSTMan测试接口" class="headerlink" title="3.10使用 POSTMan测试接口"></a>3.10使用 <strong>POSTMan</strong>测试接口</h4><pre><code>`拼接地址注意: 要使用easymock项目的BaseUrl 和 测试接口的地址&quot;test&quot;拼接`</code></pre><p>  <img src="./static/16.png" alt="接口预览-请求"></p><h4 id="3-11欧克-现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦"><a href="#3-11欧克-现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦" class="headerlink" title="3.11欧克,现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦!"></a>3.11欧克,现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦!</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mock和easymock&quot;&gt;&lt;a href=&quot;#mock和easymock&quot; class=&quot;headerlink&quot; title=&quot;mock和easymock&quot;&gt;&lt;/a&gt;mock和easymock&lt;/h1&gt;&lt;h3 id=&quot;WHY-mock-js&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="扩展阅读" scheme="/categories/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="扩展阅读" scheme="/tags/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基础</title>
    <link href="/2019/05/09/Vue%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Vue - 基础/</id>
    <published>2019-05-09T07:07:25.801Z</published>
    <updated>2019-05-09T07:08:37.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;待完成&quot;&gt;&lt;a href=&quot;#待完成&quot; class=&quot;headerlink&quot; title=&quot;待完成&quot;&gt;&lt;/a&gt;待完成&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Vue" scheme="/categories/Vue/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Node - 内置模块</title>
    <link href="/2019/05/09/Node%20-%20%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    <id>/2019/05/09/Node - 内置模块/</id>
    <published>2019-05-09T07:05:02.909Z</published>
    <updated>2019-05-09T07:07:01.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h1><table><thead><tr><th>fs</th><th>操作 文件</th></tr></thead><tbody><tr><td>const fs = require(‘fs’)</td><td></td></tr><tr><td>fs.readFile()</td><td>读取   fs.readFile(‘1.txt’,’utf-8’, (err, data) =&gt; {})</td></tr><tr><td>fs.writeFlie()</td><td>重写   fs.writeFlie(文件路径,data,(err)=&gt;{})</td></tr><tr><td>fs.watchFile()</td><td>监视fs.watchFile(‘./1.txt’,{interval:200},(curr,   prev) =&gt; {})</td></tr><tr><td>fs.access(path, (err) =&gt;   {})</td><td>存在，如果err是一个对象，就是文件不存在</td></tr><tr><td>fs.unlink(‘test.txt’, (err)   =&gt; {})</td><td>删除文件</td></tr><tr><td>fs.appendFile(file,   data, callback)</td><td>向文件中追加内容</td></tr><tr><td>fs.copyFile(src,   callback)</td><td>复制文件</td></tr><tr><td>fs.mkdir(path,   callback)</td><td>创建目录</td></tr><tr><td>fs.readDir(path,   callback)</td><td>读取目录列表</td></tr><tr><td>fs.rename(oldPath,   newPath, callback)</td><td>重命名文件/目录</td></tr><tr><td>fs.rmdir(path,   callback)</td><td>只能删除空目录</td></tr><tr><td>fs.stat(path,   callback)</td><td>获取文件/目录信息</td></tr><tr><td>fs.watch(filename[,   options][, listener])</td><td>监视文件/目录</td></tr></tbody></table><h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><table><thead><tr><th>path</th><th>操作 路径</th></tr></thead><tbody><tr><td>const path = require(‘path’)</td><td></td></tr><tr><td>path.basename(‘路径’)</td><td>获取文件名</td></tr><tr><td>path.dirname(‘路径’)</td><td>获取路径</td></tr><tr><td>path.extname(‘路径’)</td><td>获取后缀名</td></tr><tr><td>path.parse(‘路径’)</td><td>将路径转换成对象，包含各个部分</td></tr><tr><td>path.join(‘路径’,’路径’)</td><td>拼接多个路径</td></tr><tr><td>path.resolve(‘路径’,’路径’)</td><td>在当前文件目录基础上 拼接路径</td></tr></tbody></table><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><table><thead><tr><th>html</th><th>创建服务器</th></tr></thead><tbody><tr><td>const fs =   require(‘html’)</td><td></td></tr><tr><td>server.listen(8080,   ‘127.0.0.1’, (err) =&gt; { })</td><td>监听8080端口</td></tr><tr><td>server.on(‘request’,   (request, response) =&gt; {})</td><td>用户请求后  的处理程序</td></tr><tr><td>response.setHeader(‘Content-Type’,   ‘text/html’)</td><td>设置用户请求文件的content-type</td></tr><tr><td>request.method   === ‘GET’    //POST</td><td>判断提交方式</td></tr><tr><td>request.on(‘data’,   (chunk) =&gt; {    })</td><td>如果是表单提交，利用chunk抓数据包</td></tr><tr><td>request.on(‘end’,   () =&gt; {})</td><td>表单提交抓包后，的处理程序</td></tr><tr><td>response.writeHead(302, {   Location: ‘/‘ });</td><td>表单提交后，设置302跳转</td></tr></tbody></table><h1 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h1><table><thead><tr><th>querystring</th><th>字符串 转对象</th></tr></thead><tbody><tr><td>const qs = require(‘querystring’)</td><td></td></tr><tr><td>querystring.parse(str[,   sep[, eq[, options]]])</td><td>将字符串解析成对象  （字符串，默认&amp;，默认=）</td></tr></tbody></table><h1 id="mime-—-第三方模块"><a href="#mime-—-第三方模块" class="headerlink" title="mime —   第三方模块"></a>mime —   第三方模块</h1><table><thead><tr><th>mime —   第三方模块</th><th>通过后缀名 创建   Content-Type</th></tr></thead><tbody><tr><td>const mime = require(‘mime’)</td><td></td></tr><tr><td>mime.getType(后缀名)</td><td>mime.getType(.html)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fs&quot;&gt;&lt;a href=&quot;#fs&quot; class=&quot;headerlink&quot; title=&quot;fs&quot;&gt;&lt;/a&gt;fs&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;fs&lt;/th&gt;
&lt;th&gt;操作 文件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;t
      
    
    </summary>
    
      <category term="Node.js" scheme="/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node - 基础</title>
    <link href="/2019/05/09/Node%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Node - 基础/</id>
    <published>2019-05-09T07:01:40.717Z</published>
    <updated>2019-05-09T07:04:53.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><table><thead><tr><th>类型</th><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>全局成员</td><td>Global Objects</td><td></td><td></td></tr><tr><td>__filename</td><td>console.log(__filename)</td><td>获取当前脚本名</td><td></td></tr><tr><td>__dirname</td><td></td><td>获取当前脚本所在目录</td><td></td></tr><tr><td>REPL</td><td>R：Read 读取</td><td></td><td></td></tr><tr><td>E：Eval 执行</td><td></td><td></td><td></td></tr><tr><td>P：Print 输出</td><td></td><td></td><td></td></tr><tr><td>L：Loop 循环</td><td></td><td></td><td></td></tr><tr><td>执行</td><td>打开命令行并定位到 hello.js   文件所属目录    - 在命令行中输入 node hello.js 回车执行</td><td></td><td></td></tr><tr><td>基本</td><td>require</td><td>要求，命令</td><td>用于核心模块的请求,每个核心模块就是个{}</td></tr><tr><td>request</td><td>请求</td><td></td><td></td></tr><tr><td>throw</td><td>抛出</td><td></td><td></td></tr><tr><td>init</td><td>在里面 ？</td><td></td><td></td></tr><tr><td>install</td><td>安装</td><td></td><td></td></tr><tr><td>Sync</td><td>同步</td><td></td><td></td></tr><tr><td></td><td>statusCode</td><td>响应码、状态码</td><td></td></tr><tr><td></td><td>views</td><td></td><td></td></tr><tr><td>导入导出      (用户模块 请求  (./))      (核心、第三方模块 直接名字)</td><td>module.exports</td><td>模块.导出</td><td>每个模块都有1个 这个对象</td></tr><tr><td>exports</td><td>导出</td><td>这个是module的对象，但不能导出单个成员</td><td></td></tr><tr><td>这俩都指向一个{}，可以有属性、方法，但是require给对象新赋值后   会改变对象的指向</td><td></td><td></td><td></td></tr><tr><td>JSON</td><td>JSON.parse(data)</td><td></td><td>把*.json转化成对象</td></tr><tr><td>JSON.stringify(obj)</td><td></td><td>把对象转换成json字符串</td></tr></tbody></table><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'xx.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'message.txt'</span>, <span class="string">'Hello Node.js'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The file has been saved!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="简单服务器"><a href="#简单服务器" class="headerlink" title="简单服务器"></a>简单服务器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer()</span><br><span class="line"><span class="comment">// 当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.end(<span class="string">'Hello Node.js!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 绑定端口号，启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功，请求访问 http://127.0.0.1:3000/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr
      
    
    </summary>
    
      <category term="Node.js" scheme="/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery - 基础</title>
    <link href="/2019/05/09/2.2.1.jQuery%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/2.2.1.jQuery - 基础/</id>
    <published>2019-05-09T06:40:16.262Z</published>
    <updated>2019-05-09T07:01:07.578Z</updated>
    
    <content type="html"><![CDATA[<p><code>隐式迭代、链式编程</code></p><h1 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h1><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>$(‘选择器’);</td><td>$是一个函数   var $btn = $(‘#btn’);</td></tr><tr><td>jQuery(‘选择器’);</td><td>var $btn =   jQuery(‘#btn’)</td></tr><tr><td>$(dom对象);</td><td>DOM转jq对象</td></tr><tr><td>var div =   $(‘div’)[0];</td><td>jq转DOM对象</td></tr></tbody></table><p>通过$符号调用所返回的jQuery对象的本质就是一个集合（==伪数组==）→   jQuery对象      //  通过index()可获取一组标签中的索引</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>$(‘#id’)</td><td>ID选择器</td><td>获取指定ID的元素</td></tr><tr><td>$(‘.class’)</td><td>类选择器</td><td>获取同一类class的元素</td></tr><tr><td>$(‘div’)</td><td>标签选择器</td><td>获取同一类标签的所有元素</td></tr><tr><td>$(‘div,p,li’)</td><td>并集选择器</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>$(‘div.redClass’)</td><td>交集选择器</td><td>获取class为redClass的div元素</td></tr><tr><td>$(‘ul &gt;   li’)</td><td>子代选择器</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>$(‘ul li’)</td><td>后代选择器</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr><tr><td>$(‘li:eq(2)’).css(‘color’,   ‘red’)</td><td>:eq(index)</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>$(‘li:odd’).css(‘color’,   ‘red’)</td><td>:odd</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>$(‘li:even’).css(‘color’,   ‘red’)</td><td>:even</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr><tr><td>children(selector)</td><td>(‘ul’).children(‘li’)</td><td>相当于(‘ull &gt;   i’)，子类选择器</td></tr><tr><td>find(selector)</td><td>(‘ul’).find(‘li’)</td><td>相当于(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(‘#first’).siblings(‘li’)</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(‘#first’).parent()</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(‘li’).eq(2)</td><td>相当于$(‘li:eq(2)’),index从0开始</td></tr><tr><td>end()</td><td></td><td>找上一级的jq对象</td></tr><tr><td>next()</td><td>$(‘li’).next()</td><td>找下一个兄弟</td></tr><tr><td>nextAll()</td><td></td><td></td></tr><tr><td>prev()</td><td>$(‘li’).prev()</td><td>找上一次兄弟</td></tr><tr><td>prevAll()</td><td></td></tr></tbody></table><h1 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.事件名(事件处理程序);</td><td>简单方式</td><td>$(‘button’).click(function(){     alert(‘nihao’)   });</td></tr><tr><td>jQuery对象.on(‘事件名’,事件处理程序);</td><td>on方式注册</td><td></td></tr><tr><td>jQuery对象.off(‘click’,事件处理程序名称)</td><td>解绑简单的事件</td><td></td></tr><tr><td>jQuery对象.off(‘click’,‘选择器’,事件处理程序名称)</td><td>解绑事件委托注册的事件</td><td></td></tr><tr><td>jQuery对象.trigger(‘事件名’);</td><td>触发事件</td><td>通常用于定时器，每隔<em>秒  触发一次某个元素的</em>事件</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件委托  jQuery对象.on('事件名','选择器',事件处理程序);</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul'</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// this 是谁？ 当前点击的li</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    alert($(<span class="keyword">this</span>).text());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="样式、属性、类名、内容控制"><a href="#样式、属性、类名、内容控制" class="headerlink" title="样式、属性、类名、内容控制"></a>样式、属性、类名、内容控制</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.css(name,value);</td><td></td><td>$(‘div’).css(‘width’,500);</td></tr><tr><td>jQuery对象.css({ name:value, name:value});</td><td></td><td>$(‘div’).css({      border:’10px solid blue’,      background:’pink’,    });</td></tr><tr><td>jQuery对象.css(‘样式属性名’);</td><td></td><td>var h = $(‘div’).css(‘height’);</td></tr><tr><td>jQuery对象.addClass(‘类名’);</td><td>添加类名</td><td></td></tr><tr><td>jQuery对象.removeClass(‘类名’);</td><td>移除类名</td><td></td></tr><tr><td>jQuery对象.toggleClass(‘类名’);</td><td>类名切换</td><td></td></tr><tr><td>jQuery对象.hasClass(‘类名’);</td><td>检测类名是否存在</td><td>返回布尔值</td></tr><tr><td>jQuery对象.attr(name,value)</td><td>设置标签的属性</td><td>$(“img”).attr(“width”,”180”);</td></tr><tr><td>jQuery对象.attr(name);</td><td>获取标签属性值</td><td></td></tr><tr><td>removeAttr(name);</td><td>移除标签的属性</td><td></td></tr><tr><td>$(‘input’).prop(‘属性名’);</td><td>prop方法操作属性</td><td>针对：selected、checked、disabled</td></tr><tr><td>jQuery对象.text();</td><td>操作标签内部的文本</td><td></td></tr><tr><td>jQuery对象.html();</td><td>操作标签内部的所有内容</td><td></td></tr><tr><td>jQuery对象.val();</td><td>操作表单元素的内容</td></tr></tbody></table><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.show(speed,easing,fn);</td><td>显示</td><td>-   参数speed，动画时长，数字→毫秒      - easing，运动的方式，默认swing缓冲,linear匀速</td></tr><tr><td>jQuery对象.hide(speed,easing,fn);</td><td>隐藏</td><td></td></tr><tr><td>jQuery对象.toggle(speed,easing,fn);</td><td>切换</td><td></td></tr><tr><td>jQuery对象.slideDown(speed,easing,fn);</td><td>下拉 卷曲-显示</td><td></td></tr><tr><td>jQuery对象.slideUp(speed,easing,fn);</td><td>下拉 卷曲-隐藏</td><td></td></tr><tr><td>jQuery对象.slideToggle(speed,easing,fn);</td><td>下拉 卷曲-切换</td><td></td></tr><tr><td>jQuery对象.fadeIn(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>jQuery对象.fadeOut(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>jQuery对象.fadeToggle(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>animate(params,[speed],[easing],[fn])</td><td>自定义动画</td><td>animage({   样式属性名:目标值, 样式属性名:目标值},1000)</td></tr><tr><td>jQuery对象.stop(clearQueue,jumpToEnd);</td><td>停止动画</td><td>2个值 是布尔值</td></tr></tbody></table><h1 id="标签元素控制"><a href="#标签元素控制" class="headerlink" title="标签元素控制"></a>标签元素控制</h1><table><thead><tr><th>动态创建元素</th><th>中文</th></tr></thead><tbody><tr><td>$(‘<li></li>‘)</td><td>创建元素</td></tr><tr><td>新创建jQuery对象.appendTo(‘父选择器’、父对象);</td><td>在最后追加元素</td></tr><tr><td>父元素jQuery对象.apeend(新创建的jQuery对象);</td><td></td></tr><tr><td>新创建jQuery对象.prependTo(‘父元素选择器’);</td><td>在前面追加元素</td></tr><tr><td>父元素jQuery对象.prepend(新创建的jQuery对象);</td><td></td></tr><tr><td>jQuery对象.remove()</td><td>删除元素   删谁就让谁调用这个方法</td></tr><tr><td>jQuery对象.empty()</td><td>清空元素   清空内部的所有元素及元素相关的事件</td></tr><tr><td>jQuery对象.html(‘’);</td><td>清空元素   不推荐使用，该方式不会清空事件</td></tr><tr><td>jQuery对象.clone(布尔值);    返回克隆好的元素</td><td>参数：默认是false,表示仅仅克隆内容。   true，克隆内容和事件</td></tr><tr><td>$(“选择器”).before(html);</td><td></td></tr><tr><td>$(“选择器”).after(html)</td></tr></tbody></table><table><thead><tr><th>操作元素的尺寸</th><th>中文</th></tr></thead><tbody><tr><td>jQuery对象.width(数字);</td><td>仅内容部分</td></tr><tr><td>jQuery对象.height(数字);</td><td>仅内容部分</td></tr><tr><td>jQuery对象.innerWidth(数字);</td><td>内容部分 + padding</td></tr><tr><td>jQuery对象.innerHeight(数字);</td><td>内容部分 + padding</td></tr><tr><td>jQuery对象.outerWidth(数字);</td><td>内容部分 + padding +   border   .outerWidth(true) 额外获取margin</td></tr><tr><td>jQuery对象.outerHeight(数字);</td><td>内容部分 + padding +   border</td></tr></tbody></table><table><thead><tr><th>操作元素的位置</th><th>中文</th></tr></thead><tbody><tr><td>jQuery对象.offset()</td><td>获取的元素的位置，永远参照文档,返回一个对象，对象中包含了元素的位置</td></tr><tr><td>jQuery对象.position();</td><td>返回的一个对象，对象中包含了元素的位置，参照最近的定位元素（和定位有关系）</td></tr><tr><td>jQuery对象.scrollTop();</td><td>$(window).scrollTop()   操作卷去的页面间距</td></tr></tbody></table><h1 id="JQ-ajax"><a href="#JQ-ajax" class="headerlink" title="JQ - ajax"></a>JQ - ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123; <span class="attr">key</span>:value &#125;）</span><br><span class="line">       </span><br><span class="line">url：请求地址</span><br><span class="line">type：请求方法，默认为 <span class="keyword">get</span></span><br><span class="line">dataType：服务端响应数据类型</span><br><span class="line">contentType：请求体内容类型，默认 application/x-www-form-urlencoded</span><br><span class="line">data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</span><br><span class="line">timeout：请求超时时间</span><br><span class="line">beforeSend：请求发起之前触发</span><br><span class="line">success：请求成功之后触发（响应状态码 200）</span><br><span class="line">error：请求失败触发</span><br><span class="line">complete：请求完成触发（不管成功与否）</span><br><span class="line">       </span><br><span class="line">//或者：</span><br><span class="line">$.<span class="keyword">get</span>(url, data, callback)</span><br><span class="line">$.post(url, data, callback)</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>入口函数</td><td>$(function(){ // 获取元素});</td></tr><tr><td>$(document).ready(function(){   // 获取元素});</td></tr></tbody></table><p>window.onload会等页面全部加载完执行 只能存在一个，而jq可以存在多个，dpm树结束后就运行    </p><p>“这俩都是在jq原型中创建一个方法，让jq对象调用（如果用上了this  this代码调用者）<br>$.prototype.createTable = function (shuju) {}<br>$.fn.createTable = function (shuju) {}”    </p><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>事件对象.clientX/Y   参照浏览器</td><td>事件对象.preventDefault();   阻止默认行为</td></tr><tr><td>事件对象.pageX/Y   参照文档</td><td>事件对象.stopPropagation();   阻止事件冒泡</td></tr><tr><td>事件对象.offsetX/Y   参照事件源</td><td>事件对象.keyCode   返回键码数字</td></tr><tr><td>事件对象.target;</td><td>事件对象.alt/shift/ctrlKey   返回是布尔值。 检测是否按下（true）</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th><th></th><th></th></tr></thead><tbody><tr><td>多库共存</td><td>jq对象 =   jQuery.noConflict();</td><td>不 冲突</td><td>释放$，改成自定义的对象      var $1 = jQuery.noConflict();</td></tr><tr><td>深/浅拷贝</td><td>$.extend([true],obj1,obj2)</td><td>对obj1进行 深拷贝、浅拷贝</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>*.data()</td><td>拿标签中的data-* 自定义属性的值</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>$(selector).load(function)</td><td>当指定的元素（及子元素）已加载时，会发生 load() 事件</td></tr><tr><td>jQuery.getJSON(url,data,success(data,status,xhr))</td><td>通过 HTTP GET 请求载入 JSON 数据。</td></tr><tr><td>jQuery.getScript(url,success(response,status))</td><td>getScript() 方法通过 HTTP GET 请求载入并执行 JavaScript 文件。</td></tr><tr><td>$(from表单).serialize()</td><td>统一获取表单中的数据，以键值对 呈现（input需要name属性）</td></tr></tbody></table><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="回到页面顶端-获取元素位置"><a href="#回到页面顶端-获取元素位置" class="headerlink" title="回到页面顶端+获取元素位置"></a>回到页面顶端+获取元素位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 窗口卷曲事件</span></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = $(<span class="built_in">window</span>).scrollTop() <span class="comment">// 获取页面卷曲值</span></span><br><span class="line">    <span class="keyword">let</span> a = $(<span class="string">'.jia'</span>).offset().top <span class="comment">//获取元素距离页面订单的px</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'html,body'</span>).animate(&#123;</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;) <span class="comment">//回到页面顶端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;隐式迭代、链式编程&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;jQuery对象&quot;&gt;&lt;a href=&quot;#jQuery对象&quot; class=&quot;headerlink&quot; title=&quot;jQuery对象&quot;&gt;&lt;/a&gt;jQuery对象&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr
      
    
    </summary>
    
      <category term="jQuery" scheme="/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 高级、ES5、ES6</title>
    <link href="/2019/05/09/2.1.4.JavaScript%20-%20%E9%AB%98%E7%BA%A7%E3%80%81ES5%E3%80%81ES6/"/>
    <id>/2019/05/09/2.1.4.JavaScript - 高级、ES5、ES6/</id>
    <published>2019-05-09T06:05:56.131Z</published>
    <updated>2019-05-09T06:39:43.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-高级"><a href="#JS-高级" class="headerlink" title="JS 高级"></a>JS 高级</h1><h2 id="原型-对象"><a href="#原型-对象" class="headerlink" title="原型-对象"></a>原型-对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>原型中定义的属性或方法，可以被所关联的构造函数所创建的实例对象==共享==。   减少了属性或方法的在内存占的使用，节省了内存空间。</td><td></td></tr><tr><td>构造函数名.prototype</td><td>构造函数可以通过prototype找到原型</td></tr><tr><td>.constructor</td><td>原型可以通过constructor找到关联的构造函数</td></tr><tr><td>原型链：先从对象本身中查找、会通过proto这个属性提供的地址，找到原型对象、会通过proto这个属性提供的地址，找到原型的原型</td></tr></tbody></table><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型方式继承："><a href="#原型方式继承：" class="headerlink" title="原型方式继承："></a>原型方式继承：</h3><blockquote><p>可继承方法，但不继承属性   </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = <span class="string">'人类'</span>;</span><br><span class="line">     <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 原型继承</span></span><br><span class="line">   Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">   <span class="comment">// 给原型添加constructor属性</span></span><br><span class="line">   Student.prototype.contructor = Student;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 创建一个学生对象</span></span><br><span class="line">   <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">   stu1.eat();</span><br></pre></td></tr></table></figure><h3 id="借用继承："><a href="#借用继承：" class="headerlink" title="借用继承："></a>借用继承：</h3><blockquote><p>call方法改变this的指向，但是不继承函数方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 代表的具体的某一个学生的实例 stu1 、stu2</span></span><br><span class="line">  <span class="keyword">var</span> stu = <span class="keyword">this</span>;</span><br><span class="line">  Person.call(stu,name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个学生对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="组合继承："><a href="#组合继承：" class="headerlink" title="组合继承："></a>组合继承：</h3><blockquote><p>原型继承+借用继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用继承【借用属性】</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>,name,age,gender)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型继承【继承方法】</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 设置原型contructor属性指向Student</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 创建一个学生对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>,<span class="number">10</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure><h3 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">// 记得用super调用父类的构造方法!</span></span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myGrade() &#123;</span><br><span class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数其他"><a href="#函数其他" class="headerlink" title="函数其他"></a>函数其他</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>函数名.arguments</td><td>获取用户传入的实参</td></tr><tr><td>函数.length</td><td>获取函数形参的个数</td></tr><tr><td>函数.name</td><td>函数的名字</td></tr></tbody></table><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bieShu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'三儿'</span>;</span><br><span class="line">    <span class="keyword">var</span> guanJia = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        a = v;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> guanJia;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cyqz = bieShu();</span><br><span class="line">cyqz(<span class="string">'3'</span>);</span><br><span class="line">cyqz(<span class="string">'33'</span>);</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jisuan</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jisuan(n - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = jisuan(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">52</span>,</span><br><span class="line">    cars: [<span class="string">'奔驰'</span>, <span class="string">'宝马'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">    name: <span class="string">'小三'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!son.hasOwnProperty[key]) &#123;</span><br><span class="line">        son[key] = father[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">52</span>,</span><br><span class="line">    cars: [<span class="string">'奥迪'</span>, <span class="string">'大众'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">    name: <span class="string">'小三'</span></span><br><span class="line">&#125;</span><br><span class="line">copy(father, son)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">fatherOBJ, sonOBJ</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> fatherOBJ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sonOBJ.hasOwnProperty[key]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fatherOBJ[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                sonOBJ[key] = <span class="keyword">new</span> <span class="built_in">Array</span>() </span><br><span class="line">                copy(fatherOBJ[key], sonOBJ[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fatherOBJ[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">                sonOBJ[key] = <span class="keyword">new</span> object() </span><br><span class="line">                copy(fatherOBJ[key], sonOBJ[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sonOBJ[key] = fatherOBJ[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ol><li>在内存中申请了一块空间，存放了一个对象。</li><li>让构造函数内部的this指向该空间</li><li>通过this向内存中空的对象中添加属性和方法</li><li>new关键字最后将this返回给外部变量</li></ol><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this通常指向于调用者<code>会找最近的包裹的function</code></p><ol><li>在全局环境下，this 始终指向全局对象（window）</li><li>普通函数内部this严格模式：window  非严格模式：undefined</li><li>对象内部方法的this指向调用这些方法的对象</li><li>原型链中的方法的this仍然指向调用它的对象</li><li>构造函数中的this与被创建的新对象绑定。</li></ol><table><thead><tr><th>改变this指向</th><th>描述</th></tr></thead><tbody><tr><td>cell   可以用函数       例如 数组中的push            ////           组合继承中也用这个</td><td></td></tr><tr><td>函数名.call(调用者,参数1…)</td><td>函数被借用时，会立即执行，并且函数体内的this会指向借用者或调用者</td></tr><tr><td>函数名.apply(调用者,[参数1…])</td><td>函数被借用时，会立即执行，并且函数体内的this会指向借用者或调用者</td></tr><tr><td>函数名.bind(调用者,参数1…)</td><td>不会立即执行，返回新的函数。并且函数体内的this会指向借用者或调用者</td></tr></tbody></table><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>let<ul><li>let 定义变量,变量不可以重名,必须先定义再使用- 具有块级作用域- 没有变量提升 </li></ul></li><li>const<ul><li>常量一旦初始化，不可以重新赋值</li><li>const 定义常量，常量不可以重名，必须先定义再使用- 具有块级作用域- 没有变量提升</li></ul></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul><li>数组解构<ul><li>let arr = [5, 9, 10];             let [a, b, c] = arr;</li></ul></li><li>对象解构<ul><li>let obj = {foo: ‘aaa’, bar: ‘bbb’};let { foo, bar} = obj;       </li><li>// 更改变量的名称  let obj = {foo: ‘aaa’, bar: ‘bbb’};let {foo: a, bar: b } = obj;</li><li></li><li>let obj = { name: ‘zs’, dog: {  name: ‘BYD’, age: 1}}</li><li>let { dog: { name, age } } = obj;</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><code>箭头函数 不能用于  构造函数</code></p><ul><li>箭头函数<ul><li>let fn = (x, y) =&gt; {    console.log(arguments);    x = 2 <em> x;    y = 2 </em> y;    return x + y;}       </li><li>//若形参只有1个 可省略括号，若代码块只有1个 可省略{}</li></ul></li><li>默认值    function fn(x, y = ‘world’) { }           <ul><li>//形参y 的默认值是world，若传值，则会覆盖    </li></ul></li><li>—rest<ul><li>function getMax(…values) {}           getMax(6, 1, 100, 9, 10)            </li><li>//  写 “  … + 名称  “   函数调用传参时 多余的参数会放在数组中    </li></ul></li></ul><h2 id="Array-扩展"><a href="#Array-扩展" class="headerlink" title="Array 扩展"></a>Array 扩展</h2><ul><li>扩展运算符    <ul><li>// 合并两个数组      let arr1 = [1, 2];let arr2 = [3, 4];let arr3 = […arr1, …arr2];    </li><li>// 把数组展开作为参数，可以替代 apply   </li><li>// 求数组的最大值   let arr = [6, 99, 10, 1];let max = Math.max(…arr);    </li></ul></li><li>Array.from()    <ul><li>//把伪数组转成数组 </li><li>let fakeArr = {  0: 1,  1: 2,  2: 3,  length: 3};</li><li>let arr = Array.from(fakeArr);console.log(arr);    </li></ul></li><li>find()<ul><li>找到数组中第一个满足条件的成员并返回该成员，如果找不到返回undefined</li><li>let arr = [1, 3, -5, 6, -2];let result = arr.find((x) =&gt; x &lt; 0);    </li><li>//find 回调函数有 3 个参数</li><li>arr.find(function (item, index, ar) {    // item  当前的值    // index 当前的值对应的索引    // ar 原数组});</li></ul></li><li>findIndex()<ul><li>找到数组中第一个满足条件的成员并返回该成员的索引，如果找不到返回 -1    </li></ul></li><li>includes()<ul><li>判断数组是否包含某个值，返回 true / false    </li></ul></li></ul><h2 id="String-扩展"><a href="#String-扩展" class="headerlink" title="String 扩展"></a>String 扩展</h2><ul><li>模板字符串    <ul><li>let name = ‘zs’;let age = 18;         // 拼接多个变量 let str = <code>我是${name}，今年${age}</code>;    </li></ul></li><li>includes()     <ul><li>返回布尔值，表示是否找到了参数字符串    </li></ul></li><li>startsWidth() <ul><li>返回布尔值，表示参数字符串是否在原字符串的头部    </li></ul></li><li>endsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的尾部。    </li></ul></li><li>repeat()<ul><li>返回一个新字符串，表示将原字符串重复n次。    </li></ul></li></ul><h2 id="Number-扩展"><a href="#Number-扩展" class="headerlink" title="Number 扩展"></a>Number 扩展</h2><p>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p><ul><li>Number.parseInt()</li><li><ul><li>Number.parseFloat()        </li></ul></li></ul><ul><li>Set 的成员<ul><li>size：属性，获取 set 中成员的个数，相当于数组中的 length</li><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>clear()：清除所有成员，没有返回值。</li></ul></li></ul><p>新增的内置对象,但是成员都是唯一的   // Set 可以通过一个数组初始化  let set = new Set([1, 2, 1, 5, 1, 6]);// 数组去重   let arr = […set];    </p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>通常用于ajax，处理异步请求</p><h2 id="async、await"><a href="#async、await" class="headerlink" title="async、await"></a>async、await</h2><p>async await需要配合使用</p><p>async函数return值是promise对象，结果需要.then 或调用函数时加上await</p><p> (若包含ajax、定时器，则推荐使用async+await来处理程序执行顺序)    </p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>默认导出</td><td>export default {导出内容}</td><td>export default {id:uid,name:uname}                         //导出时default  只能出现一次</td></tr><tr><td>按需导出</td><td>export *(导出变量、函数等)</td><td>export var a =   10           export {a:a,b:b}</td></tr><tr><td>默认导入</td><td>import 接收名称 from   ‘模块名称’</td><td>import abc{成员, ..}   from ‘模块名称’             存在默认导出（未起名）   +   按需导出//导入时可给默认导出的起名</td></tr><tr><td>按需导入</td><td>import {成员, ..} from   ‘模块名称’</td><td>import { 成员名称 as   别名,成员名称… } from ‘模块名称’</td></tr></tbody></table><p>？按需和默认的一并导入，必须是默认的在前、按需的在后</p><h2 id="三点运算符"><a href="#三点运算符" class="headerlink" title="三点运算符"></a>三点运算符</h2><p>…      合并数组、对象  </p><p>//例：let newAry = […ary1,…ary2]    /   let newObj = {…obj1,…obj2}</p><h2 id="对象key名称"><a href="#对象key名称" class="headerlink" title="对象key名称"></a>对象key名称</h2><p>var keyName = ‘uName’;       var obj = { [keyName]: ‘nihao’ }</p><p>es6中 可以动态自定义对象key名称</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>类型</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>不确定es版本</td><td></td><td></td></tr><tr><td>number</td><td>num.toFixed(3)</td><td>保留小数点3位</td></tr><tr><td>js错误处理</td><td>try{}catch(e){console.log(e.message)}</td><td></td></tr><tr><td>获取自定义属性</td><td>this.dataset.id</td><td></td></tr><tr><td>转URL编码 encodeURIComponent(q)       转URL编码 querystring.escape(str)</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>利用json深拷贝</td><td>this.todoContent =   JSON.parse(JSON.stringify(item))</td><td></td></tr><tr><td>数组按照大小排序</td><td>ary.sort((a,b)=&gt;(a-b))</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-高级&quot;&gt;&lt;a href=&quot;#JS-高级&quot; class=&quot;headerlink&quot; title=&quot;JS 高级&quot;&gt;&lt;/a&gt;JS 高级&lt;/h1&gt;&lt;h2 id=&quot;原型-对象&quot;&gt;&lt;a href=&quot;#原型-对象&quot; class=&quot;headerlink&quot; title=&quot;原型-
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Math、Array、Date、String</title>
    <link href="/2019/05/09/2.1.2.JavaScript%20-%20Math%E3%80%81Array%E3%80%81Date%E3%80%81String/"/>
    <id>/2019/05/09/2.1.2.JavaScript - Math、Array、Date、String/</id>
    <published>2019-05-09T05:49:42.142Z</published>
    <updated>2019-05-09T05:49:17.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>Math</th><th>Math.*</th></tr></thead><tbody><tr><td>Math.PI</td><td>获取圆周率</td></tr><tr><td>Math.random()</td><td>返回大于等于0小于1之间的随机数</td></tr><tr><td>Math.floor()</td><td>向下取整，返回一个小于当前数字的整数</td></tr><tr><td>Math.ceil()</td><td>向上取整，返回一个大于当前数字的整数</td></tr><tr><td>Math.round()</td><td>四舍五入</td></tr><tr><td>Math.abs()</td><td>取绝对值</td></tr><tr><td>Math.max()</td><td>返回一组数中的最大值(不可是数组)</td></tr><tr><td>Math.min()</td><td>返回一组数中的最小值(不可是数组)</td></tr><tr><td>Math.pow(x,y)</td><td>返回x的y次幂</td></tr></tbody></table><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><table><thead><tr><th>Array</th><th></th></tr></thead><tbody><tr><td>*.toString()</td><td>把数组转换为字符串，使用逗号分隔</td></tr><tr><td>*.valueOf()</td><td>返回数组对象本身 ？？？</td></tr><tr><td>*.ary.push()</td><td>数组末尾 增加值</td></tr><tr><td>*.ary.pop()</td><td>用于删除数组的最后一个元素并返回删除的元素。(会修改数组长度)</td></tr><tr><td>*.ary.shift()</td><td>用于删除数组的第一个元素并返回删除的元素。(会修改数组长度)</td></tr><tr><td>*.unshift(number)</td><td>在数组起始位置添加一个、或多个值</td></tr><tr><td><em>.concat(</em>   //可以是 nub、ary   )</td><td>拼接字符串、数组（第一个不能是Number类型）</td></tr><tr><td>*.slice(startindex,   endindex)</td><td>从当前数组中复制个新的数组，如果第二个值不写，则取到结尾</td></tr><tr><td>*.splice(startindex,   deletCont, options)</td><td>删除或者替换数组中的某些值</td></tr><tr><td>*.indexOf(content[,index])，lastIndexof()</td><td>查找所传值 在数据中的索引，未找到的话   返回-1</td></tr><tr><td>*.join(‘内容’)</td><td>在数组中的值 之间 插入内容，并转成字符串</td></tr><tr><td>*.reverse()</td><td>数组反转</td></tr><tr><td>*.filter(function(item,index,   ary) {return 不要的值})     //返回一个新数组,可以获取赛选结果</td><td></td></tr><tr><td>map(function(item,index,ary)   {})  //遍历数组,返回一个新数组</td><td></td></tr><tr><td>*.forEach(function(item,index,   ary) {}) //遍历数组,没有返回值</td><td></td></tr><tr><td>*.sort()</td><td>数组排序，默认按升序 排序</td></tr><tr><td>var ary = [1500, 2000, 1000, 2100, 900, 1900, 3000]      ary.filter(function(item, index) {           if (item &gt;= 2000) {                 ary.splice(index, 1)            }       })</td><td>var ary = [‘a’, ‘b’,   ‘c’, ‘d’, ‘a’, ‘e’, ‘f’, ‘a’, ‘g’, ‘h’]      ary.forEach(function(item, index) {           if (item == ‘a’) {             console.log(index)             }       })</td></tr></tbody></table><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><table><thead><tr><th>Date</th><th>var * = new   Date()</th></tr></thead><tbody><tr><td>*.toString();</td><td>转化成字符串(Sat Nov 03 2018 19:04:20   GMT+0800 (中国标准时间))</td></tr><tr><td>*.toDateString();</td><td>转换成日期字符串(Sat Nov   03 2018)</td></tr><tr><td>*.toTimeString();</td><td>转换成时间字符串(19:04:20   GMT+0800 (中国标准时间))</td></tr><tr><td>*.toLocaleDateString();</td><td>返回本地的日期格式  （不同浏览器不同效果）</td></tr><tr><td>*.toLocaleTimeString();</td><td>返回本地的时间格式  （不同浏览器不同效果）</td></tr><tr><td></td><td></td></tr><tr><td>*.getSeconds()</td><td>获取秒</td></tr><tr><td>*.getMinutes()</td><td>获取分钟</td></tr><tr><td>*.getHours()</td><td>获取小时</td></tr><tr><td>*.getDay()</td><td>返回周几   （0表示周日）</td></tr><tr><td>*.getDate()</td><td>返回当前月的第几天</td></tr><tr><td>*.getMonth()</td><td>返回月份   （从0开始）</td></tr><tr><td>*.getFullYear()</td><td>返回年份</td></tr><tr><td>*.valueOf()</td><td>获取当前时间毫秒</td></tr><tr><td>*.getTime()</td><td></td></tr><tr><td>Date.now()</td><td></td></tr><tr><td>toLocaleString()</td><td>格式化</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table><thead><tr><th>String</th><th></th></tr></thead><tbody><tr><td>*.charAt(索引)</td><td>获取指定位置处的字符</td></tr><tr><td>*.str[index]</td><td>获取指定位置的字符 （H5中的方法）</td></tr><tr><td><em>.concat(</em>   //可以是 nub、ary   )</td><td>拼接字符串、数组（第一个不能是Number类型）</td></tr><tr><td>*.slice(索引,索引)</td><td>从指定位置开始，截取字符串到结束位置，end值取不到</td></tr><tr><td>*.substring(start,end)</td><td>从指定位置开始，截取字符串到结束位置，   end值取不到</td></tr><tr><td>*.substr(start,length)</td><td>从指定位置开始，截取length长度个字符</td></tr><tr><td><em>.indexOf(字符,从</em>索引开始找)</td><td>返回字符在字符串中的位置</td></tr><tr><td>lastIndexOf(字符)</td><td>从后往前找，只找第一个匹配的字符</td></tr><tr><td>*.trim()</td><td>只能去除字符串前后空白</td></tr><tr><td>*.toLocaleUpperCase()</td><td>转化为大写</td></tr><tr><td>*.toLocaleLowerCase()</td><td>转化为小写</td></tr><tr><td>*.replace(a,b)</td><td>用b替换a</td></tr><tr><td>*.split()</td><td>以一个分割符,将一个字符串串分割成一个数组</td></tr><tr><td>indexOf()   方法可返回某个指定的字符串值在字符串中首次出现的位置。</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-对象&quot;&gt;&lt;a href=&quot;#JS-对象&quot; class=&quot;headerlink&quot; title=&quot;JS 对象&quot;&gt;&lt;/a&gt;JS 对象&lt;/h1&gt;&lt;h2 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - DOM、BOM操作、事件</title>
    <link href="/2019/05/09/2.1.3.JavaScript%20-%20DOM%E3%80%81BOM%E6%93%8D%E4%BD%9C%E3%80%81%E4%BA%8B%E4%BB%B6/"/>
    <id>/2019/05/09/2.1.3.JavaScript - DOM、BOM操作、事件/</id>
    <published>2019-05-09T05:45:46.181Z</published>
    <updated>2019-05-09T06:05:32.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById(‘id’)</td><td>文档.得到 元素 通过 ID</td><td>根据id值获取单个元素</td></tr><tr><td>document.getElementsByTagName(‘标签名’)</td><td>文档.得到 元素 通过 TagName</td><td>根据标签名获取一组元素</td></tr><tr><td>document.querySelector(‘选择器’)</td><td>文档.查询 选择</td><td>根据选择器获取单个元素</td></tr><tr><td>document.querySelectorAll(‘选择器’)</td><td>文档.查询 选择 所有</td><td>根据选择器获取一组元素</td></tr></tbody></table><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>id、title、href、src、className    \</td><td>innerText、innerHTML      textContent(标准，不兼容ie8)</td><td></td></tr></tbody></table><h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>return false</td><td>取消默认行为</td><td></td></tr><tr><td>href =   javascript:</td><td></td></tr></tbody></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.value</td><td>值</td><td>表单元素的内容</td></tr><tr><td>元素.disabled   （若是其他标签则需要.style.）</td><td>使 xxx失去能力</td><td>操作表单元素是否禁用（true→禁用，false→不禁用）   不加引号</td></tr><tr><td>*.checked</td><td>选中的</td><td>操作表单元素是否选中（true→选中，false→不选中）</td></tr><tr><td>*.selected</td><td>挑选出来的</td><td>操作表单元素的是否选中（true→选中，false→不选中）      注意:原生js中没有:selcted这个选择器            var options = document.querySelectorAll(‘#sel1   option:checked’);  //js  筛选选中的option      options[i].selected = false;        //设置被选中的option的选中状态</td></tr></tbody></table><h2 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>子节点.parentNode</td><td>父节点</td><td>子节点获取父节点</td></tr><tr><td>父节点.childNodes</td><td>子节点</td><td>父节点获取子节点  -     获取的节点包含了文本和元素</td></tr><tr><td>父元素.children</td><td>孩子们</td><td>父节点获取子节点  -   获取仅仅是元素，不包含文本</td></tr><tr><td>父节点.firstElementChild</td><td>第一个  元素    孩子</td><td></td></tr><tr><td>父节点.lastElementChild</td><td>最后一个  元素    孩子</td><td></td></tr><tr><td>节点.nextElementSibling</td><td>下一个 元素 兄弟</td><td>获取上一个兄弟</td></tr><tr><td>节点.previousElementSibling</td><td>以前  元素 兄弟</td><td>获取下一个兄弟</td></tr></tbody></table><p>节点的nodeType、nodeName、nodeValue的属性           </p><ul><li>节点属性nodeType的作用，获取节点类型:        元素节点的nodeType→ 1  ，  文本节点的nodeType→3      </li><li>节点属性nodeName的作用，获取节点的名称： 元素节点→标签名（大写H2）， 文本节点→ #text     </li><li>节点属性nodeValue的作用，获取节点的值： 元素节点→null           文本节点→ 文本值比如换行”↵    “</li></ul><h2 id="动态控制元素"><a href="#动态控制元素" class="headerlink" title="动态控制元素"></a>动态控制元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.innerHTML = ‘内容’;</td><td></td><td>通过innerHTML创建元素 (性能差)</td></tr><tr><td>document.createElement(‘标签名’);</td><td>文档.创建 元素</td><td>创建元素，并返回新元素对象  var * = document.createElement(‘li’);</td></tr><tr><td>父元素.appendChild(子元素);</td><td>添加 子节点</td><td>动态追加元素</td></tr><tr><td>父元素.removeChild(子元素);</td><td>移除 子节点</td><td>动态删除元素</td></tr><tr><td>父节点.insertBefore(新的节点,旧的子节点)</td><td>插入 节点</td><td>在*位置上插入新元素  旧子阶段获取：var 旧节点 = 盒子.children[0];</td></tr><tr><td>父节点.replaceChild(新的节点,旧的子节点)</td><td>替换 节点</td><td>替换元素</td></tr><tr><td>元素.cloneNode(true或false);</td><td>克隆 节点</td><td>克隆元素。返回克隆后的元素，默认false（仅克隆外层）；true，克隆所有内容</td></tr></tbody></table><h2 id="自定义行内属性"><a href="#自定义行内属性" class="headerlink" title="自定义行内属性"></a>自定义行内属性</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.getAttribute(name);</td><td>获取 属性</td><td>获取</td></tr><tr><td>元素.setAttribute(name,value);</td><td>设置 属性</td><td>设置</td></tr><tr><td>元素.removeAttribute(name,value);</td><td>移除 属性</td><td>移除</td></tr></tbody></table><h2 id="控制元素样式"><a href="#控制元素样式" class="headerlink" title="控制元素样式"></a>控制元素样式</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>元素.style.样式属性名 = ‘样式属性值’;</td><td>通过style属性设置样式</td></tr><tr><td>元素.className =   ‘类名’</td><td>通过class 控制标签样式</td></tr></tbody></table><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>window</td><td>顶级对象    全局变量或全局函数本质上都是window的属性或方法</td></tr><tr><td>window.innerWidth</td><td>获取浏览器宽度</td></tr><tr><td>var * =   window.pageYOffset</td><td>获取页面卷曲高度</td></tr><tr><td>window.setTimeout(callback,   time);</td><td>定时器，仅执行一次，可返回一个标识  用变量接收</td></tr><tr><td>window.clearTimeout(定时器的标识);</td><td>清除定时器</td></tr><tr><td>window.setInterval(callback,   time)</td><td>定时器，重复执行  直到取消，可返回标识    用变量接收</td></tr><tr><td>window.clearInterval(定时器的标识);</td><td>清除定时器</td></tr></tbody></table><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>location.href</td><td>设置或获取地址栏地址</td></tr><tr><td>location.reload()</td><td>刷新页面</td></tr></tbody></table><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>history.length</td><td>获取历史记录的长度</td></tr><tr><td>history.back()</td><td>回退上一个历史记录</td></tr><tr><td>history.forward()</td><td>前进下一个历史记录</td></tr><tr><td>history.go(数字)</td><td>正数，表示前进； 负数，表示回退</td></tr></tbody></table><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>navigator.userAgent</td><td>获取浏览器的信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>window.onload  = function(){}</td><td>等页面资源全部加完毕后，要执行的程序(一般不用)</td></tr><tr><td>对象名.hasOwnProperty( 键名 )</td><td>检测该属性、方法是否属于x对象</td></tr></tbody></table><table><thead><tr><th>offset</th><th>描述</th></tr></thead><tbody><tr><td>元素.offsetWidth</td><td>返回的是数字。 大小包含： 内容 +   padding + border;      只读，不可赋值</td></tr><tr><td>元素.offsetHeight</td><td></td></tr><tr><td>元素.offsetLeft</td><td>返回的是数字。（参照谁？看定位关系）</td></tr><tr><td>元素.offsetTop</td><td></td></tr><tr><td>元素.offsetParent</td><td>获取“父元素”，  按照定位关系</td></tr></tbody></table><table><thead><tr><th>scroll</th><th>描述</th></tr></thead><tbody><tr><td>元素.scrollWidth</td><td>获取的元素的大小  ,包含   【内容+ padding + 溢出】</td></tr><tr><td>元素.scrollHeight</td><td></td></tr><tr><td>元素.scrollLeft</td><td>获取被卷起的页面间距</td></tr><tr><td>元素.scrollTop</td></tr></tbody></table><table><thead><tr><th>client（不常用）</th><th>描述</th></tr></thead><tbody><tr><td>元素.clientWidth</td><td>获取元素的大小，包含 【内容 + padding】</td></tr><tr><td>元素.clientHeight</td><td></td></tr><tr><td>元素.clientLeft</td><td>获取边框的厚度</td></tr><tr><td>元素.clientTop</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sc = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击按钮  回到页面顶端</span></span><br><span class="line">toTop.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;&#125;;</span><br></pre></td></tr></table></figure><h1 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h1><blockquote><p>事件对象 :事件源.事件类型 =   function(e){  // 第一个形参e就是事件对象    } </p></blockquote><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>*.onclick</td><td>点击</td><td>鼠标点击事件</td></tr><tr><td>*.onmousemove</td><td>鼠标 移动</td><td>document.onmousemove   = function(){}</td></tr><tr><td>*.onmousedown</td><td>鼠标 按下</td><td></td></tr><tr><td>*.onmouseup</td><td>鼠标 弹起</td><td></td></tr><tr><td>onmosueenter/onmosueleave</td><td>鼠标进入  离开</td><td>不支持冒泡</td></tr><tr><td>onmosueover/onmouseout</td><td>鼠标进入  离开</td><td>支持冒泡</td></tr></tbody></table><ul><li><p>事件对象.clientX   /    事件对象.clientY    参照是==浏览器==           client：客户      </p></li><li><p>事件对象.pageX   /    事件对象.pageY    参照是==文档==                page：页面      </p></li><li><p>事件对象.offsetX   /    事件对象.offsetY    参照是==当前的元素==    offset：抵消？      screenX   屏幕</p></li></ul><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>键入 按下</td><td>键盘按下事件</td></tr><tr><td>onkeyup</td><td>键入 抬起</td><td>键盘弹起事件</td></tr></tbody></table><ul><li>事件对象.keyCode     获取键盘按键对应的键码值</li><li>事件对象.altKey        表示alt键是否按下，返回布尔值。</li><li>事件对象.shiftKey        表示shift键是否按下，返回布尔值。</li><li>事件对象.ctrlKey        表示ctrl键是否按下，返回布尔值。（true按下，false没有按下）</li></ul><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p><code>(官宣)老IE不兼容，建议在web使用</code></p><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>事件源.addEventListener(‘类型’,处理程序,捕获);</td><td>添加 事件 监视器</td><td>捕获，可选参数，默认为false。 true→ 捕获，false→冒泡</td></tr><tr><td>事件源.removeEventListener(‘类型’,处理程序名称)</td><td>移除 事件 监视器</td><td>若要通过事件监听的方式移除事件，需单独将事件处理程序   抽取出来命名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="comment">// 事件监听注册事件</span></span><br><span class="line">   btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,fn1);</span><br><span class="line">btn.removeEventListener(<span class="string">'click'</span>,fn1)</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>给一组元素父级标签设置事件委托，提高性能   减少事件绑定       通过事件对象.target的nodeName   属性检测触发元素</td><td></td></tr><tr><td>document.onclick =   function(e) {  var _e = e \</td><td>\</td><td>window.event  }          //解决ie低版本兼容性</td><td></td></tr><tr><td>事件对象.target</td><td>this指向事件源，target指向事件触发点</td></tr></tbody></table><h2 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>touchstart</td><td>触摸 开始</td><td>手指按下    ，需要用事件监听的方式注册</td></tr><tr><td>touchmove</td><td>触摸 移动</td><td>手指移动    ，需要用事件监听的方式注册</td></tr><tr><td>touchend</td><td>触摸 结束</td><td>手指松开    ，需要用事件监听的方式注册</td></tr><tr><td></td><td></td><td></td></tr><tr><td>事件对象.touches</td><td>触摸s</td><td>位于屏幕上的所有手指的列表，伪数组</td></tr><tr><td>事件对象.targetTouches</td><td>目标 触摸s</td><td>位于该元素上的所有手指的列表，伪数组</td></tr><tr><td>事件对象.changedTouches</td><td>改变 触摸</td><td>被改变的手指列表。touchstart时包含刚与屏幕接触的触点，touchend时包含离开屏幕的触点，伪数组</td></tr></tbody></table><ol><li>手指对象.clientX/Y 手指相对于layout viewport的水平/垂直像素距离</li><li>手指对象.pageX/Y 手指相对于layout viewport的水平/垂直像素距离</li></ol><p><code>在移动端推荐使用clientX/Y</code></p><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>事件对象.preventDefault();</td><td>防止 默认</td><td>阻止默认行为</td></tr><tr><td>事件对象.stopPropagation();</td><td>停止 传播</td><td>停止冒泡传播</td></tr><tr><td>*.oninput</td><td>输入</td><td>通常用于文本框输入时 触发</td></tr><tr><td>transitionend事件</td><td>过度 结束</td><td>css中过渡结束后检测的行为</td></tr><tr><td>*.onfocus</td><td>获取 焦点</td><td>获取焦点（通常用于表单 的事件）</td></tr><tr><td>*.onblur</td><td>获取 模糊？？ （on 布尔）</td><td>失去焦点（通常用于表单 的事件）</td></tr><tr><td>*.submit</td><td>表单的触发事件</td><td>提交表单时 按键盘enter   也可以提交，但是需要注意 必须有 submit按钮</td></tr><tr><td>window.onhashchange =   ()=&gt;{}</td><td>url改变监听</td><td>window.location.hash     监听url/锚点 改变后的值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;h2 id=&quot;获取元素&quot;&gt;&lt;a href=&quot;#获取元素&quot; class=&quot;headerlink&quot; title=&quot;获取元素&quot;&gt;&lt;/a&gt;获取元
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 基础</title>
    <link href="/2019/05/09/2.1.1.JavaScript%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/2.1.1.JavaScript - 基础/</id>
    <published>2019-05-09T05:39:37.307Z</published>
    <updated>2019-05-09T05:45:36.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-基础"><a href="#JS-基础" class="headerlink" title="JS 基础"></a>JS 基础</h1><h2 id="js组成"><a href="#js组成" class="headerlink" title="js组成"></a>js组成</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>ECMAScript</td><td>JavaScript的核心</td><td>描述了语言的基本语法和数据类型，ECMAScript是一套标准</td></tr><tr><td>BOM</td><td>浏览器对象模型</td><td>操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</td></tr><tr><td>DOM</td><td>文档对象模型</td><td>一套操作页面元素的API</td></tr></tbody></table><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td></td><td></td></tr><tr><td>String</td><td></td><td></td></tr><tr><td>Boolean</td><td>布尔</td><td>true(1)  false(0)</td></tr><tr><td>Undefined</td><td>未下定义的</td><td></td></tr><tr><td>Null</td><td></td></tr></tbody></table><h2 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>Object</td><td>目标</td></tr></tbody></table><h2 id="其他1"><a href="#其他1" class="headerlink" title="其他1"></a>其他1</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>Infinity</td><td>无穷大</td><td></td></tr><tr><td>-Infinity</td><td>无穷小</td><td></td></tr><tr><td>NaN</td><td>not a number</td><td></td></tr><tr><td>isNaN(x)</td><td>判断是否是数字</td><td></td></tr><tr><td>typeof *</td><td>类型</td><td></td></tr><tr><td>.length</td><td>长度</td><td></td></tr><tr><td>document.write();</td><td>文件  写作</td><td>新增一个标签   document.write(‘<h1></h1>‘);</td></tr><tr><td>console.log(‘’);</td><td>控制台 日志</td><td>在浏览器控制台打印内容</td></tr><tr><td>console.dir(*)</td><td>*代表标签</td><td>显示一个对象所有的属性和方法</td></tr><tr><td>alert();</td><td>警告</td><td>浏览器弹窗  alert(‘你好’);</td></tr><tr><td>confirm(‘’);</td><td>证实</td><td>和alert()差不多，但是带“取消”按钮</td></tr><tr><td>prompt(‘’)    prompt(‘’,’’)</td><td>提示</td><td>浏览器弹窗，可输入内容；var msg =   prompt(‘主题’,’提示’)</td></tr></tbody></table><h2 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="转换数据类型"></a>转换数据类型</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>.toString()</td><td></td><td>不可转换undefined和null</td></tr><tr><td>String()</td><td></td><td>可以转换undefined和null</td></tr><tr><td>Number()</td><td></td><td>如果目标含非数字，则返回NaN</td></tr><tr><td>parseInt()</td><td>解析整数</td><td>转换整数，遇到非数字后停止</td></tr><tr><td>parseFloat()</td><td>解析浮点数</td><td>可以转换浮点数，遇到非数字后停止</td></tr><tr><td>Boolean()</td><td></td><td>false：0    ‘’(空字符串)    null      undefined    NaN       true：其他都会转换成true</td></tr><tr><td>+<em>    -</em>    、  *+’’</td><td></td><td>采用隐式转换，但是需要注意数据类型</td></tr></tbody></table><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>表达式  ?  true    :  false</td><td>三元表达式</td><td>如果表达式成立，则返回true</td></tr></tbody></table><h2 id="运算符（按先后排序）"><a href="#运算符（按先后排序）" class="headerlink" title="运算符（按先后排序）"></a>运算符（按先后排序）</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>++     –</td><td>一元运算符</td><td></td></tr><tr><td>+ - * / %</td><td>算数运算符</td><td></td></tr><tr><td>&lt;  &gt;    &gt;=  &lt;=</td><td>关系运算符</td><td></td></tr><tr><td>== != === !==</td><td>相等运算符</td><td></td></tr><tr><td>&amp;&amp;  \</td><td>\</td><td>!</td><td>逻辑运算符</td><td>与、或、非</td></tr><tr><td>=   +=     -=   *=   /=     %=</td><td>赋值运算符</td></tr></tbody></table><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>if  else</td><td>如果      其他</td><td></td></tr><tr><td>switch (expression){       case 常量1: 语句; break;      default: 语句; break;}</td><td>switch：开关      case：情况      break：打断      default: 其他默认</td><td>break若省略，则会穿透            case:kas      default:difo</td></tr></tbody></table><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>while (循环条件)    {    //循环体  }</td><td>当什么的时候 xxxx</td><td>音标：wil</td></tr><tr><td>do {   // 循环体;    }    while (循环条件);</td><td></td><td>不管条件是否成立，均先执行一次</td></tr><tr><td>for (初始化表达式1; 判断表达式2; 自增表达式3)       {  // 循环体4  }</td><td>为，为了；因为；给；对于；至于</td><td>for (var i = 0; i   &lt; 10; i++) {循环体}</td></tr><tr><td>break</td><td>打断</td><td>立即跳出整个循环，即循环结束，开始执行循环后面的内容</td></tr><tr><td>continue</td><td>继续</td><td>立即跳出当前循环，继续下一次循环</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>var * = new Array()</td><td>数组</td><td></td></tr><tr><td>数组.splice(索引，删除数量)</td><td>拼接</td><td>删除数据中的数据</td></tr><tr><td>*.join(‘内容’)</td><td>加入</td><td>在数组中的值 之间 插入内容</td></tr><tr><td>*.indexOf(值、变量名)</td><td></td><td>查找所传值 在数据中的索引，未找到的话   返回-1</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>function * (){}</td><td>函数</td><td>形参、实参</td></tr><tr><td>(function   (){})()</td><td>匿名函数、自调用函数</td><td></td></tr><tr><td>return</td><td>返回</td><td>一个函数中  只能返回一个return的值</td></tr></tbody></table><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>var * ={}</td><td>字面量 创建</td><td></td></tr><tr><td>var * = new   Object()</td><td>Object 创建</td><td></td></tr><tr><td>function <em> (变量名,变量名){      var </em> = new Object()          <em>.name = ‘’      return </em>}</td><td>工厂方式创建</td><td></td></tr><tr><td>function * (变量名,变量名){          this.name = ‘’      return this;//可以不写return}</td><td>自定义 构造函数</td><td></td></tr><tr><td>arguments.length</td><td>参数</td><td>函数声明的时候不写形参，通过这个   来获取数量</td></tr><tr><td>delete 对象名.属性名</td><td>删除对象中的值</td><td></td></tr><tr><td>for (变量名(key) in 对象名)</td><td>循环遍历 对象</td><td>for (变量名(key) in 对象名)   {console.log(key);      console.log(zs[key]);}</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-基础&quot;&gt;&lt;a href=&quot;#JS-基础&quot; class=&quot;headerlink&quot; title=&quot;JS 基础&quot;&gt;&lt;/a&gt;JS 基础&lt;/h1&gt;&lt;h2 id=&quot;js组成&quot;&gt;&lt;a href=&quot;#js组成&quot; class=&quot;headerlink&quot; title=&quot;js组成&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="/2019/05/09/4.SQL/"/>
    <id>/2019/05/09/4.SQL/</id>
    <published>2019-05-09T04:57:17.451Z</published>
    <updated>2019-05-09T04:57:44.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>int 整数、double 浮点数、varchar(255) 字符串、text 文本、datetime 日期、float 浮点数</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><table><thead><tr><th>数据库操作       //这里不要大写</th><th></th></tr></thead><tbody><tr><td>create database 数据库名</td><td>增加 - 数据库</td></tr><tr><td>drop database 数据库名</td><td>删除 - 数据库</td></tr><tr><td>use 数据库名</td><td>切换 - 数据库</td></tr><tr><td>create   table 表名 (       id int auto_increment primary   key,        name varchar(20) not null,)</td><td>新建 - 表</td></tr><tr><td>auto_increment</td><td>自动编号</td></tr><tr><td>primary key</td><td>主键  唯一标识</td></tr><tr><td>drop table 表名</td><td>删除 - 表</td></tr></tbody></table><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><table><thead><tr><th>增</th><th></th></tr></thead><tbody><tr><td>INSERT INTO users   (uname, upwd, uqq) values(‘zs’,’123’, ‘12345’)</td><td>普通增加</td></tr><tr><td>INSERT INTO users   values(2,’zs’,’123’, ‘12345’)</td><td>可省略字段名</td></tr></tbody></table><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><table><thead><tr><th>删除</th><th></th></tr></thead><tbody><tr><td>DELETE FROM users   WHERE uid = 1</td><td>条件删除</td></tr><tr><td>DELETE FROM users</td><td>清空数据</td></tr></tbody></table><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><table><thead><tr><th>改</th><th></th></tr></thead><tbody><tr><td>UPDATE users SET   uname=’zsxxx’, uqq=’111’ WHERE uid=1</td></tr></tbody></table><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><table><thead><tr><th>查</th><th></th></tr></thead><tbody><tr><td>SELECT * FROM   users</td><td>普通查询</td></tr><tr><td>SELECT * FROM users   WHERE uname like ‘%s%’</td><td>模糊查询</td></tr><tr><td>SELECT * FROM users WHERE uname in (‘zs’,’ls’)</td><td>in 查询</td></tr><tr><td>SELECT * FROM users ORDER BY 字段 DESC</td><td>order by 排序</td></tr><tr><td>asc 默认是升序      desc 降序</td><td></td></tr><tr><td>SELECT * FROM users LIMIT 3</td><td>LIMIT 限制查询数量</td></tr><tr><td>SELECT * FROM users   ORDER BY id DESC LIMIT 3</td><td>降序后取3条数据</td></tr><tr><td>SELECT * FROM users   ORDER BY id DESC LIMIT 3,2</td><td>跳过3条，取2条</td></tr><tr><td>SELECT COUNT(*) FROM   users</td><td>获取总条数</td></tr><tr><td>SELECT count(*) as   sum FROM users     //as  用于起别名</td><td></td></tr><tr><td>SELECT column_name(s)      FROM table_name1      INNER JOIN table_name2       ON table_name1.column_name=table_name2.column_name      where 条件</td><td>多表查询</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>其他</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>BETWEEN…AND</td><td>在某个范围内</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>&gt;</td><td>大于</td><td></td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;p&gt;int 整数、double 浮点数、varchar(255) 字符串、text 文本、datetime 日期、float 浮点数&lt;/
      
    
    </summary>
    
      <category term="sql" scheme="/categories/sql/"/>
    
    
      <category term="sql" scheme="/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式- 基础</title>
    <link href="/2019/05/09/3.%E6%AD%A3%E5%88%99/"/>
    <id>/2019/05/09/3.正则/</id>
    <published>2019-05-09T04:55:00.701Z</published>
    <updated>2019-05-09T04:54:53.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>元字符</th><th></th></tr></thead><tbody><tr><td>元字符</td><td>说明</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线_</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线_</td></tr><tr><td>\s</td><td>匹配空白符（空格）</td></tr><tr><td>\S</td><td>匹配非空白符</td></tr><tr><td>.</td><td>匹配任意除了换行符之外的单个字符</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><table><thead><tr><th>限定符</th><th></th></tr></thead><tbody><tr><td>限定符</td><td>说明</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n   的字符串。n{0,}</td></tr><tr><td>n+</td><td>匹配任何包含至少一个 n   的字符串。{1,}</td></tr><tr><td>n?</td><td>匹配任何包含零个或一个 n   的字符串。{0,1}</td></tr><tr><td>n{x}</td><td>匹配包含 x 个 n 的序列的字符串</td></tr><tr><td>n{x,}</td><td>匹配包含至少 x 个 n 的序列的字符串。</td></tr><tr><td>n{x,y}</td><td>匹配包含 至少x个 至多 y 个 n   的序列的字符串。</td></tr><tr><td>n$</td><td>匹配任何结尾为 n 的字符串</td></tr><tr><td>^n</td><td>匹配任何开头为 n 的字符串</td></tr><tr><td>^正则表达式$  使用时，会对字符串整体校验，完全符合才能够匹配。否则，不匹配</td></tr></tbody></table><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>修饰符</th><th></th></tr></thead><tbody><tr><td>→ g</td><td>g，全称global，有 全局   的意思，表示全局匹配。</td></tr><tr><td></td><td>如： var reg =   /hello/g;</td></tr><tr><td>→ i</td><td>i，全称ignore，有 忽视、忽略   的意思，表示匹配字母时，可以忽略字母的大小写。</td></tr><tr><td></td><td>如： var reg =   /hello/i;</td></tr><tr><td>→ gi</td><td>gi，全局匹配和忽略大小写一起使用。</td></tr><tr><td></td><td>如： var reg =   /hello/gi;</td></tr></tbody></table><h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h2><table><thead><tr><th>中括号</th><th></th></tr></thead><tbody><tr><td>中括号</td><td>说明</td></tr><tr><td>[abc]</td><td>查找一个方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找一个任何不在方括号之间的字符。^在中括号中有取反的意思</td></tr><tr><td>[0-9]</td><td>查找一个任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找一个任何从小写 a 到小写 z   的字符。</td></tr><tr><td>[A-Z]</td><td>查找一个任何从大写 A 到大写 Z   的字符。</td></tr><tr><td>[A-z]</td><td>查找一个字母（包含大小写和下划线）</td></tr><tr><td>[\u4e00-\u9fa5]</td><td>查找一个汉字</td></tr></tbody></table><h2 id="或模式"><a href="#或模式" class="headerlink" title="或模式"></a>或模式</h2><table><thead><tr><th>或模式</th></tr></thead><tbody><tr><td>特殊符号：正则1\</td><td>正则2, 或者。   符合或两边其中一个就可以匹配。</td></tr><tr><td>如：google，baidu，bing;   // 匹配三种其中一种字符串</td></tr><tr><td>正则：google\</td><td>baidu\</td><td>bing</td></tr></tbody></table><h2 id="分组模式"><a href="#分组模式" class="headerlink" title="分组模式"></a>分组模式</h2><table><thead><tr><th>分组模式</th></tr></thead><tbody><tr><td>特殊符号：(正则);</td></tr><tr><td>组指的是一个小集体，分组就是将一个大集体可以分成几个小集体。</td></tr><tr><td>如：控制你的名字连续出现的次数，最少1次，最多3次</td></tr><tr><td>正则：^(bruce){1,3}$</td></tr></tbody></table><h2 id="正则转义符"><a href="#正则转义符" class="headerlink" title="正则转义符"></a>正则转义符</h2><table><thead><tr><th>正则转义符</th></tr></thead><tbody><tr><td>在正则中表示特殊符号。去除.的特殊意义，需要转义：  .</td></tr><tr><td>var 变量 = new   RegExp(“规则”,”修饰符”)</td></tr><tr><td>var 变量 =   /正则表达式/;         var reg = /\d/g;</td></tr><tr><td>正则对象.test(字符串)   用于检测字符串是否匹配。返回true和false</td></tr><tr><td>字符串.match(正则对象);     获取匹配正则的子字符串，返回一个伪数组。</td></tr><tr><td>字符串.replace(正则对象,替换内容);    替换所匹配正则的子字符串。返回替换后的字符串。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h1&gt;&lt;h2 id=&quot;元
      
    
    </summary>
    
      <category term="正则" scheme="/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>html + css - 基础</title>
    <link href="/2019/05/09/1.html%20+%20css%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/1.html + css - 基础/</id>
    <published>2019-05-09T04:00:13.915Z</published>
    <updated>2019-05-10T05:26:45.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置</td><td></td></tr><tr><td>absolute</td><td>绝对定位</td><td></td></tr><tr><td>relative</td><td>相对定位</td><td></td></tr><tr><td>fixed</td><td>固定定位</td><td></td></tr><tr><td>Static</td><td>静态定位</td></tr></tbody></table><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>caption</td><td>标题</td><td>设置表格的标题</td></tr><tr><td>cellpadding</td><td>单元格边距</td><td>设计单元格之间的距离</td></tr><tr><td>cellspacing</td><td>单元格间距</td><td>去掉边框之间的距离，默认值2</td></tr></tbody></table><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>source</td><td>视频源</td><td></td></tr><tr><td>audio</td><td>音频（同视频标签使用）</td><td></td></tr><tr><td>controls</td><td>控制栏</td><td></td></tr><tr><td>autoplay</td><td>视频自动播放</td><td></td></tr><tr><td>loop</td><td>循环播放</td></tr></tbody></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>行动</td><td>用于提交表单的程序（form标签中的属性）</td></tr><tr><td>method</td><td>方法</td><td>get、post（form标签中的属性）</td></tr><tr><td>readonly</td><td>只读的</td><td>设置输入框为只读模式</td></tr><tr><td>required</td><td>必须的</td><td>必填项</td></tr><tr><td><datalist><option></option></datalist></td><td>/</td><td>通过input中的list与其id关联</td></tr><tr><td>autofocus</td><td>自动 焦点</td><td>控件自动获取焦点</td></tr><tr><td>radio</td><td>单选控件</td><td></td></tr><tr><td>checkbox</td><td>复选框</td><td></td></tr><tr><td>checked</td><td>默认选中项</td><td></td></tr><tr><td>textarea</td><td>文本域</td></tr></tbody></table><h2 id="TDK"><a href="#TDK" class="headerlink" title="TDK"></a>TDK</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>keywords</td><td>关键词</td><td><meta name="keywords" content="It培训,前端培训"></td></tr><tr><td>description</td><td>网页描述</td></tr></tbody></table><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>solid</td><td>实线边框</td><td></td></tr><tr><td>dashed</td><td>虚线边框</td><td></td></tr><tr><td>dotted</td><td>点线边框</td></tr></tbody></table><h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>overflow:hidden</td><td></td><td>超出部分隐藏</td></tr><tr><td>display</td><td>隐藏：none、显示：block</td><td>隐藏元素 不占 位置</td></tr><tr><td>visibility:   hidden</td><td></td><td>隐藏元素 占 位置</td></tr></tbody></table><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>::before</td><td>在。。之前</td><td></td></tr><tr><td>::after</td><td>在。。之后</td><td></td></tr><tr><td>content</td><td>内容</td><td>伪元素必须有content，另外默认是行内元素</td></tr><tr><td>:first-letter</td><td>第一-字母</td><td>选中首字母(例：p:first-letter{color:   red;})</td></tr><tr><td>:last-child{}</td><td></td><td>:last-child{}</td></tr><tr><td>:nth-child(){}</td><td></td><td>:nth-child(2n){}</td></tr></tbody></table><h2 id="H5新增布局标签"><a href="#H5新增布局标签" class="headerlink" title="H5新增布局标签"></a>H5新增布局标签</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>nav</td><td></td><td></td></tr><tr><td>header</td><td></td><td></td></tr><tr><td>footer</td><td></td><td></td></tr><tr><td>article</td><td>文章区域</td><td></td></tr><tr><td>section</td><td>区域,块</td></tr></tbody></table><h2 id="背景相关"><a href="#背景相关" class="headerlink" title="背景相关"></a>背景相关</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>opacity:0~1</td><td>不透明</td><td>设置背景颜色的透明度</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>cursor:pointer</td><td>设置鼠标模式：小手</td><td></td></tr><tr><td>italic</td><td>倾斜</td><td>用于font-style，使字体倾斜</td></tr><tr><td>overflow：hidden</td><td>解决盒子塌陷</td><td>其他办法：给父盒子设置边框、浮动、绝对定位</td></tr><tr><td>float</td><td>浮动</td><td>3种清除浮动：overflow：hidden、clear、伪元素+clear</td></tr><tr><td>vertical-align</td><td>垂直居中</td><td>行内块元素都有vertical-align（middle）</td></tr><tr><td>nth-child(5)       nth-child(5n)      first-child      last-child</td><td>结构伪类选择器</td><td>nth-child(even)    nth-child(ood)</td></tr><tr><td>[属性] {}</td><td>属性选择器</td><td></td></tr><tr><td>box-sizing:border-box</td><td>设置盒子实际尺寸</td><td>无视border、padding</td></tr><tr><td>!important</td><td>重要的</td><td>设置样式优先级</td></tr><tr><td>placeholder</td><td>文本框的默认值属性</td><td></td></tr><tr><td>charset</td><td>meta里面 控制编码的属性</td><td></td></tr><tr><td>aglin</td><td>对齐方式</td><td></td></tr><tr><td>text-indent</td><td>首行缩进</td><td></td></tr><tr><td>target</td><td>目标</td><td></td></tr><tr><td>text-decoration</td><td>《a》  去掉下划线</td><td></td></tr><tr><td>underline</td><td>下划线</td><td></td></tr><tr><td>hover</td><td>鼠标悬浮</td><td></td></tr><tr><td>focus</td><td>焦点</td><td></td></tr><tr><td>white-space</td><td>元素中的空白</td><td></td></tr><tr><td>overflow</td><td>溢出</td><td></td></tr><tr><td>scroll</td><td>卷形物</td><td></td></tr><tr><td>transparent</td><td>透明的</td><td></td></tr><tr><td>multiple</td><td>下拉框多选 属性</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>white-space:   nowrap;      overflow: hidden;      text-overflow: ellipsis;      width:210px;</td><td></td></tr></tbody></table><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>通常让width写百分比</td><td>例：winth:100%</td><td>需要在mate中设置:</td></tr></tbody></table><h2 id="伸缩布局-弹性布局"><a href="#伸缩布局-弹性布局" class="headerlink" title="伸缩布局 + 弹性布局"></a>伸缩布局 + 弹性布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>display: flex;</td><td></td><td>需要设置父盒子为弹性布局</td></tr><tr><td>flex-direction:</td><td>设置主轴方向</td><td>flex-direction:   row  ·    row-reverse ·  column ·  column-reverse</td></tr><tr><td>justify-content:</td><td>设置在主轴的对齐</td><td>justify-content:   flex-start(默认值) · flex-end · center ·    space-between ·space-around</td></tr><tr><td>align-items</td><td>侧轴的对齐方式</td><td>align-items:   flex-start · flex-end · center · baseline · stretch(默认值)</td></tr><tr><td>flex-wrap</td><td>设置元素是否换行显示</td><td>flex-wrap: nowrap ·   wrap</td></tr><tr><td>align-content</td><td>元素换行后的对齐方式</td><td>align-content:   flex-start· flex-end · center· space-between · space-around ·stretch(默认对齐方式)</td></tr><tr><td>flex:   <number>; /<em> default 0 </em>/</number></td><td>子元素的伸缩比</td><td>属性定义子项目平均分配剩余空间，该子项目占多少份</td></tr><tr><td>order:1</td><td>设置子元素的排序方式</td><td>数值越小，排列越靠前，默认为0。</td></tr><tr><td>align-self</td><td>子元素自己的对齐方式</td><td>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果父元素没有，则等同于stretch。</td></tr></tbody></table><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>通过媒体查询+样式层叠改变页面样式</td><td></td></tr></tbody></table><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>@media</td><td>媒体</td><td>@media only screen   and (width: 320px) and (height: 568px) {html{font-size: 16px;}}</td></tr><tr><td>all</td><td>所有的设备</td><td></td></tr><tr><td>print</td><td>打印设备</td><td></td></tr><tr><td>screen</td><td>电脑、平板、手机</td><td></td></tr><tr><td>orientation:   portrait</td><td>竖屏</td><td></td></tr><tr><td>orientation:   landscape</td><td>横屏</td><td></td></tr><tr><td>only</td><td></td><td>指定某个特定的媒体类型, 可以省略</td></tr><tr><td>and</td><td></td><td>可以将多个媒体特性链接到一块,相当于且</td></tr><tr><td>not</td><td></td><td>排除某个媒体特性 相当于非,可以省略</td></tr></tbody></table><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="过度"><a href="#过度" class="headerlink" title="过度"></a>过度</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>transition-property:   all;</td><td>过渡-性质</td><td>设置哪些属性有动画效果,连写必填</td></tr><tr><td>transition-duration:   1s;</td><td>过渡-持续</td><td>设置动画完成时间,连写必填</td></tr><tr><td>transition-delay:   1s;</td><td>过渡-延期</td><td>设置动画延时执行时间(可以设置)</td></tr><tr><td>transition-timing-function:linear</td><td>过渡-定时-功能</td><td>设置动画速度类型</td></tr></tbody></table><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>translate(x,y)</td><td>位移</td><td>transform:   translate(100px, 200px) //设置1个值 就是水平</td></tr><tr><td>rotate(angle)</td><td>旋转</td><td></td></tr><tr><td>transform-origin</td><td>变换-起源、原点</td><td>改变旋转点，例：transform-origin:   100px 100px;（top left）</td></tr><tr><td>scale(x,y)</td><td>缩放</td><td>transform: scale(0,   0); //值代表倍数，元素缩小：0-1</td></tr><tr><td>skew(x-angle,y-angle)</td><td>倾斜</td></tr></tbody></table><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>translateX(n)、translateY(n)、translateZ(n)</td><td>位移</td><td></td></tr><tr><td>rotateX()、rotateY()、rotateZ()</td><td>旋转</td><td></td></tr><tr><td>scaleX()、scaleY()</td><td>缩放</td><td></td></tr><tr><td>skewX()、skewY()</td><td>倾斜</td><td></td></tr><tr><td>perspective</td><td>透视</td><td>800-1000</td></tr><tr><td>transform-style:   preserve-3d</td><td>转换成3D</td></tr></tbody></table><h2 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>关键帧</td><td>定义动画</td></tr><tr><td>animation-name</td><td>动画-名称</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>动画-持续时间</td><td>规定动画完成一个周期所花费的时间。</td></tr><tr><td>animation-timing-function</td><td>动画-定时-功能</td><td>规定动画的速度曲线。默认是   “ease”。</td></tr><tr><td>animation-delay</td><td>动画-延迟</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>动画-迭代-计数</td><td>规定动画被播放的次数。默认是 1。还有   infinite</td></tr><tr><td>animation-direction</td><td>动画-方向</td><td>动画是否在下一周期逆向地播放。默认是   “normal”，alternate逆播放</td></tr><tr><td>animation-play-state</td><td>动画-播放-状态</td><td>规定动画是否正在运行或暂停。默认是   “running”。还有“paused”</td></tr><tr><td>animation-fill-mode</td><td>动画-填充-模式</td><td>规定动画结束后状态，保持 forwards   回到起始 backwards</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS&quot;&gt;&lt;/a&gt;HTML+CSS&lt;/h1&gt;&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ajax + jsonp</title>
    <link href="/2019/05/09/ajax%20+%20jsonp/"/>
    <id>/2019/05/09/ajax + jsonp/</id>
    <published>2019-05-09T03:33:47.197Z</published>
    <updated>2019-05-09T03:33:43.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>“JavaScript 对我们而已能力有限”，我们目前所了解到的 Web 所提供的 API 都只停留在“单机游戏”的阶段。</p><p>在此之前，我们可以通过以下几种方式让浏览器发出对服务端的请求，获得服务端的数据：</p><ul><li>地址栏输入地址，回车，刷新</li><li>特定元素的 href 或 src 属性</li><li>表单提交</li></ul><p>这些方案都是我们无法通过或者很难通过代码的方式进行编程（对服务端发出请求并且接受服务端返回的响应），<strong>如果我们可以通过 JavaScript 直接发送网络请求，那么 Web 的可能就会更多，随之能够实现的功能也会更多，至少不再是只能开发“单机游戏”。</strong></p><blockquote><p>对 XXX 进行编程指的就是用代码的方式操作它。</p></blockquote><h3 id="Google-Suggest"><a href="#Google-Suggest" class="headerlink" title="Google Suggest"></a>Google Suggest</h3><p>AJAX（Asynchronous JavaScript and XML），最早出现在 2005 年的 <a href="http://google-suggest.tumblr.com/" target="_blank" rel="noopener">Google Suggest</a>，是在浏览器端进行网络编程（发送请求、接收响应）的技术方案，它使我们可以通过 JavaScript 直接获取服务端最新的内容而不必重新加载页面。让 Web 更能接近桌面应用的用户体验。</p><h3 id="AJAX-Asynchronous-Javascript-And-XML"><a href="#AJAX-Asynchronous-Javascript-And-XML" class="headerlink" title="AJAX (Asynchronous Javascript And XML)"></a>AJAX (Asynchronous Javascript And XML)</h3><p>说白了，<strong>AJAX 就是浏览器提供的一套 API，可以通过 JavaScript 调用，从而实现通过代码控制请求与响应。实现通过 JavaScript 进行网络编程。</strong></p><p>至于 <strong>XML</strong>：最早在客户端与服务端之间传递数据时所采用的数据格式就是 XML。</p><blockquote><p>能力不够 API 凑。</p></blockquote><h3 id="应用场景总结"><a href="#应用场景总结" class="headerlink" title="应用场景总结"></a>应用场景总结</h3><p>对于每一个未知的技术，我们在了解了过后第一反应就是在什么情况下用？</p><ul><li>按需获取数据</li><li>对用户数据校验</li><li>自动更新页面内容</li><li>提升用户体验，无刷新的体验</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>AJAX API 中核心提供的是一个 <code>XMLHttpRequest</code> 类型，所有的 AJAX 操作都需要使用到这个类型。</p><p>使用 AJAX 的过程可以类比平常我们访问网页过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 xhr 的 responseText 获取到响应的响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：涉及到 AJAX 操作的页面不能使用文件协议访问（文件的方式访问）</p></blockquote><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><p>由于 <code>readystatechange</code> 事件是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被触发多次，所以我们有必要了解每一个状态值代表的含义：</p><table><thead><tr><th>readyState</th><th>状态描述</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用，建立了连接。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td></tr><tr><td>3</td><td>LOADING</td><td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>响应体下载完成，可以直接使用 <code>responseText</code>。</td></tr></tbody></table><h4 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=&gt;start: UNSENT</span><br><span class="line">o1=&gt;operation: OPENED</span><br><span class="line">o2=&gt;operation: HEADERS_RECEIVED</span><br><span class="line">o3=&gt;operation: LOADING</span><br><span class="line">e=&gt;end: DONE</span><br><span class="line"></span><br><span class="line">s(right)-&gt;o1(right)-&gt;o2(right)-&gt;o3(right)-&gt;e</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=&gt;start: 初始化</span><br><span class="line">o1=&gt;operation: 建立连接</span><br><span class="line">o2=&gt;operation: 接收到响应头</span><br><span class="line">o3=&gt;operation: 响应体加载中</span><br><span class="line">e=&gt;end: 加载完成</span><br><span class="line"></span><br><span class="line">s(right)-&gt;o1(right)-&gt;o2(right)-&gt;o3(right)-&gt;e</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="comment">// 初始化 请求代理对象</span></span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// open 方法已经调用，建立一个与服务端特定端口的连接</span></span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">this</span>.readyState) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="comment">// =&gt; 2</span></span><br><span class="line">      <span class="comment">// 已经接受到了响应报文的响应头</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 可以拿到头</span></span><br><span class="line">      <span class="comment">// console.log(this.getAllResponseHeaders())</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'server'</span>))</span><br><span class="line">      <span class="comment">// 但是还没有拿到体</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="comment">// =&gt; 3</span></span><br><span class="line">      <span class="comment">// 正在下载响应报文的响应体，有可能响应体为空，也有可能不完整</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在这里处理响应体不保险（不可靠）</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="comment">// =&gt; 4</span></span><br><span class="line">      <span class="comment">// 一切 OK （整个响应报文已经完整下载下来了）</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这里处理响应体</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 <code>4</code> 时，执行响应的后续逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 后续逻辑......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遵循-HTTP"><a href="#遵循-HTTP" class="headerlink" title="遵循 HTTP"></a>遵循 HTTP</h3><p>本质上 XMLHttpRequest 就是 JavaScript 在 Web 平台中发送 HTTP 请求的手段，所以我们发送出去的请求任然是 HTTP 请求，同样符合 HTTP 约定的格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求报文的请求行</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="comment">// 设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line"><span class="comment">// 设置请求体</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取响应状态码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.status)</span><br><span class="line">    <span class="comment">// 获取响应状态描述</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText)</span><br><span class="line">    <span class="comment">// 获取响应头信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'Content-Type'</span>)) <span class="comment">// 指定响应头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAllResponseHeaders()) <span class="comment">// 全部响应头</span></span><br><span class="line">    <span class="comment">// 获取响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) <span class="comment">// 文本形式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseXML) <span class="comment">// XML 形式，了解即可不用了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li></ul></blockquote><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><blockquote><p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 <code>?</code> 参数传递。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// GET 请求传递参数通常使用的是问号传参</span></span><br><span class="line"><span class="comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/delete?id=1'</span>)</span><br><span class="line"><span class="comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span><br></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><blockquote><p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// open 方法的第一个参数的作用就是设置请求的 method</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/add'</span>)</span><br><span class="line"><span class="comment">// 设置请求头中的 Content-Type 为 application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"><span class="comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递</span></span><br><span class="line"><span class="comment">// 格式：name=zhangsan&amp;age=18</span></span><br><span class="line">xhr.send(<span class="string">'name=zhangsan&amp;age=18'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p><blockquote><ul><li>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等待</li><li>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</li></ul></blockquote><p><code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认为 <code>true</code>，如果需要同步执行可以通过传递 <code>false</code> 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 默认第三个参数为 true 意味着采用异步方式执行</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的代码最后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request done'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><p>如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 同步方式</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// // 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发</span></span><br><span class="line"><span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="comment">//   if (this.readyState === 4) &#123;</span></span><br><span class="line"><span class="comment">//     // 这里的代码最后执行</span></span><br><span class="line"><span class="comment">//     console.log('request done')</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 因为 send 方法执行完成 响应已经下载完成</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><p>演示同步异步差异。</p><p>所以一定在发送请求 <code>send()</code> 之前注册 <code>readystatechange</code>（不管同步或者异步）</p><ul><li>为了让这个事件可以更加可靠（一定触发），一定是先注册</li></ul><blockquote><p>了解同步模式即可，切记不要使用同步模式。</p></blockquote><p>至此，我们已经大致了解了 AJAX 所的提供的基本 API 。</p><h3 id="XMLHttpRequest-API-总结"><a href="#XMLHttpRequest-API-总结" class="headerlink" title="XMLHttpRequest API 总结"></a>XMLHttpRequest API 总结</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><code>readyState</code></li><li><code>status</code></li><li><code>responseText</code></li><li><code>responseXML</code></li><li><code>onreadystatechange</code></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><code>open(method, url, async)</code></li><li><code>send(requsetBody)</code></li><li><code>setRequestHeader(key, value)</code></li><li><code>getResponseHeader(key)</code></li></ul><h3 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h3><blockquote><p>提问：如果希望服务端返回一个复杂数据，该如何处理？</p></blockquote><p>关心的问题就是服务端发出何种格式的数据，这种格式如何在客户端用 JavaScript 解析。</p><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><p>一种数据描述手段</p><p>老掉牙的东西，简单演示一下，不在这里浪费时间，基本现在的项目不用了。</p><p>淘汰的原因：数据冗余太多</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>也是一种数据描述手段，类似于 JavaScript 字面量方式</p><p>服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p><blockquote><p><strong>注意</strong>：</p><ul><li>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们与 AJAX 之间有必然的联系，它们只是数据协议罢了。</li><li>不管服务端是采用 XML 还是采用 JSON 本质上都是将数据返回给客户端。</li><li>服务端应该根据响应内容的格式设置一个合理的 Content-Type。</li></ul></blockquote><h3 id="留言板案例"><a href="#留言板案例" class="headerlink" title="留言板案例"></a>留言板案例</h3><ol><li>页面结构</li><li>数据接口</li><li>AJAX 实现</li></ol><h3 id="处理响应数据渲染"><a href="#处理响应数据渲染" class="headerlink" title="处理响应数据渲染"></a>处理响应数据渲染</h3><p>客户端中拿到请求的数据过后最常见的就是把这些数据呈现到界面上。</p><p>如果数据结构简单，可以直接通过字符串操作（拼接）的方式处理，但是如果数据过于复杂，字符串拼接维护成本太大，就不推荐了。</p><blockquote><p>模板引擎：</p><ul><li>artTemplate：<a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">https://aui.github.io/art-template/</a></li></ul></blockquote><p>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到HTML字符串中。</p><h3 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h3><p>缓存问题指的是：多次 AJAX GET 请求同一个 URL 得到的结果是相同的，目前绝大多数浏览器已经没有这个问题了，只有早期的 IE 浏览器（&lt;= IE 9）任然存在这个问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  <span class="comment">// =&gt; 每次得到的结果都是相同的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="URL-加戳"><a href="#URL-加戳" class="headerlink" title="URL 加戳"></a>URL 加戳</h5><p>这个办法的核心就是让浏览器认为每次请求的地址都是不同的。</p><blockquote><p>不同的 querystring 会被浏览器认为是不同的地址，浏览器会忽略客户端缓存。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time?t='</span> + <span class="built_in">Date</span>.now())</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  <span class="comment">// =&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务端设置响应头"><a href="#服务端设置响应头" class="headerlink" title="*服务端设置响应头"></a>*服务端设置响应头</h5><p>由服务端通过 HTTP 响应报文中的响应头告知客户端浏览器不要缓存当前地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/time'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.set(<span class="string">'Cache-Control'</span>, <span class="string">'no-cache'</span>)</span><br><span class="line">  res.set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>)</span><br><span class="line">  res.set(<span class="string">'Expires'</span>, <span class="string">'-1'</span>)</span><br><span class="line">  res.send(<span class="built_in">Date</span>.now().toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>了解即可，更多的情况下前端开发中还是通过加戳的方式解决此问题，因为在前端可控范围之内。</p><h3 id="兼容方案"><a href="#兼容方案" class="headerlink" title="兼容方案"></a>兼容方案</h3><p>XMLHttpRequest 在老版本浏览器（IE5/6）中有兼容问题，可以通过另外一种方式代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line"><span class="comment">// xhr 的成员相同</span></span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="AJAX-请求封装"><a href="#AJAX-请求封装" class="headerlink" title="AJAX 请求封装"></a>AJAX 请求封装</h3><blockquote><p>函数就可以理解为一个想要做的事情，函数体中约定了这件事情做的过程，直到调用时才开始工作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送一个 AJAX 请求</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125;   url    请求地址</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125;   method 请求方法</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;   params 请求参数</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; done   请求完成过后需要做的事情（委托/回调）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url, method, params, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 统一转换为大写便于后续判断</span></span><br><span class="line">  method = method.toUpperCase()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象形式的参数转换为 urlencoded 格式</span></span><br><span class="line">  <span class="keyword">var</span> pairs = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">    pairs.push(key + <span class="string">'='</span> + params[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> querystring = pairs.join(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line"></span><br><span class="line">  xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试通过 JSON 格式解析响应体</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      done(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      done(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是 GET 请求就设置 URL 地址 问号参数</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    url += <span class="string">'?'</span> + querystring</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.open(method, url)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是 POST 请求就设置请求体</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    data = querystring</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'/getsomthing'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'post'</span>, <span class="string">'/addsomthing'</span>, &#123; <span class="attr">foo</span>: <span class="string">'posted data'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>委托</strong>：将函数作为参数传递就像是将一个事情交给别人，这就是委托的概念</p></blockquote><h3 id="jQuery-中的-AJAX"><a href="#jQuery-中的-AJAX" class="headerlink" title="jQuery 中的 AJAX"></a>jQuery 中的 AJAX</h3><p>jQuery 中有一套专门针对 AJAX 的封装，功能十分完善，经常使用，需要着重注意。</p><blockquote><p>一个你会用我会用他会用到的点，就一定有一个已经封装好的</p></blockquote><blockquote><p>参考：</p><ul><li><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/</a></li><li><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></li></ul></blockquote><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'/time'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  data: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before send'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request completed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>常用选项参数介绍：</p><ul><li>url：请求地址</li><li>type：请求方法，默认为 <code>get</code></li><li>dataType：服务端响应数据类型</li><li>contentType：请求体内容类型，默认 <code>application/x-www-form-urlencoded</code></li><li>data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</li><li>timeout：请求超时时间</li><li>beforeSend：请求发起之前触发</li><li>success：请求成功之后触发（响应状态码 200）</li><li>error：请求失败触发</li><li>complete：请求完成触发（不管成功与否）</li></ul><h4 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h4><p>GET 请求快捷方法</p><p><code>$.get(url, data, callback)</code></p><h4 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h4><p>POST 请求快捷方法</p><p><code>$.post(url, data, callback)</code></p><h4 id="全局事件处理"><a href="#全局事件处理" class="headerlink" title="全局事件处理"></a>全局事件处理</h4><blockquote><p><a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.ajaxComplete()</span><br><span class="line"><span class="comment">//当Ajax请求完成后注册一个回调函数。这是一个 AjaxEvent。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxError()</span><br><span class="line"><span class="comment">//Ajax请求出错时注册一个回调处理函数，这是一个 Ajax Event。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxSend()</span><br><span class="line"><span class="comment">//在Ajax请求发送之前绑定一个要执行的函数，这是一个 Ajax Event.</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxStart()</span><br><span class="line"><span class="comment">//在AJAX 请求刚开始时执行一个处理函数。 这是一个 Ajax Event.</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxStop()</span><br><span class="line"><span class="comment">//在AJAX 请求完成时执行一个处理函数。 这是一个 Ajax Event。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxSuccess()</span><br><span class="line"><span class="comment">//绑定一个函数当 Ajax 请求成功完成时执行。 这是一个Ajax Event.</span></span><br></pre></td></tr></table></figure><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>Axios 是目前应用最为广泛的 AJAX 封装库，相对于 jQuery 的优势在于功能能强劲，职责更单一，后期专门有介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/time'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>*扩展：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p></blockquote><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>同源策略是浏览器的一种安全策略，所谓同源是指<strong>域名</strong>，<strong>协议</strong>，<strong>端口</strong>完全相同，只有同源的地址才可以相互通过 AJAX 的方式请求。</p><p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为<strong>跨域请求</strong></p><p>什么是同源？例如：<a href="http://www.example.com/detail.html" target="_blank" rel="noopener">http://www.example.com/detail.html</a> 与一下地址对比</p><table><thead><tr><th>对比地址</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://api.example.com/detail.html" target="_blank" rel="noopener">http://api.example.com/detail.html</a></td><td>不同源</td><td>域名不同</td></tr><tr><td><a href="https://www.example.com/detail.html" target="_blank" rel="noopener">https://www.example.com/detail.html</a></td><td>不同源</td><td>协议不同</td></tr><tr><td><a href="http://www.example.com:8080/detail.html" target="_blank" rel="noopener">http://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口不同</td></tr><tr><td><a href="http://api.example.com:8080/detail.html" target="_blank" rel="noopener">http://api.example.com:8080/detail.html</a></td><td>不同源</td><td>域名、端口不同</td></tr><tr><td><a href="https://api.example.com/detail.html" target="_blank" rel="noopener">https://api.example.com/detail.html</a></td><td>不同源</td><td>协议、域名不同</td></tr><tr><td><a href="https://www.example.com:8080/detail.html" target="_blank" rel="noopener">https://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口、协议不同</td></tr><tr><td><a href="http://www.example.com/other.html" target="_blank" rel="noopener">http://www.example.com/other.html</a></td><td>同源</td><td>只是目录不同</td></tr></tbody></table><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>现代化的 Web 应用中肯定会有不同源的现象，所以必然要解决这个问题，从而实现跨域请求。</p><blockquote><p>参考：<a href="http://rickgray.me/solutions-to-cross-domain-in-browser" target="_blank" rel="noopener">http://rickgray.me/solutions-to-cross-domain-in-browser</a></p></blockquote><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p><strong>JSON</strong> with <strong>P</strong>adding，是一种借助于 <code>script</code> 标签发送跨域请求的技巧。</p><p>其原理就是在客户端借助 <code>script</code> 标签请求服务端的一个地址，服务端的这个地址返回一段带有调用某个全局函数调用的 JavaScript 脚本（而非一段 HTML），将原本需要返回给客户端的数据通过参数传递给这个函数，函数中就可以得到原本服务端想要返回的数据。</p><p>以后绝大多数情况都是采用 JSONP 的手段完成不同源地址之间的跨域请求</p><p>客户端 <a href="http://www.zce.me/users-list.html" target="_blank" rel="noopener">http://www.zce.me/users-list.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://api.zce.me/users?callback=foo"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端 <a href="http://api.zce.me/users?callback=foo" target="_blank" rel="noopener">http://api.zce.me/users?callback=foo</a> 返回的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo([<span class="string">'我'</span>, <span class="string">'是'</span>, <span class="string">'你'</span>, <span class="string">'原'</span>, <span class="string">'本'</span>, <span class="string">'需'</span>, <span class="string">'要'</span>, <span class="string">'直'</span>, <span class="string">'接'</span>, <span class="string">'返'</span>, <span class="string">'回'</span>, <span class="string">'的'</span>, <span class="string">'数'</span>, <span class="string">'据'</span>])</span><br></pre></td></tr></table></figure><p><strong>总结一下</strong>：由于 XMLHttpRequest 无法发送不同源地址之间的跨域请求，所以我们必须要另寻他法，script 这种方案就是我们最终选择的方式，我们把这种方式称之为 JSONP，如果你不了解原理，先记住怎么用，多用一段时间再来看原理。</p><p>问题：</p><ol><li>JSONP 需要服务端配合，服务端按照客户端的要求返回一段 JavaScript 调用客户端的函数</li><li>只能发送 GET 请求</li></ol><blockquote><p>注意：JSONP 用的是 script 标签，更 AJAX 提供的 XMLHttpRequest 没有任何关系！！！</p></blockquote><h5 id="jQuery-中对-JSONP-的支持"><a href="#jQuery-中对-JSONP-的支持" class="headerlink" title="jQuery 中对 JSONP 的支持"></a>jQuery 中对 JSONP 的支持</h5><p>jQuery 中使用 JSONP 就是将 dataType 设置为 jsonp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'https://douban.uieee.com/v2/comming_soon'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  data: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before send'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request completed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Axios 由于设计原因不支持 JSONP</p></blockquote><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>Cross Origin Resource Share，跨域资源共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/time'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// // 允许任意源访问，不安全</span></span><br><span class="line">  <span class="comment">// res.set('Access-Control-Allow-Origin', '*')</span></span><br><span class="line">  <span class="comment">// 允许指定源访问</span></span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://zce.me'</span>)</span><br><span class="line">  res.send(<span class="built_in">Date</span>.now().toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种方案无需客户端作出任何变化（客户端不用改代码），只是在被请求的服务端响应的时候添加一个 <code>Access-Control-Allow-Origin</code> 的响应头，表示这个资源是否允许指定域请求。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p></blockquote><h2 id="XMLHttpRequest-2-0"><a href="#XMLHttpRequest-2-0" class="headerlink" title="XMLHttpRequest 2.0"></a>XMLHttpRequest 2.0</h2><blockquote><p>暂作了解，无需着重看待</p></blockquote><p>HTML5 中对 XMLHttpRequest 类型全面升级，更易用，更强大</p><h3 id="response-属性"><a href="#response-属性" class="headerlink" title="response 属性"></a>response 属性</h3><h3 id="onload-onprogress"><a href="#onload-onprogress" class="headerlink" title="onload / onprogress"></a>onload / onprogress</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// onload readyState =&gt; 4</span></span><br><span class="line">  <span class="comment">// 只在请求完成时触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// onprogress readyState =&gt; 3</span></span><br><span class="line">  <span class="comment">// 只在请求进行中触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>以前 AJAX 操作只能提交字符串，现在可以提交 <strong>二进制</strong> 的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当用户在文件域中选择了一个文件过后</span></span><br><span class="line">  $(<span class="string">'#input_avatar'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.files[0] =&gt; 拿到选中的文件对象</span></span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 希望展示这个文件有两种方式：</span></span><br><span class="line">    <span class="comment">// 1. FileReader</span></span><br><span class="line">    <span class="comment">// 2. URL.createObjectURL()</span></span><br><span class="line">    <span class="comment">//    给用户选择的文件对象创建一个临时 URL，用这个 URL 呈现图片</span></span><br><span class="line">    <span class="keyword">var</span> url = URL.createObjectURL(file)</span><br><span class="line">    $(<span class="string">'#avatar_preview'</span>).attr(<span class="string">'src'</span>, url).hide().fadeIn()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 文件域有个 change 事件，在用户选择完文件后触发</span></span><br><span class="line">  <span class="comment">// 2. 文件域有个 accept 属性，用于设置文件域的文件类型限制</span></span><br><span class="line">  <span class="comment">// 3. 文件域可以同 multiple 设置多选</span></span><br><span class="line">  <span class="comment">// 4. JS 中可以通过 input dom 的 files 属性访问到选中的文件，数组</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#btn_save'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#input_avatar'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      alert(<span class="string">'必须选择文件'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTML5 中提供了一个 专门用于提交复杂数据 AJAX 情况的类型 FormData</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData()</span><br><span class="line">    data.append(<span class="string">'name'</span>, $(<span class="string">'#input_name'</span>).val())</span><br><span class="line">    data.append(<span class="string">'bio'</span>, $(<span class="string">'#input_bio'</span>).val())</span><br><span class="line">    data.append(<span class="string">'avatar'</span>, file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'/api/member-add'</span>)</span><br><span class="line">    <span class="comment">// send 除了可以接受 string 类型的参数 也可接受 FormData 类型</span></span><br><span class="line">    xhr.responseType = <span class="string">'json'</span></span><br><span class="line">    xhr.send(data)</span><br><span class="line">    xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.response)</span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">'/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="responseType"><a href="#responseType" class="headerlink" title="responseType"></a>responseType</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般情况下 服务端都是会以 JSON 字符串的格式返回响应内容</span></span><br><span class="line"><span class="comment">// response 会有几种情况，默认请情况下 response === responseText</span></span><br><span class="line"><span class="comment">// 如果想要拿到对象结果，可以通过 responseType 设置</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(<span class="string">'GET'</span>, <span class="string">'/page'</span>)</span><br><span class="line">      xhr.responseType = <span class="string">'document'</span></span><br><span class="line">      xhr.send()</span><br><span class="line">      xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.response.querySelector(<span class="string">'h1'</span>))</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>异步上传文件</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/ajax/index.asp</a></li><li><a href="https://aui.github.io/art-template/zh-cn" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
      <category term="ajax、jsonp" scheme="/categories/ajax%E3%80%81jsonp/"/>
    
    
      <category term="ajax、jsonp" scheme="/tags/ajax%E3%80%81jsonp/"/>
    
  </entry>
  
  <entry>
    <title>cookie、session、WebStorage</title>
    <link href="/2019/05/09/cookie%E3%80%81session%E3%80%81WebStorage/"/>
    <id>/2019/05/09/cookie、session、WebStorage/</id>
    <published>2019-05-09T03:32:47.110Z</published>
    <updated>2019-05-09T03:32:43.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p><strong>缺点：</strong></p><ul><li>大小受限，每个cookie有4k限制</li><li>用户可以操作（禁用）cookie，使功能受限</li><li>安全性较低</li><li>每次访问都要传送cookie给服务器，浪费带宽</li><li>cookie数据有路径（path）的概念，限制其只属于某个路径下</li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>存储在服务器端、与cookie配合使用</p><h2 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h2><blockquote><p>H5新技术</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>特点：</strong></p><ul><li>存储空间更大：单个item数据大小可以达到5MB</li><li>节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取使用</li><li>只能存储字符串类型</li></ul><p><strong>种类：</strong></p><ul><li>localStorage（本地存储）   不会自动清除</li><li>sessionStorage（会话存储）    浏览器关闭 自动清除</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.localStorage</span><br><span class="line"><span class="built_in">window</span>.sessionStorage</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setItem (key, value)<span class="comment">//保存数据，以键值对的方式储存信息。</span></span><br><span class="line">getItem (key) <span class="comment">//获取数据，将键值传入，即可获取到对应的value值。</span></span><br><span class="line">removeItem (key) <span class="comment">//删除单个数据，根据键值移除对应的信息。</span></span><br><span class="line">clear () <span class="comment">//删除所有的数据</span></span><br><span class="line">key (index) <span class="comment">//获取某个索引的key</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'islogin'</span>,<span class="string">'true'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cookies&quot;&gt;&lt;a href=&quot;#Cookies&quot; class=&quot;headerlink&quot; title=&quot;Cookies&quot;&gt;&lt;/a&gt;Cookies&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小受限，每个cookie有4k
      
    
    </summary>
    
      <category term="本地存储" scheme="/categories/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="本地存储" scheme="/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git - 基础</title>
    <link href="/2019/05/09/Git%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Git - 基础/</id>
    <published>2019-05-09T03:31:16.682Z</published>
    <updated>2019-05-09T03:31:09.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p><p>Git有什么特点？简单来说就是：高端大气上档次！</p><p>那什么是版本控制系统？</p><p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去。</p><p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p><p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p><p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p><table><thead><tr><th>版本</th><th>文件名</th><th>用户</th><th>说明</th><th>日期</th></tr></thead><tbody><tr><td>1</td><td>service.doc</td><td>张三</td><td>删除了软件服务条款5</td><td>7/12 10:38</td></tr><tr><td>2</td><td>service.doc</td><td>张三</td><td>增加了License人数限制</td><td>7/12 18:09</td></tr><tr><td>3</td><td>service.doc</td><td>李四</td><td>财务部门调整了合同金额</td><td>7/13 9:51</td></tr><tr><td>4</td><td>service.doc</td><td>张三</td><td>延长了免费升级周期</td><td>7/14 15:17</td></tr></tbody></table><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h2><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384860735706fd4c70aa2ce24b45a8ade85109b0222b000/0" alt="central-repo"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013848607465969378d7e6d5e6452d8161cf472f835523000/0" alt="distributed-repo"></p><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p><p>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h3><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="noopener">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907061183ba2a452af9de4a8a8640339239bc3e5e000/0" alt="install-git-by-xcode"></p><p>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><h3 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h3><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后<strong>按默认选项安装即可</strong>。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907073134ef6feff559cf4ce3a2c5c588d2831c0a000/0" alt="install-git-on-windows"></p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><p>当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的（不要手动修改）</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><h3 id="将文件上传到Git"><a href="#将文件上传到Git" class="headerlink" title="将文件上传到Git"></a>将文件上传到Git</h3><blockquote><p>一定要放到<code>learngit</code>目录下（子目录也行）</p></blockquote><p><strong>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add 文件名（+后缀）</span><br></pre></td></tr></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p><strong>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容</p><p><code>git commit</code>命令执行成功后会告诉你：</p><p>​        1 file changed<code>：1个文件被改动</code></p><p>​        <code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><hr><h2 id="常用命令整理"><a href="#常用命令整理" class="headerlink" title="常用命令整理"></a>常用命令整理</h2><p>.gitignore   →   该文件内容中制定的文件/文件夹不会被git push</p><table><thead><tr><th>初始化</th><th></th><th></th></tr></thead><tbody><tr><td>设置用户名</td><td>git config –global user.name ‘我的名字’</td><td></td></tr><tr><td>设置用户邮箱</td><td>git config –global user.email ‘我的邮箱’</td></tr></tbody></table><table><thead><tr><th>仓库相关</th><th></th><th></th></tr></thead><tbody><tr><td>拉取(本地有仓库)</td><td>git pull 仓库地址 分知名</td><td>git pull 仓库地址 master</td></tr><tr><td>克隆(本地无仓库)</td><td>git clone 仓库地址 *项目名</td><td></td></tr><tr><td>提交</td><td>git push 仓库地址 分支名</td><td>git push 仓库地址 master</td></tr><tr><td>远程仓库别名</td><td>git remote add 别名 仓库地址</td><td></td></tr><tr><td>初始化仓库</td><td>git init –bare</td><td>本地仓库需要初始化</td></tr><tr><td>注：提交前，先拉取</td><td>克隆前init、克隆后 git add + git commit</td></tr></tbody></table><table><thead><tr><th>本地相关</th><th></th><th></th></tr></thead><tbody><tr><td>初始化仓库</td><td>git init</td><td></td></tr><tr><td>提交暂存区</td><td>git add *   //     git add 文件路径</td><td></td></tr><tr><td>本地回滚</td><td>git checkout 文件路径</td><td>从暂存区恢复文件</td></tr><tr><td>提交仓库</td><td>git commit -m’备注’</td><td></td></tr><tr><td>本地回滚</td><td>git reset –hard 版本号</td><td>从仓库中恢复文件</td></tr><tr><td>查询文件状态</td><td>git status</td><td></td></tr><tr><td>查看当前+之前版本</td><td>git log</td><td></td></tr><tr><td>查看版本操作记录</td><td>git reflog</td></tr></tbody></table><table><thead><tr><th>分支</th><th></th><th></th></tr></thead><tbody><tr><td>查看分支</td><td>git branch</td><td></td></tr><tr><td>创建分支</td><td>git branch 分支名称</td><td></td></tr><tr><td>切换分支</td><td>git checkout 分支名称</td><td>创建+切换分支 git checkout -b *</td></tr><tr><td>删除分支</td><td>git branch -d 分支名称</td><td></td></tr><tr><td>合并分支</td><td>git merge 分支名称</td><td>当前分支合并所选分支(注 同文件冲突)</td></tr></tbody></table><h2 id="创建SSH公钥"><a href="#创建SSH公钥" class="headerlink" title="创建SSH公钥"></a>创建SSH公钥</h2><ul><li>ssh-keygen -t rsa    一路回车</li><li>公钥：C:\Users\nova.ssh/id_rsa.pub</li><li>将公钥添加到github中</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git是什么&quot;&gt;&lt;a href=&quot;#Git是什么&quot; class=&quot;headerlink&quot; title=&quot;Git是什么&quot;&gt;&lt;/a&gt;Git是什么&lt;/h2&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统（没有之一）。&lt;/p&gt;
&lt;p&gt;Git有什么特点？简单来说就是：高
      
    
    </summary>
    
      <category term="Git" scheme="/categories/Git/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
</feed>
