<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nova7y</title>
  
  
  <link href="/yyy/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-09T04:57:44.191Z</updated>
  <id>/</id>
  
  <author>
    <name>nova7y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL</title>
    <link href="/2019/05/09/4.SQL/"/>
    <id>/2019/05/09/4.SQL/</id>
    <published>2019-05-09T04:57:17.451Z</published>
    <updated>2019-05-09T04:57:44.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>int 整数、double 浮点数、varchar(255) 字符串、text 文本、datetime 日期、float 浮点数</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><table><thead><tr><th>数据库操作       //这里不要大写</th><th></th></tr></thead><tbody><tr><td>create database 数据库名</td><td>增加 - 数据库</td></tr><tr><td>drop database 数据库名</td><td>删除 - 数据库</td></tr><tr><td>use 数据库名</td><td>切换 - 数据库</td></tr><tr><td>create   table 表名 (       id int auto_increment primary   key,        name varchar(20) not null,)</td><td>新建 - 表</td></tr><tr><td>auto_increment</td><td>自动编号</td></tr><tr><td>primary key</td><td>主键  唯一标识</td></tr><tr><td>drop table 表名</td><td>删除 - 表</td></tr></tbody></table><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><table><thead><tr><th>增</th><th></th></tr></thead><tbody><tr><td>INSERT INTO users   (uname, upwd, uqq) values(‘zs’,’123’, ‘12345’)</td><td>普通增加</td></tr><tr><td>INSERT INTO users   values(2,’zs’,’123’, ‘12345’)</td><td>可省略字段名</td></tr></tbody></table><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><table><thead><tr><th>删除</th><th></th></tr></thead><tbody><tr><td>DELETE FROM users   WHERE uid = 1</td><td>条件删除</td></tr><tr><td>DELETE FROM users</td><td>清空数据</td></tr></tbody></table><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><table><thead><tr><th>改</th><th></th></tr></thead><tbody><tr><td>UPDATE users SET   uname=’zsxxx’, uqq=’111’ WHERE uid=1</td></tr></tbody></table><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><table><thead><tr><th>查</th><th></th></tr></thead><tbody><tr><td>SELECT * FROM   users</td><td>普通查询</td></tr><tr><td>SELECT * FROM users   WHERE uname like ‘%s%’</td><td>模糊查询</td></tr><tr><td>SELECT * FROM users WHERE uname in (‘zs’,’ls’)</td><td>in 查询</td></tr><tr><td>SELECT * FROM users ORDER BY 字段 DESC</td><td>order by 排序</td></tr><tr><td>asc 默认是升序      desc 降序</td><td></td></tr><tr><td>SELECT * FROM users LIMIT 3</td><td>LIMIT 限制查询数量</td></tr><tr><td>SELECT * FROM users   ORDER BY id DESC LIMIT 3</td><td>降序后取3条数据</td></tr><tr><td>SELECT * FROM users   ORDER BY id DESC LIMIT 3,2</td><td>跳过3条，取2条</td></tr><tr><td>SELECT COUNT(*) FROM   users</td><td>获取总条数</td></tr><tr><td>SELECT count(*) as   sum FROM users     //as  用于起别名</td><td></td></tr><tr><td>SELECT column_name(s)      FROM table_name1      INNER JOIN table_name2       ON table_name1.column_name=table_name2.column_name      where 条件</td><td>多表查询</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>其他</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>BETWEEN…AND</td><td>在某个范围内</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>&gt;</td><td>大于</td><td></td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;p&gt;int 整数、double 浮点数、varchar(255) 字符串、text 文本、datetime 日期、float 浮点数&lt;/
      
    
    </summary>
    
      <category term="sql" scheme="/categories/sql/"/>
    
    
      <category term="sql" scheme="/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式- 基础</title>
    <link href="/2019/05/09/3.%E6%AD%A3%E5%88%99/"/>
    <id>/2019/05/09/3.正则/</id>
    <published>2019-05-09T04:55:00.701Z</published>
    <updated>2019-05-09T04:54:53.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>元字符</th><th></th></tr></thead><tbody><tr><td>元字符</td><td>说明</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线_</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线_</td></tr><tr><td>\s</td><td>匹配空白符（空格）</td></tr><tr><td>\S</td><td>匹配非空白符</td></tr><tr><td>.</td><td>匹配任意除了换行符之外的单个字符</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><table><thead><tr><th>限定符</th><th></th></tr></thead><tbody><tr><td>限定符</td><td>说明</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n   的字符串。n{0,}</td></tr><tr><td>n+</td><td>匹配任何包含至少一个 n   的字符串。{1,}</td></tr><tr><td>n?</td><td>匹配任何包含零个或一个 n   的字符串。{0,1}</td></tr><tr><td>n{x}</td><td>匹配包含 x 个 n 的序列的字符串</td></tr><tr><td>n{x,}</td><td>匹配包含至少 x 个 n 的序列的字符串。</td></tr><tr><td>n{x,y}</td><td>匹配包含 至少x个 至多 y 个 n   的序列的字符串。</td></tr><tr><td>n$</td><td>匹配任何结尾为 n 的字符串</td></tr><tr><td>^n</td><td>匹配任何开头为 n 的字符串</td></tr><tr><td>^正则表达式$  使用时，会对字符串整体校验，完全符合才能够匹配。否则，不匹配</td></tr></tbody></table><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>修饰符</th><th></th></tr></thead><tbody><tr><td>→ g</td><td>g，全称global，有 全局   的意思，表示全局匹配。</td></tr><tr><td></td><td>如： var reg =   /hello/g;</td></tr><tr><td>→ i</td><td>i，全称ignore，有 忽视、忽略   的意思，表示匹配字母时，可以忽略字母的大小写。</td></tr><tr><td></td><td>如： var reg =   /hello/i;</td></tr><tr><td>→ gi</td><td>gi，全局匹配和忽略大小写一起使用。</td></tr><tr><td></td><td>如： var reg =   /hello/gi;</td></tr></tbody></table><h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h2><table><thead><tr><th>中括号</th><th></th></tr></thead><tbody><tr><td>中括号</td><td>说明</td></tr><tr><td>[abc]</td><td>查找一个方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找一个任何不在方括号之间的字符。^在中括号中有取反的意思</td></tr><tr><td>[0-9]</td><td>查找一个任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找一个任何从小写 a 到小写 z   的字符。</td></tr><tr><td>[A-Z]</td><td>查找一个任何从大写 A 到大写 Z   的字符。</td></tr><tr><td>[A-z]</td><td>查找一个字母（包含大小写和下划线）</td></tr><tr><td>[\u4e00-\u9fa5]</td><td>查找一个汉字</td></tr></tbody></table><h2 id="或模式"><a href="#或模式" class="headerlink" title="或模式"></a>或模式</h2><table><thead><tr><th>或模式</th></tr></thead><tbody><tr><td>特殊符号：正则1\</td><td>正则2, 或者。   符合或两边其中一个就可以匹配。</td></tr><tr><td>如：google，baidu，bing;   // 匹配三种其中一种字符串</td></tr><tr><td>正则：google\</td><td>baidu\</td><td>bing</td></tr></tbody></table><h2 id="分组模式"><a href="#分组模式" class="headerlink" title="分组模式"></a>分组模式</h2><table><thead><tr><th>分组模式</th></tr></thead><tbody><tr><td>特殊符号：(正则);</td></tr><tr><td>组指的是一个小集体，分组就是将一个大集体可以分成几个小集体。</td></tr><tr><td>如：控制你的名字连续出现的次数，最少1次，最多3次</td></tr><tr><td>正则：^(bruce){1,3}$</td></tr></tbody></table><h2 id="正则转义符"><a href="#正则转义符" class="headerlink" title="正则转义符"></a>正则转义符</h2><table><thead><tr><th>正则转义符</th></tr></thead><tbody><tr><td>在正则中表示特殊符号。去除.的特殊意义，需要转义：  .</td></tr><tr><td>var 变量 = new   RegExp(“规则”,”修饰符”)</td></tr><tr><td>var 变量 =   /正则表达式/;         var reg = /\d/g;</td></tr><tr><td>正则对象.test(字符串)   用于检测字符串是否匹配。返回true和false</td></tr><tr><td>字符串.match(正则对象);     获取匹配正则的子字符串，返回一个伪数组。</td></tr><tr><td>字符串.replace(正则对象,替换内容);    替换所匹配正则的子字符串。返回替换后的字符串。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h1&gt;&lt;h2 id=&quot;元
      
    
    </summary>
    
      <category term="正则" scheme="/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>html + css - 基础</title>
    <link href="/2019/05/09/1.html%20+%20css%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/1.html + css - 基础/</id>
    <published>2019-05-09T04:00:13.915Z</published>
    <updated>2019-05-09T04:43:53.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>位置</td><td></td></tr><tr><td>absolute</td><td>绝对定位</td><td></td></tr><tr><td>relative</td><td>相对定位</td><td></td></tr><tr><td>fixed</td><td>固定定位</td><td></td></tr><tr><td>Static</td><td>静态定位</td></tr></tbody></table><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>caption</td><td>标题</td><td>设置表格的标题</td></tr><tr><td>cellpadding</td><td>单元格边距</td><td>设计单元格之间的距离</td></tr><tr><td>cellspacing</td><td>单元格间距</td><td>去掉边框之间的距离，默认值2</td></tr></tbody></table><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>source</td><td>视频源</td><td></td></tr><tr><td>audio</td><td>音频（同视频标签使用）</td><td></td></tr><tr><td>controls</td><td>控制栏</td><td></td></tr><tr><td>autoplay</td><td>视频自动播放</td><td></td></tr><tr><td>loop</td><td>循环播放</td></tr></tbody></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>行动</td><td>用于提交表单的程序（form标签中的属性）</td></tr><tr><td>method</td><td>方法</td><td>get、post（form标签中的属性）</td></tr><tr><td>readonly</td><td>只读的</td><td>设置输入框为只读模式</td></tr><tr><td>required</td><td>必须的</td><td>必填项</td></tr><tr><td><datalist><option></option></datalist></td><td>/</td><td>通过input中的list与其id关联</td></tr><tr><td>autofocus</td><td>自动 焦点</td><td>控件自动获取焦点</td></tr><tr><td>radio</td><td>单选控件</td><td></td></tr><tr><td>checkbox</td><td>复选框</td><td></td></tr><tr><td>checked</td><td>默认选中项</td><td></td></tr><tr><td>textarea</td><td>文本域</td></tr></tbody></table><h2 id="TDK"><a href="#TDK" class="headerlink" title="TDK"></a>TDK</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>keywords</td><td>关键词</td><td><meta name="keywords" content="It培训,前端培训"></td></tr><tr><td>description</td><td>网页描述</td></tr></tbody></table><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>solid</td><td>实线边框</td><td></td></tr><tr><td>dashed</td><td>虚线边框</td><td></td></tr><tr><td>dotted</td><td>点线边框</td></tr></tbody></table><h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>overflow:hidden</td><td></td><td>超出部分隐藏</td></tr><tr><td>display</td><td>隐藏：none、显示：block</td><td>隐藏元素 不占 位置</td></tr><tr><td>visibility:   hidden</td><td></td><td>隐藏元素 占 位置</td></tr></tbody></table><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>::before</td><td>在。。之前</td><td></td></tr><tr><td>::after</td><td>在。。之后</td><td></td></tr><tr><td>content</td><td>内容</td><td>伪元素必须有content，另外默认是行内元素</td></tr><tr><td>:first-letter</td><td>第一-字母</td><td>选中首字母(例：p:first-letter{color:   red;})</td></tr><tr><td>:last-child{}</td><td></td><td>:last-child{}</td></tr><tr><td>:nth-child(){}</td><td></td><td>:nth-child(2n){}</td></tr></tbody></table><h2 id="H5新增布局标签"><a href="#H5新增布局标签" class="headerlink" title="H5新增布局标签"></a>H5新增布局标签</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>nav</td><td></td><td></td></tr><tr><td>header</td><td></td><td></td></tr><tr><td>footer</td><td></td><td></td></tr><tr><td>article</td><td>文章区域</td><td></td></tr><tr><td>section</td><td>区域,块</td></tr></tbody></table><h2 id="背景相关"><a href="#背景相关" class="headerlink" title="背景相关"></a>背景相关</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>opacity:0~1</td><td>不透明</td><td>设置背景颜色的透明度</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>cursor:pointer</td><td>设置鼠标模式：小手</td><td></td></tr><tr><td>italic</td><td>倾斜</td><td>用于font-style，使字体倾斜</td></tr><tr><td>overflow：hidden</td><td>解决盒子塌陷</td><td>其他办法：给父盒子设置边框、浮动、绝对定位</td></tr><tr><td>float</td><td>浮动</td><td>3种清除浮动：overflow：hidden、clear、伪元素+clear</td></tr><tr><td>vertical-align</td><td>垂直居中</td><td>行内块元素都有vertical-align（middle）</td></tr><tr><td>nth-child(5)       nth-child(5n)      first-child      last-child</td><td>结构伪类选择器</td><td>nth-child(even)    nth-child(ood)</td></tr><tr><td>[属性] {}</td><td>属性选择器</td><td></td></tr><tr><td>box-sizing:border-box</td><td>设置盒子实际尺寸</td><td>无视border、padding</td></tr><tr><td>!important</td><td>重要的</td><td>设置样式优先级</td></tr><tr><td>placeholder</td><td>文本框的默认值属性</td><td></td></tr><tr><td>charset</td><td>meta里面 控制编码的属性</td><td></td></tr><tr><td>aglin</td><td>对齐方式</td><td></td></tr><tr><td>text-indent</td><td>首行缩进</td><td></td></tr><tr><td>target</td><td>目标</td><td></td></tr><tr><td>text-decoration</td><td>《a》  去掉下划线</td><td></td></tr><tr><td>underline</td><td>下划线</td><td></td></tr><tr><td>hover</td><td>鼠标悬浮</td><td></td></tr><tr><td>focus</td><td>焦点</td><td></td></tr><tr><td>white-space</td><td>元素中的空白</td><td></td></tr><tr><td>overflow</td><td>溢出</td><td></td></tr><tr><td>scroll</td><td>卷形物</td><td></td></tr><tr><td>transparent</td><td>透明的</td><td></td></tr><tr><td>multiple</td><td>下拉框多选 属性</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>white-space:   nowrap;      overflow: hidden;      text-overflow: ellipsis;      width:210px;</td><td></td></tr></tbody></table><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>通常让width写百分比</td><td>例：winth:100%</td><td>需要在mate中设置:</td></tr></tbody></table><h2 id="伸缩布局-弹性布局"><a href="#伸缩布局-弹性布局" class="headerlink" title="伸缩布局 + 弹性布局"></a>伸缩布局 + 弹性布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>display: flex;</td><td></td><td>需要设置父盒子为弹性布局</td></tr><tr><td>flex-direction:</td><td>设置主轴方向</td><td>flex-direction:   row  ·    row-reverse ·  column ·  column-reverse</td></tr><tr><td>justify-content:</td><td>设置在主轴的对齐</td><td>justify-content:   flex-start(默认值) · flex-end · center ·    space-between ·space-around</td></tr><tr><td>align-items</td><td>侧轴的对齐方式</td><td>align-items:   flex-start · flex-end · center · baseline · stretch(默认值)</td></tr><tr><td>flex-wrap</td><td>设置元素是否换行显示</td><td>flex-wrap: nowrap ·   wrap</td></tr><tr><td>align-content</td><td>元素换行后的对齐方式</td><td>align-content:   flex-start· flex-end · center· space-between · space-around ·stretch(默认对齐方式)</td></tr><tr><td>flex:   <number>; /<em> default 0 </em>/</number></td><td>子元素的伸缩比</td><td>属性定义子项目平均分配剩余空间，该子项目占多少份</td></tr><tr><td>order:1</td><td>设置子元素的排序方式</td><td>数值越小，排列越靠前，默认为0。</td></tr><tr><td>align-self</td><td>子元素自己的对齐方式</td><td>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果父元素没有，则等同于stretch。</td></tr></tbody></table><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>通过媒体查询+样式层叠改变页面样式</td><td></td></tr></tbody></table><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>@media</td><td>媒体</td><td>@media only screen   and (width: 320px) and (height: 568px) {html{font-size: 16px;}}</td></tr><tr><td>all</td><td>所有的设备</td><td></td></tr><tr><td>print</td><td>打印设备</td><td></td></tr><tr><td>screen</td><td>电脑、平板、手机</td><td></td></tr><tr><td>orientation:   portrait</td><td>竖屏</td><td></td></tr><tr><td>orientation:   landscape</td><td>横屏</td><td></td></tr><tr><td>only</td><td></td><td>指定某个特定的媒体类型, 可以省略</td></tr><tr><td>and</td><td></td><td>可以将多个媒体特性链接到一块,相当于且</td></tr><tr><td>not</td><td></td><td>排除某个媒体特性 相当于非,可以省略</td></tr></tbody></table><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="过度"><a href="#过度" class="headerlink" title="过度"></a>过度</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>transition-property:   all;</td><td>过渡-性质</td><td>设置哪些属性有动画效果,连写必填</td></tr><tr><td>transition-duration:   1s;</td><td>过渡-持续</td><td>设置动画完成时间,连写必填</td></tr><tr><td>transition-delay:   1s;</td><td>过渡-延期</td><td>设置动画延时执行时间(可以设置)</td></tr><tr><td>transition-timing-function:linear</td><td>过渡-定时-功能</td><td>设置动画速度类型</td></tr></tbody></table><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>translate(x,y)</td><td>位移</td><td>transform:   translate(100px, 200px) //设置1个值 就是水平</td></tr><tr><td>rotate(angle)</td><td>旋转</td><td></td></tr><tr><td>transform-origin</td><td>变换-起源、原点</td><td>改变旋转点，例：transform-origin:   100px 100px;（top left）</td></tr><tr><td>scale(x,y)</td><td>缩放</td><td>transform: scale(0,   0); //值代表倍数，元素缩小：0-1</td></tr><tr><td>skew(x-angle,y-angle)</td><td>倾斜</td></tr></tbody></table><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>translateX(n)、translateY(n)、translateZ(n)</td><td>位移</td><td></td></tr><tr><td>rotateX()、rotateY()、rotateZ()</td><td>旋转</td><td></td></tr><tr><td>scaleX()、scaleY()</td><td>缩放</td><td></td></tr><tr><td>skewX()、skewY()</td><td>倾斜</td><td></td></tr><tr><td>perspective</td><td>透视</td><td>800-1000</td></tr><tr><td>transform-style:   preserve-3d</td><td>转换成3D</td></tr></tbody></table><h2 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>关键帧</td><td>定义动画</td></tr><tr><td>animation-name</td><td>动画-名称</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>动画-持续时间</td><td>规定动画完成一个周期所花费的时间。</td></tr><tr><td>animation-timing-function</td><td>动画-定时-功能</td><td>规定动画的速度曲线。默认是   “ease”。</td></tr><tr><td>animation-delay</td><td>动画-延迟</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>动画-迭代-计数</td><td>规定动画被播放的次数。默认是 1。还有   infinite</td></tr><tr><td>animation-direction</td><td>动画-方向</td><td>动画是否在下一周期逆向地播放。默认是   “normal”，alternate逆播放</td></tr><tr><td>animation-play-state</td><td>动画-播放-状态</td><td>规定动画是否正在运行或暂停。默认是   “running”。还有“paused”</td></tr><tr><td>animation-fill-mode</td><td>动画-填充-模式</td><td>规定动画结束后状态，保持 forwards   回到起始 backwards</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS&quot;&gt;&lt;/a&gt;HTML+CSS&lt;/h1&gt;&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="html、css" scheme="/categories/html%E3%80%81css/"/>
    
    
      <category term="html、css" scheme="/tags/html%E3%80%81css/"/>
    
  </entry>
  
  <entry>
    <title>ajax + jsonp</title>
    <link href="/2019/05/09/ajax%20+%20jsonp/"/>
    <id>/2019/05/09/ajax + jsonp/</id>
    <published>2019-05-09T03:33:47.197Z</published>
    <updated>2019-05-09T03:33:43.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>“JavaScript 对我们而已能力有限”，我们目前所了解到的 Web 所提供的 API 都只停留在“单机游戏”的阶段。</p><p>在此之前，我们可以通过以下几种方式让浏览器发出对服务端的请求，获得服务端的数据：</p><ul><li>地址栏输入地址，回车，刷新</li><li>特定元素的 href 或 src 属性</li><li>表单提交</li></ul><p>这些方案都是我们无法通过或者很难通过代码的方式进行编程（对服务端发出请求并且接受服务端返回的响应），<strong>如果我们可以通过 JavaScript 直接发送网络请求，那么 Web 的可能就会更多，随之能够实现的功能也会更多，至少不再是只能开发“单机游戏”。</strong></p><blockquote><p>对 XXX 进行编程指的就是用代码的方式操作它。</p></blockquote><h3 id="Google-Suggest"><a href="#Google-Suggest" class="headerlink" title="Google Suggest"></a>Google Suggest</h3><p>AJAX（Asynchronous JavaScript and XML），最早出现在 2005 年的 <a href="http://google-suggest.tumblr.com/" target="_blank" rel="noopener">Google Suggest</a>，是在浏览器端进行网络编程（发送请求、接收响应）的技术方案，它使我们可以通过 JavaScript 直接获取服务端最新的内容而不必重新加载页面。让 Web 更能接近桌面应用的用户体验。</p><h3 id="AJAX-Asynchronous-Javascript-And-XML"><a href="#AJAX-Asynchronous-Javascript-And-XML" class="headerlink" title="AJAX (Asynchronous Javascript And XML)"></a>AJAX (Asynchronous Javascript And XML)</h3><p>说白了，<strong>AJAX 就是浏览器提供的一套 API，可以通过 JavaScript 调用，从而实现通过代码控制请求与响应。实现通过 JavaScript 进行网络编程。</strong></p><p>至于 <strong>XML</strong>：最早在客户端与服务端之间传递数据时所采用的数据格式就是 XML。</p><blockquote><p>能力不够 API 凑。</p></blockquote><h3 id="应用场景总结"><a href="#应用场景总结" class="headerlink" title="应用场景总结"></a>应用场景总结</h3><p>对于每一个未知的技术，我们在了解了过后第一反应就是在什么情况下用？</p><ul><li>按需获取数据</li><li>对用户数据校验</li><li>自动更新页面内容</li><li>提升用户体验，无刷新的体验</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>AJAX API 中核心提供的是一个 <code>XMLHttpRequest</code> 类型，所有的 AJAX 操作都需要使用到这个类型。</p><p>使用 AJAX 的过程可以类比平常我们访问网页过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 xhr 的 responseText 获取到响应的响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：涉及到 AJAX 操作的页面不能使用文件协议访问（文件的方式访问）</p></blockquote><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><p>由于 <code>readystatechange</code> 事件是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被触发多次，所以我们有必要了解每一个状态值代表的含义：</p><table><thead><tr><th>readyState</th><th>状态描述</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用，建立了连接。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td></tr><tr><td>3</td><td>LOADING</td><td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>响应体下载完成，可以直接使用 <code>responseText</code>。</td></tr></tbody></table><h4 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=&gt;start: UNSENT</span><br><span class="line">o1=&gt;operation: OPENED</span><br><span class="line">o2=&gt;operation: HEADERS_RECEIVED</span><br><span class="line">o3=&gt;operation: LOADING</span><br><span class="line">e=&gt;end: DONE</span><br><span class="line"></span><br><span class="line">s(right)-&gt;o1(right)-&gt;o2(right)-&gt;o3(right)-&gt;e</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=&gt;start: 初始化</span><br><span class="line">o1=&gt;operation: 建立连接</span><br><span class="line">o2=&gt;operation: 接收到响应头</span><br><span class="line">o3=&gt;operation: 响应体加载中</span><br><span class="line">e=&gt;end: 加载完成</span><br><span class="line"></span><br><span class="line">s(right)-&gt;o1(right)-&gt;o2(right)-&gt;o3(right)-&gt;e</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="comment">// 初始化 请求代理对象</span></span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// open 方法已经调用，建立一个与服务端特定端口的连接</span></span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">this</span>.readyState) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="comment">// =&gt; 2</span></span><br><span class="line">      <span class="comment">// 已经接受到了响应报文的响应头</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 可以拿到头</span></span><br><span class="line">      <span class="comment">// console.log(this.getAllResponseHeaders())</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'server'</span>))</span><br><span class="line">      <span class="comment">// 但是还没有拿到体</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="comment">// =&gt; 3</span></span><br><span class="line">      <span class="comment">// 正在下载响应报文的响应体，有可能响应体为空，也有可能不完整</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在这里处理响应体不保险（不可靠）</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="comment">// =&gt; 4</span></span><br><span class="line">      <span class="comment">// 一切 OK （整个响应报文已经完整下载下来了）</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这里处理响应体</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 <code>4</code> 时，执行响应的后续逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 后续逻辑......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遵循-HTTP"><a href="#遵循-HTTP" class="headerlink" title="遵循 HTTP"></a>遵循 HTTP</h3><p>本质上 XMLHttpRequest 就是 JavaScript 在 Web 平台中发送 HTTP 请求的手段，所以我们发送出去的请求任然是 HTTP 请求，同样符合 HTTP 约定的格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求报文的请求行</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line"><span class="comment">// 设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line"><span class="comment">// 设置请求体</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取响应状态码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.status)</span><br><span class="line">    <span class="comment">// 获取响应状态描述</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText)</span><br><span class="line">    <span class="comment">// 获取响应头信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'Content-Type'</span>)) <span class="comment">// 指定响应头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAllResponseHeaders()) <span class="comment">// 全部响应头</span></span><br><span class="line">    <span class="comment">// 获取响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) <span class="comment">// 文本形式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseXML) <span class="comment">// XML 形式，了解即可不用了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li></ul></blockquote><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><blockquote><p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 <code>?</code> 参数传递。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// GET 请求传递参数通常使用的是问号传参</span></span><br><span class="line"><span class="comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/delete?id=1'</span>)</span><br><span class="line"><span class="comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span><br></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><blockquote><p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// open 方法的第一个参数的作用就是设置请求的 method</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/add'</span>)</span><br><span class="line"><span class="comment">// 设置请求头中的 Content-Type 为 application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"><span class="comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递</span></span><br><span class="line"><span class="comment">// 格式：name=zhangsan&amp;age=18</span></span><br><span class="line">xhr.send(<span class="string">'name=zhangsan&amp;age=18'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p><blockquote><ul><li>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等待</li><li>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</li></ul></blockquote><p><code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认为 <code>true</code>，如果需要同步执行可以通过传递 <code>false</code> 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 默认第三个参数为 true 意味着采用异步方式执行</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的代码最后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request done'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><p>如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 同步方式</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// // 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发</span></span><br><span class="line"><span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="comment">//   if (this.readyState === 4) &#123;</span></span><br><span class="line"><span class="comment">//     // 这里的代码最后执行</span></span><br><span class="line"><span class="comment">//     console.log('request done')</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 因为 send 方法执行完成 响应已经下载完成</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><p>演示同步异步差异。</p><p>所以一定在发送请求 <code>send()</code> 之前注册 <code>readystatechange</code>（不管同步或者异步）</p><ul><li>为了让这个事件可以更加可靠（一定触发），一定是先注册</li></ul><blockquote><p>了解同步模式即可，切记不要使用同步模式。</p></blockquote><p>至此，我们已经大致了解了 AJAX 所的提供的基本 API 。</p><h3 id="XMLHttpRequest-API-总结"><a href="#XMLHttpRequest-API-总结" class="headerlink" title="XMLHttpRequest API 总结"></a>XMLHttpRequest API 总结</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><code>readyState</code></li><li><code>status</code></li><li><code>responseText</code></li><li><code>responseXML</code></li><li><code>onreadystatechange</code></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><code>open(method, url, async)</code></li><li><code>send(requsetBody)</code></li><li><code>setRequestHeader(key, value)</code></li><li><code>getResponseHeader(key)</code></li></ul><h3 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h3><blockquote><p>提问：如果希望服务端返回一个复杂数据，该如何处理？</p></blockquote><p>关心的问题就是服务端发出何种格式的数据，这种格式如何在客户端用 JavaScript 解析。</p><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><p>一种数据描述手段</p><p>老掉牙的东西，简单演示一下，不在这里浪费时间，基本现在的项目不用了。</p><p>淘汰的原因：数据冗余太多</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>也是一种数据描述手段，类似于 JavaScript 字面量方式</p><p>服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p><blockquote><p><strong>注意</strong>：</p><ul><li>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们与 AJAX 之间有必然的联系，它们只是数据协议罢了。</li><li>不管服务端是采用 XML 还是采用 JSON 本质上都是将数据返回给客户端。</li><li>服务端应该根据响应内容的格式设置一个合理的 Content-Type。</li></ul></blockquote><h3 id="留言板案例"><a href="#留言板案例" class="headerlink" title="留言板案例"></a>留言板案例</h3><ol><li>页面结构</li><li>数据接口</li><li>AJAX 实现</li></ol><h3 id="处理响应数据渲染"><a href="#处理响应数据渲染" class="headerlink" title="处理响应数据渲染"></a>处理响应数据渲染</h3><p>客户端中拿到请求的数据过后最常见的就是把这些数据呈现到界面上。</p><p>如果数据结构简单，可以直接通过字符串操作（拼接）的方式处理，但是如果数据过于复杂，字符串拼接维护成本太大，就不推荐了。</p><blockquote><p>模板引擎：</p><ul><li>artTemplate：<a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">https://aui.github.io/art-template/</a></li></ul></blockquote><p>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到HTML字符串中。</p><h3 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h3><p>缓存问题指的是：多次 AJAX GET 请求同一个 URL 得到的结果是相同的，目前绝大多数浏览器已经没有这个问题了，只有早期的 IE 浏览器（&lt;= IE 9）任然存在这个问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  <span class="comment">// =&gt; 每次得到的结果都是相同的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="URL-加戳"><a href="#URL-加戳" class="headerlink" title="URL 加戳"></a>URL 加戳</h5><p>这个办法的核心就是让浏览器认为每次请求的地址都是不同的。</p><blockquote><p>不同的 querystring 会被浏览器认为是不同的地址，浏览器会忽略客户端缓存。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time?t='</span> + <span class="built_in">Date</span>.now())</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  <span class="comment">// =&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务端设置响应头"><a href="#服务端设置响应头" class="headerlink" title="*服务端设置响应头"></a>*服务端设置响应头</h5><p>由服务端通过 HTTP 响应报文中的响应头告知客户端浏览器不要缓存当前地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/time'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.set(<span class="string">'Cache-Control'</span>, <span class="string">'no-cache'</span>)</span><br><span class="line">  res.set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>)</span><br><span class="line">  res.set(<span class="string">'Expires'</span>, <span class="string">'-1'</span>)</span><br><span class="line">  res.send(<span class="built_in">Date</span>.now().toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>了解即可，更多的情况下前端开发中还是通过加戳的方式解决此问题，因为在前端可控范围之内。</p><h3 id="兼容方案"><a href="#兼容方案" class="headerlink" title="兼容方案"></a>兼容方案</h3><p>XMLHttpRequest 在老版本浏览器（IE5/6）中有兼容问题，可以通过另外一种方式代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line"><span class="comment">// xhr 的成员相同</span></span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="AJAX-请求封装"><a href="#AJAX-请求封装" class="headerlink" title="AJAX 请求封装"></a>AJAX 请求封装</h3><blockquote><p>函数就可以理解为一个想要做的事情，函数体中约定了这件事情做的过程，直到调用时才开始工作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送一个 AJAX 请求</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125;   url    请求地址</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125;   method 请求方法</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;   params 请求参数</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; done   请求完成过后需要做的事情（委托/回调）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url, method, params, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 统一转换为大写便于后续判断</span></span><br><span class="line">  method = method.toUpperCase()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象形式的参数转换为 urlencoded 格式</span></span><br><span class="line">  <span class="keyword">var</span> pairs = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">    pairs.push(key + <span class="string">'='</span> + params[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> querystring = pairs.join(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line"></span><br><span class="line">  xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试通过 JSON 格式解析响应体</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      done(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      done(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是 GET 请求就设置 URL 地址 问号参数</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    url += <span class="string">'?'</span> + querystring</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.open(method, url)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是 POST 请求就设置请求体</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    data = querystring</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'/getsomthing'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'post'</span>, <span class="string">'/addsomthing'</span>, &#123; <span class="attr">foo</span>: <span class="string">'posted data'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>委托</strong>：将函数作为参数传递就像是将一个事情交给别人，这就是委托的概念</p></blockquote><h3 id="jQuery-中的-AJAX"><a href="#jQuery-中的-AJAX" class="headerlink" title="jQuery 中的 AJAX"></a>jQuery 中的 AJAX</h3><p>jQuery 中有一套专门针对 AJAX 的封装，功能十分完善，经常使用，需要着重注意。</p><blockquote><p>一个你会用我会用他会用到的点，就一定有一个已经封装好的</p></blockquote><blockquote><p>参考：</p><ul><li><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/</a></li><li><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></li></ul></blockquote><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'/time'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  data: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before send'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request completed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>常用选项参数介绍：</p><ul><li>url：请求地址</li><li>type：请求方法，默认为 <code>get</code></li><li>dataType：服务端响应数据类型</li><li>contentType：请求体内容类型，默认 <code>application/x-www-form-urlencoded</code></li><li>data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</li><li>timeout：请求超时时间</li><li>beforeSend：请求发起之前触发</li><li>success：请求成功之后触发（响应状态码 200）</li><li>error：请求失败触发</li><li>complete：请求完成触发（不管成功与否）</li></ul><h4 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h4><p>GET 请求快捷方法</p><p><code>$.get(url, data, callback)</code></p><h4 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h4><p>POST 请求快捷方法</p><p><code>$.post(url, data, callback)</code></p><h4 id="全局事件处理"><a href="#全局事件处理" class="headerlink" title="全局事件处理"></a>全局事件处理</h4><blockquote><p><a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.ajaxComplete()</span><br><span class="line"><span class="comment">//当Ajax请求完成后注册一个回调函数。这是一个 AjaxEvent。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxError()</span><br><span class="line"><span class="comment">//Ajax请求出错时注册一个回调处理函数，这是一个 Ajax Event。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxSend()</span><br><span class="line"><span class="comment">//在Ajax请求发送之前绑定一个要执行的函数，这是一个 Ajax Event.</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxStart()</span><br><span class="line"><span class="comment">//在AJAX 请求刚开始时执行一个处理函数。 这是一个 Ajax Event.</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxStop()</span><br><span class="line"><span class="comment">//在AJAX 请求完成时执行一个处理函数。 这是一个 Ajax Event。</span></span><br><span class="line">Ajax &gt; 全局 Ajax 事件处理器</span><br><span class="line">.ajaxSuccess()</span><br><span class="line"><span class="comment">//绑定一个函数当 Ajax 请求成功完成时执行。 这是一个Ajax Event.</span></span><br></pre></td></tr></table></figure><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>Axios 是目前应用最为广泛的 AJAX 封装库，相对于 jQuery 的优势在于功能能强劲，职责更单一，后期专门有介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/time'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>*扩展：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p></blockquote><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>同源策略是浏览器的一种安全策略，所谓同源是指<strong>域名</strong>，<strong>协议</strong>，<strong>端口</strong>完全相同，只有同源的地址才可以相互通过 AJAX 的方式请求。</p><p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为<strong>跨域请求</strong></p><p>什么是同源？例如：<a href="http://www.example.com/detail.html" target="_blank" rel="noopener">http://www.example.com/detail.html</a> 与一下地址对比</p><table><thead><tr><th>对比地址</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://api.example.com/detail.html" target="_blank" rel="noopener">http://api.example.com/detail.html</a></td><td>不同源</td><td>域名不同</td></tr><tr><td><a href="https://www.example.com/detail.html" target="_blank" rel="noopener">https://www.example.com/detail.html</a></td><td>不同源</td><td>协议不同</td></tr><tr><td><a href="http://www.example.com:8080/detail.html" target="_blank" rel="noopener">http://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口不同</td></tr><tr><td><a href="http://api.example.com:8080/detail.html" target="_blank" rel="noopener">http://api.example.com:8080/detail.html</a></td><td>不同源</td><td>域名、端口不同</td></tr><tr><td><a href="https://api.example.com/detail.html" target="_blank" rel="noopener">https://api.example.com/detail.html</a></td><td>不同源</td><td>协议、域名不同</td></tr><tr><td><a href="https://www.example.com:8080/detail.html" target="_blank" rel="noopener">https://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口、协议不同</td></tr><tr><td><a href="http://www.example.com/other.html" target="_blank" rel="noopener">http://www.example.com/other.html</a></td><td>同源</td><td>只是目录不同</td></tr></tbody></table><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>现代化的 Web 应用中肯定会有不同源的现象，所以必然要解决这个问题，从而实现跨域请求。</p><blockquote><p>参考：<a href="http://rickgray.me/solutions-to-cross-domain-in-browser" target="_blank" rel="noopener">http://rickgray.me/solutions-to-cross-domain-in-browser</a></p></blockquote><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p><strong>JSON</strong> with <strong>P</strong>adding，是一种借助于 <code>script</code> 标签发送跨域请求的技巧。</p><p>其原理就是在客户端借助 <code>script</code> 标签请求服务端的一个地址，服务端的这个地址返回一段带有调用某个全局函数调用的 JavaScript 脚本（而非一段 HTML），将原本需要返回给客户端的数据通过参数传递给这个函数，函数中就可以得到原本服务端想要返回的数据。</p><p>以后绝大多数情况都是采用 JSONP 的手段完成不同源地址之间的跨域请求</p><p>客户端 <a href="http://www.zce.me/users-list.html" target="_blank" rel="noopener">http://www.zce.me/users-list.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://api.zce.me/users?callback=foo"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端 <a href="http://api.zce.me/users?callback=foo" target="_blank" rel="noopener">http://api.zce.me/users?callback=foo</a> 返回的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo([<span class="string">'我'</span>, <span class="string">'是'</span>, <span class="string">'你'</span>, <span class="string">'原'</span>, <span class="string">'本'</span>, <span class="string">'需'</span>, <span class="string">'要'</span>, <span class="string">'直'</span>, <span class="string">'接'</span>, <span class="string">'返'</span>, <span class="string">'回'</span>, <span class="string">'的'</span>, <span class="string">'数'</span>, <span class="string">'据'</span>])</span><br></pre></td></tr></table></figure><p><strong>总结一下</strong>：由于 XMLHttpRequest 无法发送不同源地址之间的跨域请求，所以我们必须要另寻他法，script 这种方案就是我们最终选择的方式，我们把这种方式称之为 JSONP，如果你不了解原理，先记住怎么用，多用一段时间再来看原理。</p><p>问题：</p><ol><li>JSONP 需要服务端配合，服务端按照客户端的要求返回一段 JavaScript 调用客户端的函数</li><li>只能发送 GET 请求</li></ol><blockquote><p>注意：JSONP 用的是 script 标签，更 AJAX 提供的 XMLHttpRequest 没有任何关系！！！</p></blockquote><h5 id="jQuery-中对-JSONP-的支持"><a href="#jQuery-中对-JSONP-的支持" class="headerlink" title="jQuery 中对 JSONP 的支持"></a>jQuery 中对 JSONP 的支持</h5><p>jQuery 中使用 JSONP 就是将 dataType 设置为 jsonp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'https://douban.uieee.com/v2/comming_soon'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  data: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before send'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request completed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Axios 由于设计原因不支持 JSONP</p></blockquote><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>Cross Origin Resource Share，跨域资源共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/time'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// // 允许任意源访问，不安全</span></span><br><span class="line">  <span class="comment">// res.set('Access-Control-Allow-Origin', '*')</span></span><br><span class="line">  <span class="comment">// 允许指定源访问</span></span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://zce.me'</span>)</span><br><span class="line">  res.send(<span class="built_in">Date</span>.now().toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种方案无需客户端作出任何变化（客户端不用改代码），只是在被请求的服务端响应的时候添加一个 <code>Access-Control-Allow-Origin</code> 的响应头，表示这个资源是否允许指定域请求。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p></blockquote><h2 id="XMLHttpRequest-2-0"><a href="#XMLHttpRequest-2-0" class="headerlink" title="XMLHttpRequest 2.0"></a>XMLHttpRequest 2.0</h2><blockquote><p>暂作了解，无需着重看待</p></blockquote><p>HTML5 中对 XMLHttpRequest 类型全面升级，更易用，更强大</p><h3 id="response-属性"><a href="#response-属性" class="headerlink" title="response 属性"></a>response 属性</h3><h3 id="onload-onprogress"><a href="#onload-onprogress" class="headerlink" title="onload / onprogress"></a>onload / onprogress</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/time'</span>)</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// onload readyState =&gt; 4</span></span><br><span class="line">  <span class="comment">// 只在请求完成时触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// onprogress readyState =&gt; 3</span></span><br><span class="line">  <span class="comment">// 只在请求进行中触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>以前 AJAX 操作只能提交字符串，现在可以提交 <strong>二进制</strong> 的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当用户在文件域中选择了一个文件过后</span></span><br><span class="line">  $(<span class="string">'#input_avatar'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.files[0] =&gt; 拿到选中的文件对象</span></span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 希望展示这个文件有两种方式：</span></span><br><span class="line">    <span class="comment">// 1. FileReader</span></span><br><span class="line">    <span class="comment">// 2. URL.createObjectURL()</span></span><br><span class="line">    <span class="comment">//    给用户选择的文件对象创建一个临时 URL，用这个 URL 呈现图片</span></span><br><span class="line">    <span class="keyword">var</span> url = URL.createObjectURL(file)</span><br><span class="line">    $(<span class="string">'#avatar_preview'</span>).attr(<span class="string">'src'</span>, url).hide().fadeIn()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 文件域有个 change 事件，在用户选择完文件后触发</span></span><br><span class="line">  <span class="comment">// 2. 文件域有个 accept 属性，用于设置文件域的文件类型限制</span></span><br><span class="line">  <span class="comment">// 3. 文件域可以同 multiple 设置多选</span></span><br><span class="line">  <span class="comment">// 4. JS 中可以通过 input dom 的 files 属性访问到选中的文件，数组</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#btn_save'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#input_avatar'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      alert(<span class="string">'必须选择文件'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTML5 中提供了一个 专门用于提交复杂数据 AJAX 情况的类型 FormData</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData()</span><br><span class="line">    data.append(<span class="string">'name'</span>, $(<span class="string">'#input_name'</span>).val())</span><br><span class="line">    data.append(<span class="string">'bio'</span>, $(<span class="string">'#input_bio'</span>).val())</span><br><span class="line">    data.append(<span class="string">'avatar'</span>, file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'/api/member-add'</span>)</span><br><span class="line">    <span class="comment">// send 除了可以接受 string 类型的参数 也可接受 FormData 类型</span></span><br><span class="line">    xhr.responseType = <span class="string">'json'</span></span><br><span class="line">    xhr.send(data)</span><br><span class="line">    xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.response)</span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">'/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="responseType"><a href="#responseType" class="headerlink" title="responseType"></a>responseType</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般情况下 服务端都是会以 JSON 字符串的格式返回响应内容</span></span><br><span class="line"><span class="comment">// response 会有几种情况，默认请情况下 response === responseText</span></span><br><span class="line"><span class="comment">// 如果想要拿到对象结果，可以通过 responseType 设置</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(<span class="string">'GET'</span>, <span class="string">'/page'</span>)</span><br><span class="line">      xhr.responseType = <span class="string">'document'</span></span><br><span class="line">      xhr.send()</span><br><span class="line">      xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.response.querySelector(<span class="string">'h1'</span>))</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>异步上传文件</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/ajax/index.asp</a></li><li><a href="https://aui.github.io/art-template/zh-cn" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
      <category term="ajax、jsonp" scheme="/categories/ajax%E3%80%81jsonp/"/>
    
    
      <category term="ajax、jsonp" scheme="/tags/ajax%E3%80%81jsonp/"/>
    
  </entry>
  
  <entry>
    <title>cookie、session、WebStorage</title>
    <link href="/2019/05/09/cookie%E3%80%81session%E3%80%81WebStorage/"/>
    <id>/2019/05/09/cookie、session、WebStorage/</id>
    <published>2019-05-09T03:32:47.110Z</published>
    <updated>2019-05-09T03:32:43.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p><strong>缺点：</strong></p><ul><li>大小受限，每个cookie有4k限制</li><li>用户可以操作（禁用）cookie，使功能受限</li><li>安全性较低</li><li>每次访问都要传送cookie给服务器，浪费带宽</li><li>cookie数据有路径（path）的概念，限制其只属于某个路径下</li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>存储在服务器端、与cookie配合使用</p><h2 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h2><blockquote><p>H5新技术</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>特点：</strong></p><ul><li>存储空间更大：单个item数据大小可以达到5MB</li><li>节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取使用</li><li>只能存储字符串类型</li></ul><p><strong>种类：</strong></p><ul><li>localStorage（本地存储）   不会自动清除</li><li>sessionStorage（会话存储）    浏览器关闭 自动清除</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.localStorage</span><br><span class="line"><span class="built_in">window</span>.sessionStorage</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setItem (key, value)<span class="comment">//保存数据，以键值对的方式储存信息。</span></span><br><span class="line">getItem (key) <span class="comment">//获取数据，将键值传入，即可获取到对应的value值。</span></span><br><span class="line">removeItem (key) <span class="comment">//删除单个数据，根据键值移除对应的信息。</span></span><br><span class="line">clear () <span class="comment">//删除所有的数据</span></span><br><span class="line">key (index) <span class="comment">//获取某个索引的key</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'islogin'</span>,<span class="string">'true'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cookies&quot;&gt;&lt;a href=&quot;#Cookies&quot; class=&quot;headerlink&quot; title=&quot;Cookies&quot;&gt;&lt;/a&gt;Cookies&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小受限，每个cookie有4k
      
    
    </summary>
    
      <category term="本地存储" scheme="/categories/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="本地存储" scheme="/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git - 基础</title>
    <link href="/2019/05/09/Git%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Git - 基础/</id>
    <published>2019-05-09T03:31:16.682Z</published>
    <updated>2019-05-09T03:31:09.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p><p>Git有什么特点？简单来说就是：高端大气上档次！</p><p>那什么是版本控制系统？</p><p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去。</p><p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p><p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p><p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p><table><thead><tr><th>版本</th><th>文件名</th><th>用户</th><th>说明</th><th>日期</th></tr></thead><tbody><tr><td>1</td><td>service.doc</td><td>张三</td><td>删除了软件服务条款5</td><td>7/12 10:38</td></tr><tr><td>2</td><td>service.doc</td><td>张三</td><td>增加了License人数限制</td><td>7/12 18:09</td></tr><tr><td>3</td><td>service.doc</td><td>李四</td><td>财务部门调整了合同金额</td><td>7/13 9:51</td></tr><tr><td>4</td><td>service.doc</td><td>张三</td><td>延长了免费升级周期</td><td>7/14 15:17</td></tr></tbody></table><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h2><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384860735706fd4c70aa2ce24b45a8ade85109b0222b000/0" alt="central-repo"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013848607465969378d7e6d5e6452d8161cf472f835523000/0" alt="distributed-repo"></p><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p><p>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h3><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="noopener">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907061183ba2a452af9de4a8a8640339239bc3e5e000/0" alt="install-git-by-xcode"></p><p>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><h3 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h3><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后<strong>按默认选项安装即可</strong>。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907073134ef6feff559cf4ce3a2c5c588d2831c0a000/0" alt="install-git-on-windows"></p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><p>当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的（不要手动修改）</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><h3 id="将文件上传到Git"><a href="#将文件上传到Git" class="headerlink" title="将文件上传到Git"></a>将文件上传到Git</h3><blockquote><p>一定要放到<code>learngit</code>目录下（子目录也行）</p></blockquote><p><strong>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add 文件名（+后缀）</span><br></pre></td></tr></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p><strong>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容</p><p><code>git commit</code>命令执行成功后会告诉你：</p><p>​        1 file changed<code>：1个文件被改动</code></p><p>​        <code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><hr><h2 id="常用命令整理"><a href="#常用命令整理" class="headerlink" title="常用命令整理"></a>常用命令整理</h2><p>.gitignore   →   该文件内容中制定的文件/文件夹不会被git push</p><table><thead><tr><th>初始化</th><th></th><th></th></tr></thead><tbody><tr><td>设置用户名</td><td>git config –global user.name ‘我的名字’</td><td></td></tr><tr><td>设置用户邮箱</td><td>git config –global user.email ‘我的邮箱’</td></tr></tbody></table><table><thead><tr><th>仓库相关</th><th></th><th></th></tr></thead><tbody><tr><td>拉取(本地有仓库)</td><td>git pull 仓库地址 分知名</td><td>git pull 仓库地址 master</td></tr><tr><td>克隆(本地无仓库)</td><td>git clone 仓库地址 *项目名</td><td></td></tr><tr><td>提交</td><td>git push 仓库地址 分支名</td><td>git push 仓库地址 master</td></tr><tr><td>远程仓库别名</td><td>git remote add 别名 仓库地址</td><td></td></tr><tr><td>初始化仓库</td><td>git init –bare</td><td>本地仓库需要初始化</td></tr><tr><td>注：提交前，先拉取</td><td>克隆前init、克隆后 git add + git commit</td></tr></tbody></table><table><thead><tr><th>本地相关</th><th></th><th></th></tr></thead><tbody><tr><td>初始化仓库</td><td>git init</td><td></td></tr><tr><td>提交暂存区</td><td>git add *   //     git add 文件路径</td><td></td></tr><tr><td>本地回滚</td><td>git checkout 文件路径</td><td>从暂存区恢复文件</td></tr><tr><td>提交仓库</td><td>git commit -m’备注’</td><td></td></tr><tr><td>本地回滚</td><td>git reset –hard 版本号</td><td>从仓库中恢复文件</td></tr><tr><td>查询文件状态</td><td>git status</td><td></td></tr><tr><td>查看当前+之前版本</td><td>git log</td><td></td></tr><tr><td>查看版本操作记录</td><td>git reflog</td></tr></tbody></table><table><thead><tr><th>分支</th><th></th><th></th></tr></thead><tbody><tr><td>查看分支</td><td>git branch</td><td></td></tr><tr><td>创建分支</td><td>git branch 分支名称</td><td></td></tr><tr><td>切换分支</td><td>git checkout 分支名称</td><td>创建+切换分支 git checkout -b *</td></tr><tr><td>删除分支</td><td>git branch -d 分支名称</td><td></td></tr><tr><td>合并分支</td><td>git merge 分支名称</td><td>当前分支合并所选分支(注 同文件冲突)</td></tr></tbody></table><h2 id="创建SSH公钥"><a href="#创建SSH公钥" class="headerlink" title="创建SSH公钥"></a>创建SSH公钥</h2><ul><li>ssh-keygen -t rsa    一路回车</li><li>公钥：C:\Users\nova.ssh/id_rsa.pub</li><li>将公钥添加到github中</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git是什么&quot;&gt;&lt;a href=&quot;#Git是什么&quot; class=&quot;headerlink&quot; title=&quot;Git是什么&quot;&gt;&lt;/a&gt;Git是什么&lt;/h2&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统（没有之一）。&lt;/p&gt;
&lt;p&gt;Git有什么特点？简单来说就是：高
      
    
    </summary>
    
      <category term="Git" scheme="/categories/Git/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JS高级笔记</title>
    <link href="/2019/05/09/JS%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>/2019/05/09/JS高级笔记/</id>
    <published>2019-05-09T03:30:19.347Z</published>
    <updated>2019-05-09T03:30:16.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS高级笔记"><a href="#JS高级笔记" class="headerlink" title="JS高级笔记"></a>JS高级笔记</h1><h2 id="一、前面知识点复习"><a href="#一、前面知识点复习" class="headerlink" title="一、前面知识点复习"></a>一、前面知识点复习</h2><ol><li><p>创建相同结构对象是，为避免代码重复，可以使用函数对代码进行优化，也就是创建构造函数</p><ul><li><p>什么是构造函数</p><ul><li>当一个函数通过new的方式调用，我们就将这个函数称为构造函数构</li><li>造函数的作用：创建对象</li><li>使用规范<ul><li>首字母大写(建议)</li><li>调用前加new </li></ul></li></ul></li></ul></li></ol><ul><li><p>this的使用</p><ul><li>this在方法内使用才有意义，指向函数调用者</li><li>特殊场景，当使用new调用函数时，函数内的this指向实例对象<br>​</li></ul></li><li><p>new帮我们做了什么？<br>​</p></li><li><p>使用构造函数时需要注意的点 （如果给构造函数设置返回值</p><ul><li><p>返回值为基本数据类型：会被忽略</p></li><li><p>如果返回值为复杂数据类型，这个值会替换掉原有的对象</p></li></ul></li></ul><ol start="2"><li>思考：属性通常都是不同的，但是由于方法表示功能，功能通常是相同的，所以方法保存为多个相同的函数是没有意义的，并且浪费空间，如何将多个实例的方法值保存为一个共有的函数</li></ol><h2 id="二、关于原型对象相关概念"><a href="#二、关于原型对象相关概念" class="headerlink" title="二、关于原型对象相关概念"></a>二、关于原型对象相关概念</h2><ol><li><p>每个函数都有一个(自带)属性：<strong>prototype</strong> 原型<br>a. 这个属性是一个对象，作用就是用于进行共有属性的保存使用的<br>b. <strong>prototype</strong>属性称为原型属性，也称为原型对象<br>c. 直接给这个对象设置方法即可，设置后所有的实例对象均可使用这个方法<br>​</p><p>此时已经可以回答上面问题——可以把公用的属性或者方法放到原型对象里，通过这样原型链查找规则可以共享，节约内容，提高性能<br>​</p></li><li><p>为什么这个方法没有设置给实例对象本身，但是实例对象也可以使用呢？</p><ul><li>通过观察我们发现，每个实例对象都具有一个自带的属性 <strong>__proto__</strong> ，这个属性中具有设置给 <strong>构造函数.prototype</strong>的方法</li><li>通过测试<code>构造函数.prototype === 实例对象.__proto__</code>结果为<strong>true</strong>可得出结论—— 两个属性指针指向的是同一个对象  </li></ul></li><li><p>基本访问规则：当我们使用一个对象的属性时，如果自身有，就使用，如果没有，则查找 <strong>__proto__</strong> 中，如果有，就使用。<br>​</p></li><li><p>什么是原型链: 对象属性的查找方式：对象自身存在实力属性时，使用，否则，查找__proto__属性，这种查找方式称为原型链。原型链是用来描述实例对象与原型对象之间关系的一种方式。</p></li></ol><ol start="5"><li><p>其他小知识点</p><ul><li><p>如何检测数据类型<br><strong>typeof</strong>，但是只能检测基本数据类型，实际上typeof在检测数据类型时，如果数据为一个指针，会认为是object</p></li><li><p>其他常用的类型检测方式：</p><ul><li><p><code>Array.isArray()</code> —— 检测数据类型是否为数组，ie9以下不支持</p></li><li><p><code>instanceof</code> 需要前后两个操作数，前操作数为实例对象，后操作数为构造函数，如果实例对象是通过构造函数创建的，返回true，否则返回false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log([1,2,3] instanceof Array);    //true</span><br><span class="line">console.log(200 instanceof Array);        //false</span><br></pre></td></tr></table></figure></li><li><p><code>Object.prototype.toString.call()</code>   返回的结果为数据类型名:(固定用法，记住即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log(Object.prototype.toString.call(null));//&quot;[object Null]&quot;</span><br><span class="line">console.log(Object.prototype.toString.call([1,2,3]));//&quot;[object Array]&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>总结：以后需要检测实例对象和构造函数之间关系的时候，就使用  <strong>instanceof </strong> 就好了。</p></li></ol><h2 id="三、关于继承"><a href="#三、关于继承" class="headerlink" title="三、关于继承"></a>三、关于继承</h2><ol><li><p>继承的作用：为了更好的数据共享</p></li><li><p>继承含义：多个构造函数之间的关系</p></li><li><p><strong>实现方式：</strong></p><h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><ul><li><p>设置需要被继承的构造函数Animal</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃各种吃的"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>再设置一个猫咪构造函数<br>已经存在的构造函数Animal中具有了一些属性和方法，这些属性与方法是Cat构造函数需要的<br>没有必要再书写一遍了，可以使用继承的方式获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数可以通过函数名()的方式调用，也可以通过函数的call方法调用</span></span><br><span class="line">    <span class="comment">//通过call的方式，修改Animal中的this指向为当前Cat的this，并设置参数</span></span><br><span class="line"><span class="comment">//call方法的参数1表示函数内的this指向</span></span><br><span class="line"><span class="comment">//call方法的后面的其他参数表示真正的实参</span></span><br><span class="line">    Animal.call(<span class="keyword">this</span>,name,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>上面这种继承方法称为借用构造函数效果：可以继承实例属性，但是原型中的方法无法继承​</code></pre><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃各种吃的"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承的核心代码：</span></span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal(<span class="string">"jack"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置被覆盖的constructor属性</span></span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line">Cat.prototype.shangShu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"猫咪可以爬树"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> Cat(<span class="string">"red"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c1);</span><br><span class="line"><span class="built_in">console</span>.log(c1.name);</span><br><span class="line"><span class="built_in">console</span>.log(c1.age);</span><br><span class="line"><span class="built_in">console</span>.log(c1.color);</span><br><span class="line">c1.shangShu();</span><br><span class="line">c1.eat();</span><br></pre></td></tr></table></figure></li><li><p>使用原型继承的方式：</p><ul><li>好处：可以继承原型中的方法</li><li>缺点：实例属性虽然有，但是无法传参（跟没有一样）<br>​</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3></li></ul><p>   ​    使用前面两种继承方式是发现各有优缺点，所以将两种方式集合使用<br>   ​    这种结合使用的方式，称为组合继承，组合继承是最常用的一种继承方式</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃各种吃的"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,age,color</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//使用借用构造函数的方式继承：</span></span><br><span class="line">     Animal.call(<span class="keyword">this</span>,name,age);</span><br><span class="line">     <span class="keyword">this</span>.color = color;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//原型继承的核心代码：</span></span><br><span class="line"> <span class="comment">//使用组合继承方式后，在构造函数体中就设置了实例属性，此处不需要传参</span></span><br><span class="line"> Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"> <span class="comment">//设置被覆盖的constructor属性</span></span><br><span class="line"> Cat.prototype.constructor = Cat;</span><br><span class="line"> Cat.prototype.shangShu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"猫咪可以爬树"</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c1 = <span class="keyword">new</span> Cat(<span class="string">"rose"</span>,<span class="number">20</span>,<span class="string">"red"</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(c1);</span><br><span class="line"> <span class="built_in">console</span>.log(c1.name);</span><br><span class="line"> <span class="built_in">console</span>.log(c1.age);</span><br><span class="line"> <span class="built_in">console</span>.log(c1.color);</span><br><span class="line"> c1.shangShu();</span><br><span class="line"> c1.eat();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(c1.constructor);</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ol start="4"><li><p>对象之间的继承</p><p>对象的拷贝（需要掌握）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    gender:<span class="string">"男"</span>,</span><br><span class="line">    children:&#123;</span><br><span class="line">        daughter:<span class="string">"lili"</span>,</span><br><span class="line">        son:&#123;</span><br><span class="line">            name:<span class="string">"tom"</span>,</span><br><span class="line">            age:<span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"呵呵，我是人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    obj2[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p><strong>思考：由于obj中的某个属性也是对象形式，进行拷贝操作时使用赋值运行导致两者相同，如何完全拷贝对象内的所有属性(包括属性的属性，达到完全无关的目的)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//currentObj表示哪个元素要被拷贝</span></span><br><span class="line"><span class="comment">//targetObj表示要拷贝到哪个对象中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">currentObj,targetObj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> currentObj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> currentObj[k] != <span class="string">"object"</span> || currentObj[k] === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//基本拷贝方式只适用于基本数据类型</span></span><br><span class="line">            targetObj[k] = currentObj[k];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果进入else，说明currentObj[k]属性值为复杂数据类型,</span></span><br><span class="line">   <span class="comment">//想要复制复杂数据类型需要使用deepCopy函数</span></span><br><span class="line">            <span class="comment">//要求:两个参数都必须为对象形式，由于targetObj[k]为undefined，需要先赋值为对象再使用</span></span><br><span class="line">            <span class="comment">//完善功能：复杂数据类型值有可能是对象，也有可能是数组，需要进行判断后再设置</span></span><br><span class="line">            targetObj[k] = currentObj[k] <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">            deepCopy(currentObj[k],targetObj[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">deepCopy(obj,obj2);</span><br></pre></td></tr></table></figure></li></ol><h2 id="四、函数进阶"><a href="#四、函数进阶" class="headerlink" title="四、函数进阶"></a>四、函数进阶</h2><p>函数的概念：函数是由事件驱动的或在调用时执行的可重复使用的代码块。</p><h3 id="1、arguments-对象"><a href="#1、arguments-对象" class="headerlink" title="1、arguments 对象"></a>1、arguments 对象</h3><ul><li>arguments是伪数组(类数组)对象：没有数组方法 </li><li>使用方式：只能再函数内使用，表示当前函数的实参列表</li><li>作用：由于形参的设置时固定的，如果用户传入的实参更多时，只能使用arguments访问</li></ul><p>思考：伪数组如何使用数组方法</p><p>​    因为不是通过Array创建的，所以无法访问Array.prototype<br>如何使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">//下面两个函数是同一个函数</span></span><br><span class="line">    <span class="comment">//[1,2,3].__proto__.push;</span></span><br><span class="line">    <span class="comment">//Array.prototype.push;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过call借用数组push方法</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面这个代码跟上面的代码功能相同，但是多创建了一个实例</span></span><br><span class="line">    <span class="comment">//[].push.call(arguments,200);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//console.log(arguments);</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="2、函数的方法call和apply"><a href="#2、函数的方法call和apply" class="headerlink" title="2、函数的方法call和apply"></a>2、函数的方法call和apply</h3><p>2.1.    <strong>call()</strong> 方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">num,str</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是fun"</span>,num,str,<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun.call(&#123;<span class="attr">name</span>:<span class="string">"jack"</span>&#125;,<span class="number">200</span>,<span class="string">"call调用"</span>);</span><br></pre></td></tr></table></figure><p>2.2. <strong>apply()</strong> 方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1 用于设置函数的this指向   参数2 需要传入的实参值，需要为数组形式(就一个);</span></span><br><span class="line">fun.apply(&#123;<span class="attr">name</span>:<span class="string">"rose"</span>&#125;,[<span class="number">300</span>,<span class="string">"apply调用"</span>]);</span><br></pre></td></tr></table></figure><p>call与apply的区别：call传入实参时需要单个传入，apply传入实参时需要为数组结构</p><p>函数代码的执行方式有几种？</p><ul><li>普通调用</li><li>call()</li><li>apply()</li><li>事件驱动<br>​</li></ul><h3 id="3、函数的方法-bind-方法-使用"><a href="#3、函数的方法-bind-方法-使用" class="headerlink" title="3、函数的方法 bind 方法 使用"></a>3、函数的方法 bind 方法 使用</h3><ol><li><p>基本使用：设置this指向后，返回当前函数的副本  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resultFun = fun.bind(&#123;<span class="attr">name</span>:<span class="string">"jack"</span>&#125;);<span class="comment">//不会执行函数，this指向修改了</span></span><br><span class="line">resultFun();</span><br></pre></td></tr></table></figure></li><li><p>与上一组 <figure class="highlight plain"><figcaption><span>的区别：call和apply 调用后，函数会立刻执行，bind调用后，函数不会立刻执行，而是返回副本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 实参传递方式</span><br><span class="line"></span><br><span class="line">   ```javascript</span><br><span class="line">   //如果使用bind方法时设置了实参值，则返回的函数副本对应实参位置永远是这个值了</span><br><span class="line">   var resultFun = fun.bind(&#123;name:&quot;jack&quot;&#125;,100);</span><br><span class="line">   resultFun();</span><br><span class="line">   resultFun();</span><br></pre></td></tr></table></figure></p><p>对函数副本进行调用时传入的实参会向后顺延</p><p>例如：例如：resultFun这个函数在设置时num被设置为100，则本次传入的实参值对应的是形参str</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultFun(<span class="string">"我是bind返回的函数"</span>);</span><br></pre></td></tr></table></figure><p>注意点：    <strong>bind方法在ie9以下不支持</strong>，感兴趣可以自己查mdn 找解决方法</p><p> ​        </p></li></ol><h2 id="五、关于闭包"><a href="#五、关于闭包" class="headerlink" title="五、关于闭包"></a>五、关于闭包</h2><h3 id="5-1-作用域"><a href="#5-1-作用域" class="headerlink" title="5.1 作用域"></a>5.1 作用域</h3><ul><li>开始学习闭包前，先简单回顾一下作用域</li><li>作用域，可分为<code>局部作用域</code>和<code>全局作用域</code>。</li><li>作用域内变量查找规则：会先从本作用域中去找，若没找到则向上级作用域中去找，以此类推就构成了作用域链儿。<br>​</li></ul><h3 id="5-2-关于闭包"><a href="#5-2-关于闭包" class="headerlink" title="5.2 关于闭包"></a>5.2 关于闭包</h3><ul><li><p>关于闭包定义，这里引用  <strong>阮一峰</strong>  博客中的一段话作为解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//各种专业文献上的"闭包"（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成"定义在一个函数内部的函数"。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义在一个函数内部并引用父级作用域变量的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包，延展变量的作用范围</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getNum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;,</span><br><span class="line">        setNum: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">            num = n;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = fn();</span><br><span class="line"><span class="comment">// 在全局作用域中，操作了fn作用域中的变量num</span></span><br><span class="line">obj.setNum(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getNum());</span><br></pre></td></tr></table></figure></li><li><p>闭包用途</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中(延展变量的使用范围)<br>​</li></ul></li></ul><ul><li><p>使用闭包的优缺点</p><p>（优点不理解可以将上面闭包用途当做优点来回答）</p><ul><li>优点：<ul><li>逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑而单独编写额外逻辑。 </li><li>方便调用上下文的局部变量。 （什么事上下文：上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用）</li><li>加强封装性，是第2点的延伸，可以达到对变量的保护作用。 </li></ul></li><li>缺点<ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br>​</li></ul></li></ul></li><li><p>如何解决闭包内存泄漏问题   手动释放内存：</p><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cars</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Benz"</span>;  </span><br><span class="line">    <span class="keyword">this</span>.color = [<span class="string">"white"</span>,<span class="string">"black"</span>];  </span><br><span class="line">&#125;  </span><br><span class="line">Cars.prototype.sayColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> outer = <span class="keyword">this</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> outer.color  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Cars();  </span><br><span class="line"><span class="built_in">console</span>.log(instance.sayColor()())</span><br></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cars</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Benz"</span>;  </span><br><span class="line">    <span class="keyword">this</span>.color = [<span class="string">"white"</span>,<span class="string">"black"</span>];  </span><br><span class="line">&#125;  </span><br><span class="line">Cars.prototype.sayColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> outerColor = <span class="keyword">this</span>.color; <span class="comment">//保存一个副本到变量中  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> outerColor; <span class="comment">//应用这个副本  </span></span><br><span class="line">    &#125;;  </span><br><span class="line">    outColor = <span class="literal">null</span>; <span class="comment">//释放内存  </span></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Cars();  </span><br><span class="line"><span class="built_in">console</span>.log(instance.sayColor()())</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>闭包的使用场景</p><ul><li><p><strong>采用函数引用方式的setTimeout调用。</strong></p><p>原生的setTimeout有一个缺陷，你传递的第一个函数不能带参数。即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(func(parma),<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这样的语句是不生效的（不过在不同浏览器中有不同的错误，总之都无法达到预期效果）</p><p>这时，我们就可以用闭包来实现这个效果了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = func(<span class="number">1</span>)</span><br><span class="line">setTimeout(f, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用闭包可以在JavaScript中模拟块级作用域</strong> ECMAScript6标准之前的JavaScript本身没有块级作用域的概念;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    alert(i); <span class="comment">//导致一个错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>闭包可以用于在对象中创建私有变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包可以用于在对象中创建私有变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">    <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特权方法,调用私有方法、函数</span></span><br><span class="line">    <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        privateVariable++;</span><br><span class="line">        <span class="keyword">return</span> privateFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>将函数关联到对象的实例方法</strong></p></li><li><p><strong>封装相关的功能集</strong><br>​</p><p>最后两个可以[参考<a href="http://www.jb51.net/article/110706.htm" target="_blank" rel="noopener">http://www.jb51.net/article/110706.htm</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS高级笔记&quot;&gt;&lt;a href=&quot;#JS高级笔记&quot; class=&quot;headerlink&quot; title=&quot;JS高级笔记&quot;&gt;&lt;/a&gt;JS高级笔记&lt;/h1&gt;&lt;h2 id=&quot;一、前面知识点复习&quot;&gt;&lt;a href=&quot;#一、前面知识点复习&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>node + 插件 + 包 + 模块</title>
    <link href="/2019/05/09/node%20+%20%E6%8F%92%E4%BB%B6%20+%20%E5%8C%85%20+%20%E6%A8%A1%E5%9D%97/"/>
    <id>/2019/05/09/node + 插件 + 包 + 模块/</id>
    <published>2019-05-09T03:28:32.690Z</published>
    <updated>2019-05-09T03:28:29.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><blockquote><p>JavaScript运行环境                   除了node安装以外，其余插件安装均在cmd中进行</p></blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p><p>特点：事件驱动、非阻塞 IO（异步） 模型、单线程、跨平台</p><ul><li>能解析和执行 JavaScript 代码（严格来说应该是 ECMAScript 代码）</li><li>构建于 Chrome V8 JavaScript 引擎之上</li><li>为 JavaScript 提供了服务端编程的能力</li><li>从技术角度它的能力和 Java、PHP、Python、Perl、Ruby 等服务端技术类似</li></ul><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装node环境</span><br><span class="line">执行*.exe安装文件</span><br><span class="line">    检测是否安装成功    node -v</span><br><span class="line"></span><br><span class="line">安装cnpm(包管理工具)   (需要完善)</span><br><span class="line">    npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">    检测是否安装成功  cnpm - v</span><br></pre></td></tr></table></figure><p><strong>升级</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装n</span><br><span class="line">$ npm install -g n</span><br><span class="line"># 升级到最新稳定版</span><br><span class="line">$ n stable </span><br><span class="line"># 升级到最新版</span><br><span class="line">$ n latest</span><br><span class="line"># 升级到定制版</span><br><span class="line">$ n v7.10.0</span><br><span class="line"># 切换使用版本</span><br><span class="line">$ n 7.10.0 (ENTER)</span><br></pre></td></tr></table></figure><h1 id="npm-包"><a href="#npm-包" class="headerlink" title="npm(包)"></a>npm(包)</h1><ul><li>npm<code>全称</code>Node Package Manager`(node 包管理器)，它的诞生是为了解决 Node 中第三方包共享的问题。</li><li><code>npm</code> 不需要单独安装。在安装Node的时候，会连带一起安装<code>npm</code>。</li></ul><ol><li>本地安装：安装到当前项目中</li><li>全局安装：安装到电脑系统中，各个项目都可以调用</li></ol><p>常用命令:</p><ul><li><p>查看 <code>npm</code> 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>升级 <code>npm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npm --global</span><br><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure></li><li><p>初始化 <code>package.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>安装第三方包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install 包名</span><br><span class="line">npm install 包名 包名</span><br><span class="line">npm install 包名@版本号</span><br><span class="line"></span><br><span class="line">npm install --production       // 只下载dependencies依赖包</span><br><span class="line">npm install                   // devDependencies和 dependencies依赖包 都下载</span><br></pre></td></tr></table></figure></li><li><p>从缓存目录安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看缓存目录</span></span><br><span class="line">npm config get cache</span><br><span class="line"><span class="comment"># 从缓存目录下载包</span></span><br><span class="line"><span class="comment"># --cache-min 后面跟的是时间，单位是分钟，超过这个时间才去服务器下载</span></span><br><span class="line">npm install --cache-min 9999999 &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">main：制订入口文件</span><br><span class="line"></span><br><span class="line">dependencies：依赖        </span><br><span class="line">//~1.2.2 代表安装1.2.x  以上的版本</span><br><span class="line">//^1.2.2 代表安装1.x.x  以上的版本</span><br><span class="line"></span><br><span class="line">script：命令行</span><br><span class="line">"scripts": &#123;</span><br><span class="line">            "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">            "start": "node app.js",</span><br><span class="line">            "t": "dir c:\\"</span><br><span class="line">         &#125;</span><br><span class="line">         npm run t</span><br><span class="line"> npm run start</span><br><span class="line">         # 只有 start 可以简化调用</span><br><span class="line">          npm start</span><br></pre></td></tr></table></figure><p>—配置生产、开发环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "dev": "cross-env NODE_ENV=development nodemon app.js",</span><br><span class="line">    "start": "cross-env NODE_ENV=production nodemon app.js"</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">//设置环境变量后 可以通过nodemon 环境变量名(dev) 运行</span><br><span class="line">//注意看“cross-env”插件</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>node.js 第三方模块使用教程  (开发项目中的安装模块方法)</strong></p><blockquote><p>在使用第三方模块之前，需要在当前项目中建立一个 package.json 文件(不能包含中文)</p><p>方法：cmd中 输入npm init -y</p></blockquote><p><strong>模块的加载机制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Node.js 中的模块化遵守 CommonJS 规范，CommonJS 是模块化的一种规范，Node.js 中实现了这种规范。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 如果不是文件模块，也不是核心模块</span><br><span class="line">- node 会去 node_modules 目录中找（找跟你引用的名称一样的目录），例如这里 require(&apos;moment&apos;)</span><br><span class="line">- 如果在 node_modules 目录中找到 moment 目录，则找该目录下的 package.json 文件</span><br><span class="line">- 如果找到 package.json 文件，则找该文件中的 main 属性，拿到 main 指定的入口模块</span><br><span class="line">- 如果过程都找不到，node 则取上一级目录下找 node_modules 目录，规则同上</span><br><span class="line">- 如果一直找到代码文件的根路径还找不到，则报错</span><br></pre></td></tr></table></figure><h1 id="一般工具"><a href="#一般工具" class="headerlink" title="一般工具"></a>一般工具</h1><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><blockquote><p>压制代码、部署浏览器同步测试工具</p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  gulp -g</span><br><span class="line"></span><br><span class="line">检测是否安装成功:  gulp - v</span><br></pre></td></tr></table></figure><p><strong>本地环境搭建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">    在对应的工作目录下 按下 shift 选中在命令窗口中打开</span><br><span class="line">    </span><br><span class="line">安装插件</span><br><span class="line">    # 当前项目中安装gulp</span><br><span class="line">    cnpm install gulp --save-dev</span><br><span class="line">    # 压缩html的插件</span><br><span class="line">    cnpm install gulp-htmlmin --save-dev</span><br><span class="line">    # 压缩css的插件</span><br><span class="line">    cnpm install gulp-cssmin --save-dev</span><br><span class="line">    # 自动打开浏览器，并实时刷新插件(浏览器同步测试工具)</span><br><span class="line">    cnpm install browser-sync --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将gulpjs文件复制到项目根目录下</span><br><span class="line"></span><br><span class="line">自动化压缩和复制文件到发布目录dist</span><br><span class="line">    gulp build</span><br><span class="line">         </span><br><span class="line">开启测试用的服务器</span><br><span class="line">    gulp dev</span><br></pre></td></tr></table></figure><hr><h2 id="LESS"><a href="#LESS" class="headerlink" title="LESS"></a>LESS</h2><blockquote><p>CSS 预处理语言，增加了诸如变量、混合（mixin）、函数等功能</p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">运行cmd命令输入:</span><br><span class="line">    npm  install  less  -g</span><br><span class="line"></span><br><span class="line">验证less是否安装成功</span><br><span class="line">    lessc -v </span><br><span class="line"></span><br><span class="line">安装成功后新建一个less文件即可</span><br><span class="line">    *.less</span><br></pre></td></tr></table></figure><p><strong>将Less文件编译为CSS文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行cmd命令输入:</span><br><span class="line">      注意: 首先要通过cmd命令进入到当前less文件所在的文件夹目录中</span><br><span class="line">      编译less文件cmd命令:   lessc  要被编译的less文件  要编译为自定义CSS文件</span><br><span class="line">      例如:  lessc   index.less   index.css</span><br></pre></td></tr></table></figure><p><strong>开发工具配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webstorm自带less编译功能,实时编译</span><br><span class="line">webStorm: 配置快捷键方式进行编译</span><br><span class="line">       ◆ 文件  - &gt; 设置 - &gt; 工具 -&gt; file watchers  -&gt; 选择less文件点击编辑 -&gt; 取消实时编译选项</span><br><span class="line">       ◆ 文件  - &gt; 设置 -&gt;  快捷键 - &gt;  插件 - &gt; File watchers  -&gt; 点击右键添加键盘快捷键</span><br><span class="line">       </span><br><span class="line">Sublime安装插件: LESS2CSS    </span><br><span class="line">       安装编译插件:  ctral+shift+P  ---&gt; 在搜索栏中输入   LESS2CSS </span><br><span class="line">       </span><br><span class="line">VSCode需要安装插件:  Easy Less  安装成功后  Ctrl+s保存即可</span><br></pre></td></tr></table></figure><hr><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><blockquote><p>ECMAScript 6 降级处理        <a href="https://www.babeljs.cn/" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>步骤概述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">降级处理 babel 的使用步骤</span><br><span class="line">  1. 安装Node.js</span><br><span class="line">  2. 命令行中安装 babel</span><br><span class="line">  3. 配置文件 .babelrc</span><br><span class="line">  4. 运行</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  @babel/core @babel/cli @babel/preset-env</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">配置文件 .babelrc</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;presets&quot;: [&quot;@babel/preset-env&quot;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">在命令行中，运行</span><br><span class="line">        # 把转换的结果输出到指定的文件</span><br><span class="line">        babel index.js -o test.js</span><br><span class="line">        # 把转换的结果输出到指定的目录</span><br><span class="line">        babel src -d lib</span><br></pre></td></tr></table></figure><hr><h2 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h2><blockquote><p>简单服务器（文件更新后不需要刷新网页）        <a href="https://browsersync.io/" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure><hr><h2 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h2><blockquote><p>node服务器，关闭cdm后 服务器依然会运行        <a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i forever -g</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever start (node服务器入口文件 例 app.js)</span><br></pre></td></tr></table></figure><hr><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><blockquote><p>自动重启项目工程        <a href="https://nodemon.io/" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmd中用nodemon替换node 运行服务器程序：</span><br><span class="line">nodemon *</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">node app.js→nodemon app.js</span><br></pre></td></tr></table></figure><p><strong>其他类似模块</strong></p><p>forever，nodemon，node-dev</p><hr><h2 id="mime"><a href="#mime" class="headerlink" title="mime"></a>mime</h2><blockquote><p>根据后缀名生成 Content-Type值        <a href="https://github.com/broofa/node-mime" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mime</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const Mime = require(&apos;mime/Mime&apos;);</span><br><span class="line">Mime.getType(&apos;abc&apos;);</span><br></pre></td></tr></table></figure><hr><h2 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h2><blockquote><p>文件路径获取工具        <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i glob</span><br><span class="line"></span><br><span class="line"><span class="comment">//or 下载js文件</span></span><br></pre></td></tr></table></figure><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">"glob"</span>)</span><br><span class="line"></span><br><span class="line">glob(<span class="string">"**/*.js"</span>, options, <span class="function"><span class="keyword">function</span> (<span class="params">er, files</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mg = <span class="keyword">new</span> Glob(pattern, options, cb)</span><br></pre></td></tr></table></figure><hr><h2 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h2><blockquote><p>日期处理类库,用于解析、检验、操作、显示日期        <a href="http://momentjs.cn/" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&apos;dddd&apos;);                    // 星期一</span><br><span class="line">moment().format(&quot;MMM Do YY&quot;);               // 12月 10日 18</span><br><span class="line">moment().format(&apos;YYYY [escaped] YYYY&apos;);     // 2018 escaped 2018</span><br></pre></td></tr></table></figure><hr><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><blockquote><p>使用框架连接my sql数据库            <a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  port : <span class="number">3306</span></span><br><span class="line">  user     : <span class="string">'me'</span>,</span><br><span class="line">  password : <span class="string">'secret'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// error: 是否有错误</span></span><br><span class="line">  <span class="comment">// results: 查询的结果，数组。重要</span></span><br><span class="line">  <span class="comment">// fields: 字段信息</span></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p><strong>连接池</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用连接池的方式 建立连接</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'root'</span>,</span><br><span class="line">    database: <span class="string">'alishow'</span>,</span><br><span class="line">    connectionLimit: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出一个执行sql语句的方法</span></span><br><span class="line"><span class="built_in">module</span>.exports.query = <span class="function">(<span class="params">sql, params, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">        connection.query(sql, params, (err, results, feilds) =&gt; &#123;</span><br><span class="line">            callback(err, results, feilds)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="youch"><a href="#youch" class="headerlink" title="youch"></a>youch</h2><blockquote><p>node中的错误页面        <a href="https://github.com/poppinss/youch" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i youch</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置中间件 处理错误页面</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> youch = <span class="keyword">new</span> Youch(err, req)</span><br><span class="line">    youch.toHTML().then(<span class="function"><span class="params">html</span> =&gt;</span> res.end(html))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="morgan"><a href="#morgan" class="headerlink" title="morgan"></a>morgan</h2><blockquote><p>打印、生成请求日志        <a href="https://github.com/expressjs/morgan" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i morgan</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(log(<span class="string">'combined'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">app.use(log(<span class="string">'dev'</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><blockquote><p>解决mac、windows环境变量的兼容        <a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env -g</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据环境变量 运行对应的node app.js</span><br><span class="line">npm run 环境变量名     npm run dev</span><br></pre></td></tr></table></figure><hr><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h2 id="art-template"><a href="#art-template" class="headerlink" title="art-template"></a>art-template</h2><blockquote><p>用于循环数据，动态生成网站        <a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure><p><strong>基本语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 art-template</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line">        <span class="keyword">let</span> html = template(绝对路径, 数据对象);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> html = template(path.join(__dirname, <span class="string">'views/xx.html'</span>), &#123;</span><br><span class="line">          title: <span class="string">'这是数据'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//输出数据：(在html中 插入占位符) &#123;&#123; title &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件输出：</span></span><br><span class="line">        &#123;&#123;<span class="keyword">if</span> value&#125;&#125; </span><br><span class="line">            &lt;p&gt;&#123;&#123; value &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &#123;&#123;/i</span>f&#125;&#125;</span><br><span class="line"><span class="comment">//循环输出：</span></span><br><span class="line">&#123;&#123;each items&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line">          </span><br><span class="line"><span class="comment">//数据别名(防止名称冲突)</span></span><br><span class="line">&#123;&#123;each category data i&#125;&#125;</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line"><span class="comment">//在html页面中使用</span></span><br><span class="line">template(url(可以是*.html), &#123;key,value&#125;)</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span> ; i&lt;=<span class="number">10</span> ; i++)&#123; %&gt;</span><br><span class="line">&lt;li&gt;&lt;a href="#"&gt;&#123;&#123;i&#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//html字符串 转义符：#   or   @</span></span><br></pre></td></tr></table></figure><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他页面引入模板</span></span><br><span class="line">        &#123;&#123; extend <span class="string">'./_layout/layout.html'</span> &#125;&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//模板页面中挖坑：</span></span><br><span class="line">&#123;&#123; block <span class="string">'content'</span> &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他页面填充父模板的坑:</span></span><br><span class="line">        &#123;&#123; block <span class="string">'content'</span> &#125;&#125;</span><br><span class="line">        <span class="comment">//.....填充的内容</span></span><br><span class="line">        &#123;&#123; /block &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="在模板页中引用子模板"><a href="#在模板页中引用子模板" class="headerlink" title="在模板页中引用子模板"></a>在模板页中引用子模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;include <span class="string">'../includes/navbar.html'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 给 art-template 设置过滤器</span></span><br><span class="line">template.defaults.imports.dateFormat = <span class="function"><span class="keyword">function</span>(<span class="params">date, format</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moment(date).format(format);  <span class="comment">//利用moment处理日期数据 并返回</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="html页面使用"><a href="#html页面使用" class="headerlink" title="html页面使用"></a>html页面使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在页面中 引入模板引擎 .js文件后  写入&lt;script&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/html"</span> id=<span class="string">"javaaa"</span>&gt;</span><br><span class="line">        &#123;&#123; each msg&#125;&#125;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">                &lt;img src=<span class="string">"&#123;&#123; $value.img &#125;&#125;"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&#123;&#123; $value.uName &#125;&#125; 说：&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span&gt;&#123;&#123; $value.content &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">       &#123;&#123; /</span>each &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获取服务器返回的json数据、解析后给模板引擎赋值、然后生成页面解构</span></span><br><span class="line"><span class="regexp">    var aaa = JSON.parse(this.responseText)</span></span><br><span class="line"><span class="regexp">    let a = template('javaaa', &#123;msg: aaa&#125;)</span></span><br><span class="line"><span class="regexp">    $('ul').html(a)</span></span><br></pre></td></tr></table></figure><h4 id="修改语法界定符"><a href="#修改语法界定符" class="headerlink" title="修改语法界定符"></a>修改语法界定符</h4><blockquote><p>若与服务器的模板引擎发送冲突，则需要进行配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">template.defaults.rules[<span class="number">1</span>].test = <span class="regexp">/&#123;-([@#]?)[ \t]*(\/?)([\w\W]*?)[ \t]*-&#125;/</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 原始语法的界定符规则</span></span><br><span class="line"><span class="regexp">template.defaults.rules[0].test = /</span>&lt;!(#?)((?:==|=#|[=-])?)[ \t]*([\w\W]*?)[ \t]*(-?)!&gt;/;</span><br></pre></td></tr></table></figure><h4 id="传递变量"><a href="#传递变量" class="headerlink" title="传递变量"></a>传递变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量声明</span></span><br><span class="line">template.defaults.imports.log = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入变量</span></span><br><span class="line">&lt;%= $imports.log(<span class="string">'hello world'</span>) %&gt;</span><br></pre></td></tr></table></figure><p><strong>其他模板引擎</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- jade</span><br><span class="line">- ejs</span><br></pre></td></tr></table></figure><hr><h2 id="express-art-template"><a href="#express-art-template" class="headerlink" title="express-art-template"></a>express-art-template</h2><blockquote><p>与Express框架配合使用（基于art-template，其作用为 简化代码）</p><p><a href="https://github.com/aui/express-art-template" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template express-art-template</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认模板都放在views文件夹中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置html文件为模板</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// 设置模板交给谁去处理</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// render 方法默认会去项目的 views 目录中查找 index.html 文件</span></span><br><span class="line">  <span class="comment">// render 方法的本质就是将读取文件和模板引擎渲染这件事儿给封装起来了</span></span><br><span class="line">  <span class="comment">// 默认模板都是html文件，这里的.html可以省略</span></span><br><span class="line">  res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    title: <span class="string">'hello world'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果希望修改默认的 <code>views</code> 视图渲染存储目录，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 是一个特定标识，不能乱写</span></span><br><span class="line"><span class="comment">// 第二个参数给定一个目录路径作为默认的视图查找目录</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure><p>#### </p><h1 id="web开发框架"><a href="#web开发框架" class="headerlink" title="web开发框架"></a>web开发框架</h1><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><blockquote><p>可以设置中间件来响应 HTTP 请求。<br>定义了路由表用于执行不同的 HTTP 请求动作。<br>可以通过向模板传递参数来动态渲染 HTML页面</p></blockquote><p><a href="http://expressjs.com/" target="_blank" rel="noopener">官网</a>、<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">中文官网</a>、<a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Github</a></p><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    调用 express() 得到一个 app        类似于 http.createServer()</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//   设置请求对应的处理函数     当客户端以 GET 方法请求 / 的时候就会调用第二个参数：请求处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//   监听端口号，启动 Web 服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'app listening on port 3000!'</span>))</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><blockquote><p><a href="http://expressjs.com/en/starter/basic-routing.html" target="_blank" rel="noopener">参考文档</a></p></blockquote><p>路由（Routing）是由一个 URL（或者叫路径标识）和一个特定的 HTTP 方法（GET、POST 等）组成的，涉及到应用如何处理响应客户端请求。</p><p>每一个路由都可以有一个或者多个处理器函数，当匹配到路由时，这个/些函数将被执行。</p><p>路由的定义的结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀可选</span></span><br><span class="line">app.use(<span class="string">'前缀'</span>,<span class="string">'路由'</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>app</code> 是 express 实例</li><li><code>METHOD</code> 是一个 <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" target="_blank" rel="noopener">HTTP 请求方法</a></li><li><code>PATH</code> 是服务端路径（定位标识）</li><li><code>HANDLER</code> 是当路由匹配到时需要执行的处理函数</li></ul><p>下面是一些基本示例。</p><ul><li>处理 get 请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当你以 GET 方法请求 / 的时候，执行对应的处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>处理 post 请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当你以 POST 方法请求 / 的时候，指定对应的处理函数</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Got a POST request'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由的参考文档 <a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="noopener">routing guide</a>.</p><p><strong>设置路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在路由配置上面设置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">module</span>.exports = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于以下方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="comment">//路由内容  例处理get、post请求</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><strong>多路由文件处理</strong></p><blockquote><p> 下载、使用glob模块</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line"></span><br><span class="line">glob(<span class="string">'./routers/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">er, files</span>) </span>&#123;</span><br><span class="line">    files.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> routers = path.join(__dirname, item)</span><br><span class="line">        app.use(<span class="built_in">require</span>(routers))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h4><p><a href="http://expressjs.com/en/starter/static-files.html" target="_blank" rel="noopener">参考文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通处理方式</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//带前缀的静态资源</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(path.join(__dirname, <span class="string">'./public'</span>)))</span><br></pre></td></tr></table></figure><p>注：css/images等文件夹不能直接被处理，需要同意放在一个公共的文件夹中(例 public)</p><h4 id="解析-post-请求体"><a href="#解析-post-请求体" class="headerlink" title="解析 post 请求体"></a>解析 post 请求体</h4><blockquote><ul><li>express 已经内置 body-parser</li><li>express 通过 express.urlencoded 方法包装了 body-parser</li></ul></blockquote><p>新版的Express 已经内置了！！</p><p><strong>配置+使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置</span></span><br><span class="line">app.use(express.urlencoded())</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">app.use(express.json())</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">*.body     <span class="comment">//例  req.body</span></span><br></pre></td></tr></table></figure><p><strong>body-parser - 独立模块</strong></p><p>参考文档：</p><ul><li><a href="https://github.com/expressjs/body-parser" target="_blank" rel="noopener">GitHub - body-parser</a></li></ul><ul><li>在 Express 中没有内置获取表单 POST 请求体的 API</li><li>这里我们需要使用一个第三方包：<code>body-parser</code></li></ul><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在 req 请求对象上会多出来一个属性：body</span></span><br><span class="line"><span class="comment">// 也就是说你就可以直接通过 req.body 来获取表单 POST 请求体数据了</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过 req.body 来获取表单 POST 请求体数据</span></span><br><span class="line">app.post(<span class="string">'/publish'</span>, (req, res) =&gt; &#123;</span><br><span class="line">   res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>302跳转</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express中新增了一个redirect ，设置状态码 302 ，并设置响应头 location</span></span><br><span class="line"></span><br><span class="line">res.redirect(<span class="string">'/admin'</span>);</span><br></pre></td></tr></table></figure><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><blockquote><ul><li>中间件是 Express 的最大特色，也是最重要的一个设计</li><li>一个 Express 应用，就是由许许多多的中间件来完成的</li><li>中间件函数是能够访问请求对象、响应对象，以及应用程序的请求/响应循环中的下一个中间件函数</li><li>中间件函数可以执行以下任何任务<ul><li>执行任何代码</li><li>修改 request 或者 response 响应对象</li><li>结束请求响应周期</li><li>调用下一个中间件</li></ul></li></ul></blockquote><p><strong>return next 后   程序会去找挂在路由的js文件   去执行写了4个形参的函数，并去执行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用中间件 处理404  500页面</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">404</span>)</span><br><span class="line">    res.send(<span class="string">'404 页面'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.status(<span class="number">500</span>)</span><br><span class="line">    res.send(<span class="string">'500 页面'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四个参数，缺一不可</span></span><br><span class="line"><span class="comment">// 这里配置好以后，接下来你就可以在其他的路由处理函数中，遇到错误的使用，调用 next(传入错误对象)</span></span><br><span class="line"><span class="comment">// 那么，这个带有四个参数的中间件就会被调用</span></span><br><span class="line"><span class="comment">// 该中间件的第一个参数就是你 next(错误对象) 调用所传递的那个错误对象</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 简单一点，在网站系统中增加一个异常管理功能</span></span><br><span class="line">  <span class="comment">//    数据表，异常表</span></span><br><span class="line">  <span class="comment">//    报错时间，报错文件，具体的报错信息，哪个路由，哪个方法....</span></span><br><span class="line">  <span class="comment">//    发送邮件或短信给开发人员，给管理员</span></span><br><span class="line">  res.status(<span class="number">500</span>).send(&#123;</span><br><span class="line">    statusCode: <span class="number">500</span>,</span><br><span class="line">    message: <span class="string">'Internal Server Error'</span>,</span><br><span class="line">    error: err.message</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="cookie处理"><a href="#cookie处理" class="headerlink" title="cookie处理"></a>cookie处理</h3><blockquote><p>配置cookie的key、value            需要安装cookie-parser        <a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Cookies that have not been signed</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Cookies: '</span>, req.cookies)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cookies that have been signed</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Signed Cookies: '</span>, req.signedCookies)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p><strong>存cookie数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取cookie数据</span></span><br><span class="line"><span class="comment">//cookies是对象</span></span><br><span class="line"><span class="keyword">let</span> cookie = req.cookies[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储cookie</span></span><br><span class="line">req.cookie(key,value)   <span class="comment">//value 是json字符串</span></span><br><span class="line">req.cookie(&#123;key,value&#125;，&#123;过期时间,v&#125;,&#123;???&#125;)   <span class="comment">//value 是json字符串</span></span><br><span class="line">res.cookie(config.cookie.key, <span class="built_in">JSON</span>.stringify(cookieJson),&#123;expires&#125;)</span><br><span class="line">                                 </span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line">req.clearCookie(key)</span><br></pre></td></tr></table></figure><p><strong>其他参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expires:过期时间</span><br></pre></td></tr></table></figure><blockquote><p>JS下的cookie操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie =</span><br></pre></td></tr></table></figure><h3 id="session处理"><a href="#session处理" class="headerlink" title="session处理"></a>session处理</h3><blockquote><p>需要安装第三方框架：express-session        <a href="https://github.com/expressjs/session" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123; </span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>, </span><br><span class="line">  cookie: &#123; <span class="attr">maxAge</span>: <span class="number">60</span>*<span class="number">1000</span> &#125;,   <span class="comment">//cookie过期时间</span></span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,    <span class="comment">//!!配合express-mysql-session 使用</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>name: 设置 cookie 中，保存 session 的字段名称，默认为 connect.sid 。</li><li>secret: 这个 string 对 sessionID 对应的cookie进行签名，并放在 cookie 中。</li><li>cookie: 设置存放 session id 的 cookie 的相关选项，默认为 (default: { path: ‘/’, httpOnly: true, maxAge: null })</li><li>resave: 强制session保存到session store中。即使在请求中这个session没有被修改。</li><li>saveUninitialized: 强制没有“初始化”的session保存到storage中，没有初始化的session指的是：刚被创建没有被修改（第一次请求是否生成 sessionid）</li></ul><p><strong>简单使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// req.session 是一个对象</span></span><br><span class="line"><span class="comment">// 当配置好 session 之后，可以使用 session 保持登录的状态</span></span><br><span class="line">req.session.isLogin = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他"路由"，可以判断登录的状态</span></span><br><span class="line"><span class="keyword">if</span> (!req.session.isLogin) &#123;</span><br><span class="line">  <span class="comment">// 如果状态不存在则没有登录，跳转到首页</span></span><br><span class="line">  <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出的时候要，销毁session</span></span><br><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><p><strong>中间件方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在程序入口（app.js）中设置一个中间件，用于判断用户是否已经登陆</span></span><br><span class="line"><span class="comment">//用户若访问/admin下的页面，则会经过这个中间件   需要在路由之前注册中间件</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/admin'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//获取当前访问的url ( req.originalUrl )</span></span><br><span class="line">  <span class="keyword">const</span> url = req.originalUrl</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/admin/login'</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 next 会往后找与当前请求匹配的路由处理函数</span></span><br><span class="line">    <span class="keyword">return</span> next()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验登录状态   session</span></span><br><span class="line">  <span class="keyword">const</span> sessionUser = req.session.isLogin</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若没有登录，则让用户跳转到登录页</span></span><br><span class="line">  <span class="keyword">if</span> (!sessionUser) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/admin/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">   next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="express-mysql-session"><a href="#express-mysql-session" class="headerlink" title="express-mysql-session"></a>express-mysql-session</h3><blockquote><p>用于session永久化，该模块会在数据库中创建一个session表        <a href="https://github.com/chill117/express-mysql-session" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-mysql-session</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">module</span>.exports = express();</span><br><span class="line"><span class="comment">//----------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> MySQLStore = <span class="built_in">require</span>(<span class="string">'express-mysql-session'</span>)(session);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">port: <span class="number">3306</span>,</span><br><span class="line">user: <span class="string">'root'</span>,</span><br><span class="line">password: <span class="string">'root'</span>,</span><br><span class="line">database: <span class="string">'session_test'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">key: <span class="string">'session_cookie_name'</span>,<span class="comment">//cookie key名称</span></span><br><span class="line">secret: <span class="string">'session_cookie_secret'</span>,   <span class="comment">//算法私钥，可以理解为 随便设置</span></span><br><span class="line">store: sessionStore,<span class="comment">//告诉 express-session，要用sessionStore持久化session</span></span><br><span class="line">resave: <span class="literal">false</span>,               <span class="comment">//重新保存    session有效期</span></span><br><span class="line">saveUninitialized: <span class="literal">false</span>     <span class="comment">//什么时候初始化  用session的时候 才初始化</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>若使用session永久化，需要在配置express-session之前进行配置</li></ul><h3 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h3><blockquote><p>处理用户上传文件        <a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">官网</a></p></blockquote><ul><li>若用户上传文件，则req.body，需要使用新的模块</li></ul><p><strong>下载</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install multer</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于处理用户上传文件的中间件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置multer</span></span><br><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="string">'public/uploads/'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ext = path.extname(file.originalname)</span><br><span class="line">        cb(<span class="literal">null</span>, file.fieldname + <span class="string">'-'</span> + <span class="built_in">Date</span>.now() + ext)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> upload = multer(&#123;</span><br><span class="line">    storage: storage</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = upload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的upload.single('article_file')  必须与提交的name字段名一致</span></span><br><span class="line">router.post(<span class="string">'/api/posts/add'</span>, upload.single(<span class="string">'article_file'</span>), (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//通过解构的方式获得input内容 + 上传文件</span></span><br><span class="line">    <span class="keyword">let</span> &#123;body , file&#125; = req      <span class="comment">//file存储的图片相关信息</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//以上是一个路由，用来处理用户上传文件 (upload.single('article_file'))</span></span><br></pre></td></tr></table></figure><p><strong>html页面里的ajax请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//文章上传功能</span></span><br><span class="line">  $(<span class="string">'#save'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var body =  $('#add_form').serialize()</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = $(<span class="string">'#add_form'</span>)</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="keyword">from</span>.get(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"/api/posts/add"</span>,</span><br><span class="line">      type: <span class="string">"POST"</span>,</span><br><span class="line">      data: data,</span><br><span class="line">      processData: <span class="literal">false</span>, <span class="comment">// 不处理数据</span></span><br><span class="line">      contentType: <span class="literal">false</span>, <span class="comment">// 不设置内容类型</span></span><br><span class="line">      error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(results)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="http-errors"><a href="#http-errors" class="headerlink" title="http-errors"></a>http-errors</h3><blockquote><p>为express，处理http 404、500等错误        <a href="https://github.com/jshttp/http-errors" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-errors</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.user) <span class="keyword">return</span> next(createError(<span class="number">401</span>, <span class="string">'Please login to view this page.'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(createError(<span class="number">404</span>, <span class="string">'Not Found'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="svg-captcha"><a href="#svg-captcha" class="headerlink" title="svg-captcha"></a>svg-captcha</h3><blockquote><p>验证码        <a href="https://www.npmjs.com/package/svg-captcha" target="_blank" rel="noopener">官网</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svg-captcha</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> captcha = svgCaptcha.create();</span><br><span class="line"><span class="built_in">console</span>.log(captcha);</span><br><span class="line"><span class="comment">// &#123;data: '&lt;svg.../svg&gt;', text: 'abcd'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//url重定向(跳转页面)</span></span><br><span class="line">res.redirect（[status，] path）</span><br><span class="line">res.redirect(<span class="string">'http://example.com'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户访问的url      GET 'http://www.example.com/admin/new'</span></span><br><span class="line"><span class="built_in">console</span>.log(req.originalUrl); <span class="comment">// '/admin/new'</span></span><br><span class="line"><span class="built_in">console</span>.log(req.baseUrl); <span class="comment">// '/admin'</span></span><br><span class="line"><span class="built_in">console</span>.log(req.path); <span class="comment">// '/new'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//locals对象 设置后可以模板中使用该变量</span></span><br><span class="line">app.locals.abc = <span class="number">123123</span>   <span class="comment">//全局中的变量  放内存中  //模板引擎中  →  &#123;&#123; abc &#125;&#125;  </span></span><br><span class="line">res.locals.category  <span class="comment">//响应体中的变量</span></span><br><span class="line">req.app.locals.category   <span class="comment">//请求体中的变量  //express app 中存变量，通常用于缓存</span></span><br><span class="line"></span><br><span class="line">res.locals.statusCode = err.status == <span class="number">404</span> ? <span class="number">404</span> : <span class="number">500</span> <span class="comment">//将错误状态吗存入全局对象中</span></span><br><span class="line"><span class="comment">//在art-template的.html中使用  &#123;&#123;statusCode&#125;&#125;</span></span><br><span class="line">res.status(err.status || <span class="number">500</span>) <span class="comment">//返回404或者500状态码</span></span><br></pre></td></tr></table></figure><h1 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h1><blockquote><p>使用node内置crypto模块进行数据加密</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入crypto模块</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将加密方法 导出，外部require引用时  需要传入加密字符串</span></span><br><span class="line"><span class="built_in">module</span>.exports.crypto_hash = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">    hash.update(str)</span><br><span class="line">    <span class="keyword">return</span> hash.digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配合vue-路由模式？"><a href="#配合vue-路由模式？" class="headerlink" title="配合vue 路由模式？"></a>配合vue 路由模式？</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  response.sendFile(path.resolve(__dirname, <span class="string">'build'</span>, <span class="string">'index.html'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><blockquote><p>HTTP 协议是无状态的，服务端不能跟踪客户端的状态，也就无法记录客户端登录的状态。</p></blockquote><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><strong>什么是 Cookie</strong></p><ul><li>Cookie - 小甜点，属于 HTTP 协议的一部分</li><li><strong>是服务器发送到用户浏览器并保存在本地的一小块数据</strong></li><li><strong>在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上</strong></li><li>它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态</li><li>Cookie 使基于<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#HTTP_is_stateless_but_not_sessionless" target="_blank" rel="noopener">无状态</a>的 HTTP 协议记录稳定的状态信息成为了可能</li><li>Cookie 存储的数据量有限，由浏览器决定，一般在4KB左右</li></ul><p><strong>Cookie 的使用场景</strong></p><p>Cookie 主要用来分辨两个请求是否来自同一个浏览器，以及用来保存一些状态信息。它的常用场合有以下一些。</p><ul><li>对话（session）管理：保存登录、购物车等需要记录的信息。</li><li>个性化：保存用户的偏好，比如网页的字体大小、背景色等等。</li><li>追踪：记录和分析用户行为。</li></ul><p><strong>Cookie 的属性</strong></p><p>Cookie 的访问被限制，只能在当前域名下可以访问。(不能跨域访问)。</p><ul><li><p>Path</p><p><code>Path</code>属性指定浏览器发出 HTTP 请求时，哪些路径要附带这个 Cookie。只要浏览器发现，<code>Path</code>属性是 HTTP 请求路径的开头一部分，就会在头信息里面带上这个 Cookie。比如，<code>PATH</code>属性是<code>/</code>，那么请求<code>/docs</code>路径也会包含该 Cookie。当然，前提是域名必须一致。</p></li><li><p><strong>HttpOnly</strong></p><p>设置该属性的话，不允许客户端操作 Cookie</p></li><li><p>Expires</p><p>设置过期时间，具体的时间点</p></li><li><p>Max-Age</p><p>设置过期时间，时间段，隔多长时间过期，单位是秒 (例如：60*60  1小时)</p><p>如果同时设置 Max-Age 和 Expires，Max-Age优先</p><p><strong>如果没有设置 Expires 和 Max-Age，浏览器关闭 Cookie 就消失 (只存储在内存中)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">'name'</span>, <span class="string">'zs'</span>, &#123;</span><br><span class="line">  httpOnly: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  <span class="comment">// 此处的单位是 毫秒</span></span><br><span class="line">  maxAge: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>Cookie 与 HTTP 协议</strong></p><p>Cookie 由 HTTP 协议生成，也主要是供 HTTP 协议使用。</p><p><strong>HTTP 响应：Cookie 的生成</strong></p><p>服务器如果希望在浏览器保存 Cookie，就要在 HTTP 回应的头信息里面，放置一个<code>Set-Cookie</code>字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie:foo=bar</span><br></pre></td></tr></table></figure><p>上面代码会在浏览器保存一个名为<code>foo</code>的 Cookie，它的值为<code>bar</code>。</p><p>HTTP 回应可以包含多个<code>Set-Cookie</code>字段，即在浏览器生成多个 Cookie。下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco; HttpOnly</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry; HttpOnly</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure><p><strong>HTTP 请求：Cookie 的发送</strong></p><p>浏览器向服务器发送 HTTP 请求时，每个请求都会带上相应的 Cookie。也就是说，把服务器早前保存在浏览器的这段信息，再发回服务器。这时要使用 HTTP 头信息的<code>Cookie</code>字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: foo=bar</span><br></pre></td></tr></table></figure><p>上面代码会向服务器发送名为<code>foo</code>的 Cookie，值为<code>bar</code>。</p><p><code>Cookie</code>字段可以包含多个 Cookie，使用分号（<code>;</code>）分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: name=value; name2=value2; name3=value3</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure><p><strong>在浏览器中操作 Cookie</strong></p><p><strong>document.cookie</strong></p><p><code>document.cookie</code>属性用于读写当前网页的 Cookie。</p><p>读取的时候，它会返回当前网页的所有 Cookie，前提是该 Cookie 不能有<code>HTTPOnly</code>属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie // &quot;foo=bar;baz=bar&quot;</span><br></pre></td></tr></table></figure><p><code>document.cookie</code>属性是可写的，可以通过它为当前网站添加 Cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = &apos;fontSize=14&apos;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>document.cookie</code>一次只能写入一个 Cookie，而且写入并不是覆盖，而是添加。</p><p><strong>s-cookie</strong></p><blockquote><p><a href="https://github.com/js-cookie/js-cookie" target="_blank" rel="noopener">https://github.com/js-cookie/js-cookie</a></p></blockquote><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>会话保持的机制，session 是记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 session 保存在服务器上。</p><p><strong>session 的使用</strong></p><ul><li><p>第三方模块 <a href="https://github.com/expressjs/session" target="_blank" rel="noopener">express-session</a></p></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123; </span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>, </span><br><span class="line">  cookie: &#123; <span class="attr">maxAge</span>: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span> &#125;,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>name: 设置 cookie 中，保存 session 的字段名称，默认为 connect.sid 。</li><li>secret: 这个 string 对 sessionID 对应的cookie进行签名，并放在 cookie 中。</li><li>cookie: 设置存放 session id 的 cookie 的相关选项，默认为 (default: { path: ‘/’, httpOnly: true, maxAge: null })</li><li>resave: 强制session保存到session store中。即使在请求中这个session没有被修改。</li><li>saveUninitialized: 强制没有“初始化”的session保存到storage中，没有初始化的session指的是：刚被创建没有被修改（第一次请求是否生成 sessionid）</li></ul></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// req.session 是一个对象</span></span><br><span class="line"><span class="comment">// 当配置好 session 之后，可以使用 session 保持登录的状态</span></span><br><span class="line">req.session.user = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他路由，可以判断登录的状态</span></span><br><span class="line"><span class="keyword">if</span> (!req.session.user) &#123;</span><br><span class="line">  <span class="comment">// 如果状态不存在则没有登录</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出的时候要，销毁session</span></span><br><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure></li></ul><p><strong>session的原理</strong></p><ol><li>浏览器向服务器发送登录请求(post)，携带账号和密码</li><li>服务器返回的响应头中携带 服务器生成的 sessionid(cookie中)，身份标示</li><li>浏览器再次访问服务器的时候会通过cookie携带sessionid</li><li>服务器获取浏览器发送的sessionid后，在服务器查找sessionid，如果找不到，未登录</li><li>如果找到 sessionid，根据 sessionid 查找对应的对象，如果不存在，未登录</li></ol><p><strong>Cookie 和 Session 的区别</strong></p><ul><li>cookie 数据存放在客户端，session 数据放在服务器端。</li><li>cookie 不是很安全，别人可以分析存放在本地的cookie 并进行 cookie 欺骗 考虑到安全应当使用session。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用 cookie 。</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li><li>将登陆信息等重要信息存放为 session、其他信息如果需要保留，可以放在cookie中</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript运行环境                   除了no
      
    
    </summary>
    
      <category term="Node.js" scheme="/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>React - 基础</title>
    <link href="/2019/05/09/React%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/React - 基础/</id>
    <published>2019-05-09T03:26:31.116Z</published>
    <updated>2019-05-09T03:15:01.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React框架"><a href="#React框架" class="headerlink" title="React框架"></a>React框架</h2><p><strong>个人感觉</strong></p><ol><li>违背W3C等规范，将JS、HTML等语言混在一起使用</li><li>在JS的基础上进行扩展，又不符合常规语法，容易混淆，难以理解</li><li>一次编写 到处运行是个亮点，内部算法也许比Vue强</li></ol><p><strong>特性</strong></p><ul><li>声明式视图<ul><li>对于声明式组件，当数据变更的时候，React低层负责高效更新。这种方式代码更加可预见并且更容易调试。</li></ul></li><li>组件化<ul><li>封装管理数据的组件，通过组合的方式实现复杂的UI，组件的逻辑采用js实现而不是模板，这样可以保持数据在DOM之外。</li></ul></li><li>一次学习，随处编写<ul><li>React可以进行服务端渲染，也可以用于移动APP开发（React Native）</li></ul></li></ul><p><a href="https://react.docschina.org/" target="_blank" rel="noopener">中文官网</a></p><p><a href="https://reactjs.org/" target="_blank" rel="noopener">英文官网</a></p><p><strong>前端3大框架：</strong></p><table><thead><tr><th>框架</th><th>时间</th><th>作者</th><th>概述</th></tr></thead><tbody><tr><td>Vue</td><td>2012</td><td>尤雨溪</td><td>只关注视图层的开发</td></tr><tr><td>React</td><td>2010</td><td>facebook</td><td>一切都是javascript、包括html、css</td></tr><tr><td>angular</td><td>2009</td><td>google</td><td>TypeScript、被边缘化</td></tr></tbody></table><p><a href="http://caibaojian.com/vue-vs-react.html" target="_blank" rel="noopener">Vue与React的区别</a></p><p><strong>MVC、MVVM</strong></p><ul><li>MVC 主要是后端的分层开发思想；把 一个完整的后端项目，分成了三个部分：<ul><li>Model：（数据层）主要负责 数据库的操作；</li><li>View：（视图层）所有前端页面，统称为 View 层</li><li>Controller：（业务逻辑层）主要处理对应的业务逻辑；（对于后台来说，这是开发的重点）</li></ul></li></ul><ul><li>MVVM是前端页面的分层开发思想，主要关注于 视图层 分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View,  ViewModel<ul><li>Model 是 页面中，需要用到的数据</li><li>View 是页面中的HTML结构；</li><li>ViewModel 是 一个 中间的调度者,提供了双向数据绑定的概念；</li></ul></li></ul><p><strong>其他框架</strong></p><ol><li><p>Ember</p></li><li><p>Knockout</p></li><li>Polymer</li><li>Riot</li></ol><hr><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>注：代码中含有<script type="text/babel">为基础用法</strong></p><p><strong>后续会采用npm的方式安装React，并在js里写组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/react.development.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/react-dom.development.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/babel.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">      );</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm 下载</span><br></pre></td></tr></table></figure><h3 id="JSX-js扩展语法"><a href="#JSX-js扩展语法" class="headerlink" title="JSX(js扩展语法)"></a>JSX(js扩展语法)</h3><blockquote><p>本质：普通对象</p></blockquote><p>JSX中嵌入表达式（JSX本身也是表达式）</p><ul><li>JSX可以赋值给变量</li><li>作为函数的参数</li><li>作为函数的返回值</li></ul><h4 id="常规用法"><a href="#常规用法" class="headerlink" title="常规用法"></a>常规用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &lt;div&gt;Hello World!&lt;/div&gt;;</span><br><span class="line"><span class="comment">//可以html标签嵌套，但是需要包含一个根标签！！</span></span><br><span class="line"><span class="keyword">const</span> element = (&lt;div&gt;&lt;h1&gt;Hello!&lt;/h1&gt;&lt;/div&gt;);</span><br><span class="line"><span class="comment">//()可以不加~ 建议加上。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为函数的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div tabIndex=<span class="string">"0"</span> className=<span class="string">'active'</span>&gt;Tom&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/作为函数的参数</span></span><br><span class="line"><span class="regexp">function foo(info) &#123;</span></span><br><span class="line"><span class="regexp">  return info;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let ret = foo(&lt;div&gt;hi&lt;/</span>div&gt;);</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数原型</span></span><br><span class="line">React.createElement(element, [props], [...children])</span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上述JSX本质上可以表示为如下形式：</span></span><br><span class="line"><span class="regexp">const element = React.createElement(</span></span><br><span class="line"><span class="regexp">  'h1',</span></span><br><span class="line"><span class="regexp">  &#123;className: 'greeting'&#125;,</span></span><br><span class="line"><span class="regexp">  'Hello, world!'</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ let info = &lt;div&gt;你好&lt;/</span>div&gt;;</span><br><span class="line"><span class="comment">// let info = React.createElement('h1', &#123;className: 'active'&#125;, 'Nihao');</span></span><br><span class="line"><span class="keyword">let</span> c1 = React.createElement(<span class="string">'h1'</span>, &#123;<span class="attr">className</span>: <span class="string">'active1'</span>&#125;, <span class="string">'Nihao'</span>);</span><br><span class="line"><span class="keyword">let</span> c2 = React.createElement(<span class="string">'h2'</span>, &#123;<span class="attr">className</span>: <span class="string">'active2'</span>&#125;, <span class="string">'Hello'</span>);</span><br><span class="line"><span class="keyword">let</span> info = React.createElement(<span class="string">'div'</span>, &#123;<span class="attr">className</span>: <span class="string">'active'</span>&#125;, [c1, c2]);</span><br><span class="line">ReactDOM.render(info, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><h4 id="props属性操作"><a href="#props属性操作" class="headerlink" title="props属性操作"></a>props属性操作</h4><blockquote><p>可使用es6等语法，通过多种方式传递数据/属性</p></blockquote><p><strong>扩展运算符：传递多个数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用  ...  完成数据  解构？ 传递数据</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.props.name&#125; | &#123;<span class="keyword">this</span>.props.age&#125; | &#123;<span class="keyword">this</span>.props.sex&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let obj = &#123;name:'zs',age:18,sex:'男'&#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com &#123;...obj&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解构：传递指定数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ... 将name值“拆出来”，这时传递到组件中 就只有age、sex 了</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.props.name&#125; | &#123;<span class="keyword">this</span>.props.age&#125; | &#123;<span class="keyword">this</span>.props.sex&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let obj = &#123;name:'zs',age:18,sex:'男'&#125;</span></span><br><span class="line"><span class="regexp">    let &#123;name,...other&#125; = obj</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com &#123;...other&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="props值类型"><a href="#props值类型" class="headerlink" title="props值类型"></a>props值类型</h4><blockquote><p>组件传递数据时，可传递表达式、函数、对象等类型。并可以在组件中调用、更改值</p><p>但是开发环境中不建议修改props中的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.num&#125; | &#123;<span class="keyword">this</span>.props.obj.name&#125; | &#123;<span class="keyword">this</span>.props.fn()&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let myObj = &#123;name:1&#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com num=&#123;1+2+3&#125; obj=&#123;myObj&#125; fn=&#123;()=&gt;&#123;console.log(123)&#125;&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="children"><a href="#children" class="headerlink" title="children"></a>children</h4><blockquote><p>原理类似Vue中的 slot（插槽）</p><p>在React中，可通过 this.props.children 获取组件标签中的内容/html结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com&gt;hello world&lt;/</span>Com&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="点标记组件"><a href="#点标记组件" class="headerlink" title="点标记组件"></a>点标记组件</h4><blockquote><p>可通过对象的方式 包装 多个子组件，通常代表子组件功能相互关联</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> abc = &#123;</span><br><span class="line">        a:<span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">            render()&#123;</span><br><span class="line">                <span class="keyword">return</span> (&lt;div&gt;&lt;h1&gt;A&lt;/h1&gt;&lt;/div&gt;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        b:<span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">            render()&#123;</span><br><span class="line">                <span class="keyword">return</span> (&lt;div&gt;&lt;h1&gt;B&lt;/h1&gt;&lt;/div&gt;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = ( &lt;div&gt;&lt;abc.a /&gt;&lt;abc.b /&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,document.getElementById('root'))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><p><code>笔记未总结</code></p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><blockquote><p>重复利用的单元，形式与vue类似，实现原理不同</p><p>高内聚,低耦合</p></blockquote><blockquote><p>React的组件推荐写在js中，这里先写在html里，方便学习</p></blockquote><p><strong>定义组件的方式（2种）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//类组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义class并继承React.component，并return组件结构</span></span><br></pre></td></tr></table></figure><p><strong>类组件的传参 - 固定写法，包括 “props”</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;h1&gt;你好&#123;this.props.info&#125;&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> app = &lt;Con info="World"&gt;a&lt;/Con&gt;;</span><br><span class="line">  ReactDOM.render(app, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ----------说明----------</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ class Con   继承(extends)  React.Component</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 采用constructor 接收参数(props)  （固定写法）    /</span><span class="regexp">/这个+内部的super可以省略不写! </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 使用super(props) super代表调用父类构造函数（这里指React）  在这里接收了参数props</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Con中 写了一个render()方法 并将html结构return</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 外部可以使用&lt;Con&gt;&lt;/</span>Con&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Con中的this指向 与 普通构造函数的指向（示例）一致</span></span><br><span class="line"><span class="comment">// Con通过原型链  可以找到父类中的props 数据</span></span><br></pre></td></tr></table></figure><h3 id="组件状态-state（单向数据流）"><a href="#组件状态-state（单向数据流）" class="headerlink" title="组件状态-state（单向数据流）"></a>组件状态-state（单向数据流）</h3><blockquote><p>组件可通过this.state={} 设置内部数据</p><p>！class组件存在state，函数组件不存在</p></blockquote><p><strong>数据特性为单向：父组件数据传递给子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                msg:<span class="string">'hello world'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (&lt;Com1&gt;&lt;/</span>Com1&gt;)</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>state中数据修改</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若要设置state的值，则需要使用：this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 若不使用该方法，React则无法监测到数据变化 而改变DOM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    msg:<span class="keyword">new</span> <span class="built_in">Date</span>().toString()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>setState的数据修改异步问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setState是异步执行，所以这里console打印出的是旧数据</span></span><br><span class="line">clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setState有一个回调函数，这里打印出的是数据更新后的值</span></span><br><span class="line">clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    &#125;,()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.num);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件间数据传值"><a href="#组件间数据传值" class="headerlink" title="组件间数据传值"></a>组件间数据传值</h3><h4 id="父-→-子"><a href="#父-→-子" class="headerlink" title="父 → 子"></a>父 → 子</h4><blockquote><p>父组件向子组件传值(props)</p></blockquote><ol><li>子组件 通过”标签属性”向父组件传值</li><li>父组件class中的props中就会包含子组件传输的数据（格式：子组件属性:数据）</li><li>在父组件中可通过  this.props.属性获取子组件传送的数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                msg:<span class="string">'Father组件data'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;father&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;&#123;this.props.msg&#125;&lt;/</span>p&gt;</span><br><span class="line">                    &lt;Son msg=&#123;<span class="keyword">this</span>.state.msg&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    class Son extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">        constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">            super(props)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        render()&#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1&gt;son&lt;/</span>h1&gt;</span><br><span class="line">                    &lt;p&gt;&#123;<span class="keyword">this</span>.props.msg&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Father msg=<span class="string">'根组件data'</span>&gt;&lt;/Father&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(App,document.getElementById('root'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="子-→-父"><a href="#子-→-父" class="headerlink" title="子 → 父"></a>子 → 父</h4><blockquote><p>子组件向父组件传值(传递函数)</p></blockquote><ol><li>在父组件class中 render子组件</li><li>通过子组件标签属性传递一个函数sum     <Son sonnum={this.sum}></Son></li><li>在子组件class中解构、运行该函数   sonnum()     // 示例代码是通过事件触发解构、运行、传值</li></ol><p><strong>总结：通过父组件向子组件传递“函数”   并在子组件解构 + 运行 + 传递参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;sonnum&#125; = <span class="keyword">this</span>.props</span><br><span class="line">            sonnum(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.clk&#125;&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span&gt;&#123;this.state.num&#125;&lt;/</span>span&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    class Father extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">        constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">            super(props)</span></span><br><span class="line"><span class="regexp">            this.state=&#123;</span></span><br><span class="line"><span class="regexp">                total:0</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        sum=(n)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123;</span></span><br><span class="line"><span class="regexp">                total:this.state.total +  n</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        render()&#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1&gt;&#123;this.state.total&#125;&lt;/</span>h1&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Father&gt;&lt;/</span>Father&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(App,document.getElementById('root'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="兄弟-→-兄弟"><a href="#兄弟-→-兄弟" class="headerlink" title="兄弟 → 兄弟"></a>兄弟 → 兄弟</h4><blockquote><p>非父子组件之间传值(redux)</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>组件从产生 → 销毁的过程</p></blockquote><p>（重要的加粗）</p><ol><li><p>（即将移除）componentWillMount：唯一在render()之前调用的钩子</p></li><li><p><strong>componentDidMount：</strong> DOM树渲染完成后调用，通常用于加载后台数据</p></li><li>（即将移除）componentWillReceiveProps：组件接收到新的props，该方法会首先被调用</li><li>（新增）static getDerivedStateFromProps(props, state)：state、props改变后，都会执行钩子</li><li><strong>componentWillUnmount：</strong>组件被销毁之前一般用于清理工作（定时器timer、网络请求、订阅事件）</li></ol><p><a href="https://www.jianshu.com/p/170009bcf6f8">其他生命周期钩子参考</a></p><p><strong>使用示例：</strong></p><p> <strong>componentDidMount(){}</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">    setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            msg:new Date().toString()</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;, 1000);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="D:\黑马前端 - 于健\囤货\4 - 文档笔记整理\React - 生命周期.png" alt=""></p><h3 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><blockquote><p>通过button标签中的  onClick={this.clk}  绑定点击事件clk</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.num&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.clk&#125;&gt;点击&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;Com&gt;&lt;/</span>Com&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h4><blockquote><p>若需要传递参数则需要在onClick中传递一个  “参数”  函数！！</p><p>—–错误写法：onClick={ this.clk(2) }  等同于函数调用，会返回字符串。而这里需要一个函数</p><p>可以通过  onClick={ (e)=&gt;{this.clk(e,2)} }    //第一个参数为 事件对象</p><p>可以通过 onClick={ this.clk.bind( this,2 ) }    //采用bind的特性（返回一个函数）</p><p>—–改变this只是原生js语法规定的，这里没有什么用 （不太确定）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function">(<span class="params">e,n</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + n</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.num&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;(e)=&gt;&#123;this.clk(e,2)&#125;&#125;&gt;点击&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;Com&gt;&lt;/</span>Com&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clk=<span class="function">(<span class="params">e,n</span>)=&gt;</span>&#123;</span><br><span class="line">    e.stopPropagation()  <span class="comment">// 阻止冒泡</span></span><br><span class="line">    e.preventDefault()   <span class="comment">// 阻止默认行为</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>         <span class="comment">// 不好使</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + n</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//clk方法写成了箭头函数，其原因为this指向问题</span></span><br><span class="line"><span class="comment">//另一种解决方法是： (改变this指向)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.clk = <span class="keyword">this</span>.clk.bind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>通过判断语句，甄别渲染组件/标签/内容</p></blockquote><p><strong>if else</strong></p><blockquote><p>在<strong>render</strong>函数中 通过<code>if</code>判断 要<code>reruen</code>什么html结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                show:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.state.show)&#123; <span class="keyword">return</span>( &lt;h1&gt;hello&lt;/h1&gt; ) &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="keyword">return</span> (&lt;h1&gt;world&lt;/h1&gt;) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = (</span><br><span class="line">        &lt;div&gt;&lt;Com&gt;&lt;/Com&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>三元表达式</strong></p><blockquote><p><strong>return</strong>时 可通过<code>三元表达式</code>来判断是否要渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            show:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.show ? &lt;h1&gt;hello&lt;/h1&gt; : &lt;h1&gt;world&lt;/h1&gt; &#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;Com&gt;&lt;/</span>Com&gt;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>阻止渲染</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在function中return null  /  在class render中 return null</span></span><br></pre></td></tr></table></figure><h3 id="遍历渲染"><a href="#遍历渲染" class="headerlink" title="遍历渲染"></a>遍历渲染</h3><blockquote><p>通过原生数组<code>map()</code>方法循环遍历 生成html结构，然后使用{html}渲染</p><p>遍历出的html必须包含唯一的key，便于React监控DOM树</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            ary:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">let</span> lis = <span class="keyword">this</span>.state.ary.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="keyword">return</span> &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;&#125;)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;&#123;lis&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><ul><li><p>受控组件：表单域的基本使用；通过标签中的value绑定数据 + onChange “实时”监控表单状态<code>双向数据绑定</code></p></li><li><p>非受控组件：<code>直接通过DOM获取value</code> <code>也可绑定state中数据</code></p></li></ul><p><strong>区别：</strong> </p><ul><li>需要设置<code>原始值</code>，或<code>实时监控组件内容</code>时 使用<strong>受控组件</strong>，反之非受控组件</li><li>表单中 若存在“value”，则通常为受控组件</li></ul><h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><blockquote><p>通过html表单域中的value 绑定state的值</p><p>通过给表单绑定onChange方法 更新state中的值</p><p>—-在onChange(e){}方法中，第一个参数为事件对象，通过e.target.vale可获取值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            uname:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inputChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = e.target.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            uname:val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.uname&#125; onChange=&#123;<span class="keyword">this</span>.inputChange&#125;/&gt;</span><br><span class="line">                &lt;p&gt;state的值：&#123;<span class="keyword">this</span>.state.uname&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h4><blockquote><p>通过html标签中的ref值 与class组件声明的ref 的进行绑定</p><p>通过 this.<code>ref</code>.current.value 获取对应html表单的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            uname:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.uNameRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    inputPush=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = <span class="keyword">this</span>.uNameRef.current.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            uname:val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;input的值不会实时绑定到state中&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="text" ref=&#123;this.uNameRef&#125; /</span>&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.inputPush&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;提交后state：&#123;this.state.uname&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = ( &lt;div&gt; &lt;Com&gt;&lt;/</span>Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常规表单处理"><a href="#常规表单处理" class="headerlink" title="常规表单处理"></a>常规表单处理</h4><p><strong>radio：</strong>通过<code>受控组件</code> 监控 选中情况，并根据绑定的value值 来决定checked</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            sex:<span class="string">'man'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sex:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"man"</span> checked=&#123;<span class="keyword">this</span>.state.sex==<span class="string">'man'</span>&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125; /&gt;男</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"women"</span> checked=&#123;<span class="keyword">this</span>.state.sex==<span class="string">'women'</span>&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125; /&gt;女</span><br><span class="line">                &lt;p&gt;radio数据：&#123;<span class="keyword">this</span>.state.sex&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>checkbox：</strong>通过onChange事件监控点击事件，使用临时array、遍历的方法判断点击次数，判断是否“选中”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            checkboxDate:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    isChecked=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = e.target.value</span><br><span class="line">        <span class="keyword">let</span> ary = <span class="keyword">this</span>.state.checkboxDate.slice()   <span class="comment">//截取(0)生成新数组，避免相同引用地址</span></span><br><span class="line">        <span class="keyword">let</span> index = ary.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item==val)  <span class="comment">//循环遍历出索引index</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">-1</span>) &#123; ary.push(val) &#125;   <span class="comment">//判断数组中是否存在</span></span><br><span class="line">        <span class="keyword">else</span> &#123; ary.splice(index,<span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            checkboxDate:ary</span><br><span class="line">        &#125;,()=&gt;&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.state.checkboxDate);&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"read"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;看书</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"game"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;游戏</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"music"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;音乐</span><br><span class="line">                &lt;p&gt;checkbox绑定的值：&#123;<span class="keyword">this</span>.state.checkboxDate&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select + option：</strong>通过<code>受控组件</code> 监控 选中情况，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            val:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            val:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;select value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125;&gt;</span><br><span class="line">                    &lt;option value=<span class="string">'1'</span>&gt;工作&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value='2'&gt;学习&lt;/</span>option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">'3'</span>&gt;看书&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>select&gt;</span><br><span class="line">                &lt;p&gt;option绑定的value值：&#123;<span class="keyword">this</span>.state.val&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>file：</strong>通过<code>非受控组件</code> ，当点击按钮后 读取 文件上传情况，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            name:<span class="string">''</span>,</span><br><span class="line">            size:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.fileRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    filePush=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].name,</span><br><span class="line">            size:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].size,</span><br><span class="line">            type:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> ref=&#123;<span class="keyword">this</span>.fileRef&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.filePush&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;file绑定的值：&#123;this.state.name&#125;----&#123;this.state.size&#125;----&#123;this.state.type&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = ( &lt;div&gt; &lt;Com&gt;&lt;/</span>Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>textarea：</strong>通过<code>受控组件</code> 监控 输入内容，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            val:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            val:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;textarea value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125;&gt;&lt;/textarea&gt;</span><br><span class="line">                &lt;p&gt;textarea绑定的value值：&#123;<span class="keyword">this</span>.state.val&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS样式处理"><a href="#CSS样式处理" class="headerlink" title="CSS样式处理"></a>CSS样式处理</h3><p><strong>className</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React中class是关键词，所以使用className</span></span><br><span class="line"><span class="comment">// 可通过常规写法进行绑定样式，也可通过绑定 state 中数据来控制</span></span><br><span class="line"><span class="comment">// 在className中 也可以使用表达式</span></span><br><span class="line"></span><br><span class="line">&lt;style&gt;.box&#123;<span class="attr">color</span>: red;&#125;.box2&#123;<span class="attr">color</span>: blue&#125;.fs&#123;font-size: <span class="number">16</span>px;&#125;&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="root"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                abc:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;div&gt;&lt;h1 className='box fs'&gt;hello&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div&gt;&lt;h1 className=&#123;this.state.abc?'box2 fs':'box fs'&#125;&gt;world&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过html标签绑定 state 中的对象来控制行内样式</span></span><br><span class="line"><span class="comment">// 或者 在html标签中采用 &#123;&#123;key:value,key:value&#125;&#125; 控制样式（不推荐）</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                abc:&#123;<span class="string">'fontSize'</span>:<span class="string">'36px'</span>,<span class="attr">color</span>:<span class="string">'blue'</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1 style=&#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>,<span class="string">'fontSize'</span>:<span class="string">'16px'</span>&#125;&#125;&gt;hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1 style=&#123;this.state.abc&#125;&gt;world&lt;/</span>h1&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yarn-类似npm"><a href="#yarn-类似npm" class="headerlink" title="yarn(类似npm)"></a>yarn(类似npm)</h2><blockquote><p>  类似npm的包管理网站</p></blockquote><p><a href="https://yarn.bootcss.com/">官网</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在官网中找到对应的安装文件，安装</span></span><br><span class="line"><span class="comment">//在cmd中输入 yarn --version  查看是否安装成功</span></span><br></pre></td></tr></table></figure><p><strong>基础命令</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与npm对比</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化新项目</span></span><br><span class="line">npm init</span><br><span class="line">yarn init</span><br><span class="line"><span class="comment">// 默认安装</span></span><br><span class="line">npm install</span><br><span class="line">yarn install</span><br><span class="line"><span class="comment">// 安装某个依赖，并且默认保存到package.</span></span><br><span class="line">npm install express —save</span><br><span class="line">yarn add express</span><br><span class="line"><span class="comment">// 移除某个依赖项目</span></span><br><span class="line">npm uninstall express —save</span><br><span class="line">yarn remove express</span><br><span class="line"><span class="comment">// 安装某个开发时依赖项目</span></span><br><span class="line">npm install express —save-dev  </span><br><span class="line">yarn add express —dev</span><br><span class="line"><span class="comment">// 更新某个依赖项目</span></span><br><span class="line">npm update express —save </span><br><span class="line">yarn upgrade express</span><br><span class="line"><span class="comment">// 安装某个全局依赖项目</span></span><br><span class="line">npm install webpack -g</span><br><span class="line">yarn global add webpack</span><br><span class="line"><span class="comment">// 运行某个命令</span></span><br><span class="line">npm run 命令名称</span><br><span class="line">yarn run 命令名称</span><br></pre></td></tr></table></figure><h2 id="create-react-app-脚手架"><a href="#create-react-app-脚手架" class="headerlink" title="create-react-app (脚手架)"></a>create-react-app (脚手架)</h2><blockquote><p>官方脚手架工具，类似Vue-cli 脚手架工具，用来初始化项目</p></blockquote><blockquote><p>其他关键词：前端工程化、前后端分离</p></blockquote><blockquote><p>基于yarn，包装了webpack等工具包</p></blockquote><p><a href="https://react.docschina.org/docs/create-a-new-react-app.html">官网</a></p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p><strong>安装</strong></p><blockquote><p>需要先安装npx（npm引入的新命令）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app 项目名称</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">npm install -g create-react-app   <span class="comment">//全局安装</span></span><br><span class="line">create-react-app 项目名称</span><br></pre></td></tr></table></figure><p><strong>运行说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,<span class="comment">//运行项目</span></span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,<span class="comment">//打包、编译</span></span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,<span class="comment">//运行测试项目</span></span><br><span class="line">  <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span><span class="comment">//解锁webpack等包，解锁后不能还原</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><blockquote><p>根据hash实现，url中的#不会解析。通过js获取对应hash 并显示不同的组件</p></blockquote><ul><li><a href="https://github.com/ReactTraining/react-router">react-router</a></li><li><a href="https://reacttraining.com/react-router/">doc</a></li></ul><p>####配置</p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><h4 id="声明式路由"><a href="#声明式路由" class="headerlink" title="声明式路由"></a>声明式路由</h4><blockquote><p>import { BrowserRouter as Router, Route, Link } from “react-router-dom”;</p></blockquote><ul><li><Router>标签包裹 内容</li><li>使用<Link to=''>首页<Link />    //相当于<a></li><li>使用<Route path='url' component={组件}>      // url为”/“时，加入 exact</li></ul><Route>中若没有path，则会匹配其他url，然后重定向？到component组件中<br><br><Route component={Game}></Route><p><strong><Route>可以不写component：</strong></p><ul><li><p>可使用render={()=&gt;{<h1>111111</h1>}}  处理简单内容，触发条件为 path匹配</p></li><li><p>可使用children={()=&gt;{<h1>111111</h1>}}  与render类似，但触发条件为 路径触发则调用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Game <span class="keyword">from</span> <span class="string">'./components/Game'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/game"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path='</span>/game<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Redirect to="/"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><p>html容器：<Route path='/' exact component={Home}></Route></p><h4 id="模糊路由"><a href="#模糊路由" class="headerlink" title="模糊路由"></a>模糊路由</h4><blockquote><p>import { BrowserRouter as Router, Route, Link, Switch} from “react-router-dom”;</p><p><Route>不写明path，需要导入Switch，并用<Switch>包裹</p><p><Switch>：在路径相同的情况下，只匹配第一个，可以避免重复匹配路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/game"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/music"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/:abc"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='</span>/game<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='</span>/music<span class="string">' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><blockquote><p>子组件不需要用<Router>标签包裹 内容，且子组件可包含<Link>或<Route></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">// import './App.css';</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Game <span class="keyword">from</span> <span class="string">'./components/Game'</span></span><br><span class="line"><span class="keyword">import</span> Other <span class="keyword">from</span> <span class="string">'./components/Other'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">music1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &lt;p&gt;华语&lt;/p&gt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">music2</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &lt;p&gt;英语&lt;/p&gt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Music</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to="/music/1"&gt;华语&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to="/music/2"&gt;英语&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path="/mu</span>sic/<span class="number">1</span><span class="string">" component=&#123;music1&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/music/<span class="number">2</span><span class="string">" component=&#123;music2&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">class App extends Component &#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;Router&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/<span class="string">"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/game<span class="string">"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/music<span class="string">"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/:abc<span class="string">"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;/ul&gt;</span></span><br><span class="line"><span class="string">          &lt;Switch&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/game' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/music' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><blockquote><p>通过<Route> 中的path设置传参  例如path=’/game/:id’</p><p>在<Link>标签to中传递参数</p><p>在对应组件的 this.props.match 获取参数(class组件)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/game/123"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/music"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/:abc"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path='</span>/game/:id<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path='</span>/music<span class="string">' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若是函数组件，则通过match获取参数</span></span><br><span class="line">&lt;Route path=<span class="string">"/:id"</span> component=&#123;Child&#125; /&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; match &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;ID: &#123;match.params.id&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><blockquote><p>import { BrowserRouter as Router, Route, Link, Switch, Redirect} from “react-router-dom”;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件，判断条件是否成立     //如果页面中存在&lt;Redirect&gt;标签，则会直接跳转</span></span><br><span class="line"><span class="function">function <span class="title">music2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  let isok = <span class="keyword">false</span></span><br><span class="line">  let info = isok ? "" : &lt;Redirect to='/'&gt;&lt;/Redirect&gt;</span><br><span class="line">  <span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><blockquote><p>通过js的方式  实现组件跳转             //注意根url 的<Route>有没有exact</p></blockquote><blockquote><p>导入withRouter   import { withRouter } from “react-router-dom”;</p><p>导出组件时需要使用withRouter包裹      export default withRouter(Game)</p><p>给事件源（按钮）注册方法，触发事件</p><p>通过结构获取props中的history     let {history} = this.props</p><p>通过 history.push(‘/‘)  跳转页面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    fn=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;history&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="built_in">console</span>.dir(history);</span><br><span class="line">        history.push(<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment">// history.push('/',&#123;key:val&#125;)  传参</span></span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">let</span> id = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="built_in">console</span>.log(id);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;游戏&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.fn&#125;&gt;编程式导航&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withRouter(Game)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 传参跳转时，外部获取参数 props.location.state</span></span><br></pre></td></tr></table></figure><h4 id="自定义路由链接-样式"><a href="#自定义路由链接-样式" class="headerlink" title="自定义路由链接(样式)"></a>自定义路由链接(样式)</h4><blockquote><p>路由发生变化时 改变对应标签的样式/结构重构</p></blockquote><blockquote><p>利用<Route>的children属性 获取当前点击事件源，并赋予指定样式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="comment">// 通过props解构传入的参数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;to,name&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// children传入函数，通过解构match判断当前事件源</span></span><br><span class="line">            &lt;Route path=&#123;to&#125; children=&#123;( &#123;match&#125; )=&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    &lt;div className=&#123;match?<span class="string">'active'</span>:<span class="string">''</span>&#125;&gt;</span><br><span class="line">                        &lt;Link to=&#123;to&#125;&gt;&#123;name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时的组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (&lt;div&gt;hello&lt;/div&gt;)&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp2</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (&lt;div&gt;world&lt;/div&gt;)&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/* 内容容器 （这里组件写死了，以后可以动态传入组件） */</span>&#125;</span><br><span class="line">                &lt;Route path=<span class="string">'/main/message/url-1'</span> component=&#123;Temp1&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/main/message/url-2'</span> component=&#123;Temp2&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &#123;<span class="comment">/* 引入组件，传入参数 */</span>&#125;</span><br><span class="line">                &lt;Com to=<span class="string">'/main/message/url-1'</span> name=<span class="string">'111'</span> /&gt; </span><br><span class="line">                &lt;Com to=<span class="string">'/main/message/url-2'</span> name=<span class="string">'222'</span> /&gt; </span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Message</span></span><br></pre></td></tr></table></figure><p>// 参考项目代码：myapp-基础项目搭建.zip （看Menu.js、Main.js）</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><blockquote><p>状态（数据）管理，类似vuex</p></blockquote><p>看另一个笔记。。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><h3 id="短路运算符-amp-amp"><a href="#短路运算符-amp-amp" class="headerlink" title="短路运算符: &amp;&amp;"></a>短路运算符: &amp;&amp;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过短路运算符 判断标签是否需要渲染到页面中</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            show:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &#123;<span class="keyword">this</span>.state.show &amp;&amp; &lt;h1&gt;hello&lt;/h1&gt; &#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;Com&gt;&lt;/</span>Com&gt;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟DOM（Virtual-DOM）"><a href="#虚拟DOM（Virtual-DOM）" class="headerlink" title="虚拟DOM（Virtual DOM）"></a>虚拟DOM（Virtual DOM）</h3><ul><li>映射真实DOM树的JS对象</li><li>数据发生改变时，先对虚拟DOM进行操作（diff）<ul><li>diff的结果就是变更的节点（这里的节点指的是虚拟节点-本质上就是普通对象）</li></ul></li><li>而后对虚拟DOM、真实DOM进行比较</li><li>根据比较结构，对真实DOM进行操作，完成页面更新</li></ul><h3 id="案例1-tab栏切换"><a href="#案例1-tab栏切换" class="headerlink" title="案例1 - tab栏切换"></a>案例1 - tab栏切换</h3><p><strong>本质：</strong></p><ul><li>利用点击按钮时传递循环产生的 i，与state中的index配对</li><li>通过按钮点击事件 改变state中的值，保证这对数据 一致性</li><li>通过判断 i 和state中的index，判断 div 是否显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #box div&#123;height: 200px;width: 300px;background: #ccc;display: none&#125;</span><br><span class="line">    #box div.active&#123;display: block&#125;</span><br><span class="line">    #box button.active&#123;background: orange&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="root"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                tabData:[&#123;<span class="attr">title</span>:<span class="string">'导航1'</span>,<span class="attr">cont</span>:<span class="string">'内容1'</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">'导航2'</span>,<span class="attr">cont</span>:<span class="string">'内容2'</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">'导航3'</span>,<span class="attr">cont</span>:<span class="string">'内容3'</span>&#125;],</span><br><span class="line">                eleIndex:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleTag=<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                eleIndex:i</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="keyword">this</span>.state.eleIndex</span><br><span class="line">            <span class="keyword">let</span> tempTitle = []</span><br><span class="line">            <span class="keyword">let</span> tempCont = []</span><br><span class="line">            <span class="keyword">this</span>.state.tabData.forEach(<span class="function">(<span class="params">item,i</span>) =&gt;</span> &#123;</span><br><span class="line">                tempTitle.push(&lt;button className=&#123;index==i?'active':''&#125; key=&#123;i&#125; onClick=&#123;(e)=&gt;&#123;this.handleTag(e,i)&#125;&#125;&gt;&#123;item.title&#125;&lt;/button&gt;)</span><br><span class="line">                tempCont.push(&lt;div className=&#123;index==i?'active':''&#125; key=&#123;i&#125;&gt;&#123;item.cont&#125;&lt;/div&gt;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">                    &#123;tempTitle&#125;</span><br><span class="line">                    &#123;tempCont&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></script></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React框架&quot;&gt;&lt;a href=&quot;#React框架&quot; class=&quot;headerlink&quot; title=&quot;React框架&quot;&gt;&lt;/a&gt;React框架&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;个人感觉&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;违背W3C等规范，将JS、HT
      
    
    </summary>
    
      <category term="React" scheme="/categories/React/"/>
    
    
      <category term="React" scheme="/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Vue - element-ui</title>
    <link href="/2019/05/09/Vue%20-%20element-ui/"/>
    <id>/2019/05/09/Vue - element-ui/</id>
    <published>2019-05-09T03:26:17.015Z</published>
    <updated>2019-05-09T03:26:14.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><p>本身是一个Vue组件库，由<code>饿了么</code>团队进行包装。</p><p>桌面组件库（PC）</p><p><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">官网</a></p><p><strong>其他常用组件库</strong></p><p><a href="https://baijiahao.baidu.com/s?id=1590479471360943398&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">连接</a></p><ul><li>Vuetify</li><li>Vue Material</li><li>Keen UI</li><li>Buefy</li><li>Bootstrap-Vue</li><li>AT-UI</li><li>Fish-UI</li><li>Quasar</li><li>Muse UI</li><li>Vux</li></ul><p>###hello world</p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p><strong>解决字体文件解析</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到了**格式的字体文件，需要额外配置loader</span></span><br><span class="line"><span class="comment">//该loader为：url-loader</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>, <span class="attr">use</span>:<span class="string">'url-loader'</span>&#125;,</span><br></pre></td></tr></table></figure><p><strong>基础使用</strong> <code>完整引入</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>基础使用</strong> <code>按需引入</code></p><p><a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">参考</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>页面中的标签照抄代码就行，懒得写了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;element-ui&quot;&gt;&lt;a href=&quot;#element-ui&quot; class=&quot;headerlink&quot; title=&quot;element-ui&quot;&gt;&lt;/a&gt;element-ui&lt;/h2&gt;&lt;p&gt;本身是一个Vue组件库，由&lt;code&gt;饿了么&lt;/code&gt;团队进行包装。&lt;/
      
    
    </summary>
    
      <category term="Vue" scheme="/categories/Vue/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>手机rem、x倍图适配</title>
    <link href="/2019/05/09/%E6%89%8B%E6%9C%BArem%E3%80%81x%E5%80%8D%E5%9B%BE%E9%80%82%E9%85%8D/"/>
    <id>/2019/05/09/手机rem、x倍图适配/</id>
    <published>2019-05-09T03:11:41.902Z</published>
    <updated>2019-05-09T03:10:08.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rem计算"><a href="#rem计算" class="headerlink" title="rem计算"></a>rem计算</h2><p><a href="https://blog.csdn.net/gao531162436/article/details/81699313" target="_blank" rel="noopener">参考</a></p><h4 id="vm-rem："><a href="#vm-rem：" class="headerlink" title="vm+rem："></a>vm+rem：</h4><p><a href="http://caibaojian.com/vw-vh.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .scss预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span></span><br><span class="line">$vm_fontsize: <span class="number">75</span>; <span class="comment">// iPhone 6尺寸的根元素大小基准值</span></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">rem</span>(<span class="params">$px</span>) </span>&#123;</span><br><span class="line">     @<span class="keyword">return</span> ($px / $vm_fontsize ) * <span class="number">1</span>rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根元素大小使用 vw 单位</span></span><br><span class="line">$vm_design: <span class="number">750</span>;</span><br><span class="line">html &#123;</span><br><span class="line">    font-size: ($vm_fontsize / ($vm_design / <span class="number">2</span>)) * <span class="number">100</span>vw; </span><br><span class="line">    <span class="comment">// 同时，通过Media Queries 限制根元素最大最小值</span></span><br><span class="line">    @media screen and (max-width: <span class="number">320</span>px) &#123;</span><br><span class="line">        font-size: <span class="number">64</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    @media screen and (min-width: <span class="number">540</span>px) &#123;</span><br><span class="line">        font-size: <span class="number">108</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// body增加宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span></span><br><span class="line">body &#123;</span><br><span class="line">    max-width: <span class="number">540</span>px;</span><br><span class="line">    min-width: <span class="number">320</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">div &#123;</span><br><span class="line">    height: rem(<span class="number">300</span>);</span><br><span class="line">    width: rem(<span class="number">300</span>);</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标准rem方案："><a href="#标准rem方案：" class="headerlink" title="标准rem方案："></a>标准rem方案：</h4><ul><li>动态获取屏幕宽度 并赋予font-size</li><li>应对于各视口+横竖屏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取手机屏幕宽度</span></span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="comment">//动态设置html的font-size</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth / <span class="number">6.4</span>+ <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//设计稿基准640px则：640/100=6.4</span></span><br><span class="line"><span class="comment">//页面元素rem = 设计稿尺寸 / 100 rem</span></span><br></pre></td></tr></table></figure><h4 id="其他rem："><a href="#其他rem：" class="headerlink" title="其他rem："></a>其他rem：</h4><p>背景：在 <code>1080px</code> 的视觉稿中，左上角有个logo，宽度是 <code>180px</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width"</span>&gt; <span class="comment">//最低设置</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取手机屏幕宽度</span></span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="comment">//动态设置html的font-size</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>sass</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义方法：calc</span></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">$val</span>)</span>&#123;</span><br><span class="line">    @<span class="keyword">return</span> $val / <span class="number">1080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo&#123;</span><br><span class="line">    width : calc(<span class="number">180</span>rem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍图适配方法"><a href="#倍图适配方法" class="headerlink" title="倍图适配方法"></a>倍图适配方法</h2><h3 id="普通图片："><a href="#普通图片：" class="headerlink" title="普通图片："></a>普通图片：</h3><h4 id="js-img异步加载图片"><a href="#js-img异步加载图片" class="headerlink" title="js+img异步加载图片"></a>js+img异步加载图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;img id=<span class="string">"img"</span> data-src1x=<span class="string">"xxx@1x.jpg"</span> data-src2x=<span class="string">"xxx@2x.jpg"</span> data-src3x=<span class="string">"xxx@3x.jpg"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="keyword">if</span>(dpr &gt; <span class="number">3</span>)&#123;</span><br><span class="line">    dpr = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgSrc = $(<span class="string">'#img'</span>).data(<span class="string">'src'</span>+dpr+<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = imgSrc;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params">imgObj</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#img'</span>).remove().prepend(imgObj);<span class="comment">//替换img对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="srcset-标签"><a href="#srcset-标签" class="headerlink" title="srcset 标签"></a><code>srcset</code> 标签</h4><blockquote><p>基于WebKit特性srcset</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"1.jpg"</span> srcset=<span class="string">"2.jpg 2x, 3.jpg 3x"</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="http://developer.51cto.com/art/201309/410720.htm" target="_blank" rel="noopener">参考</a></p><h3 id="背景图片："><a href="#背景图片：" class="headerlink" title="背景图片："></a>背景图片：</h3><h4 id="media-query"><a href="#media-query" class="headerlink" title="media query"></a>media query</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 普通显示屏(设备像素比例小于等于1)使用1倍的图 */</span></span><br><span class="line">.css&#123;</span><br><span class="line">    background-image: url(img_1x.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高清显示屏(设备像素比例大于等于2)使用2倍图  */</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">    .css&#123;</span><br><span class="line">        background-image: url(img_2x.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高清显示屏(设备像素比例大于等于3)使用3倍图  */</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio:<span class="number">3</span>)&#123;</span><br><span class="line">    .css&#123;</span><br><span class="line">        background-image: url(img_3x.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="横、竖屏："><a href="#横、竖屏：" class="headerlink" title="横、竖屏："></a>横、竖屏：</h2><blockquote><p>需要针对横、竖屏编写不同的css</p></blockquote><blockquote><p>动态设置字体尺寸（不推荐）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    deviceHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line"></span><br><span class="line"><span class="comment">//横屏状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">90</span> || <span class="built_in">window</span>.orientation === <span class="number">-90</span>) &#123;</span><br><span class="line">    deviceWidth = deviceHeight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置根字体大小</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><h4 id="JS检测横竖屏"><a href="#JS检测横竖屏" class="headerlink" title="JS检测横竖屏"></a>JS检测横竖屏</h4><p>js获取屏幕旋转方向：<code>window.orientation</code></p><ul><li>0 - 正常方向</li><li>-90 - 屏幕顺时钟旋转90度</li><li>90 - 屏幕逆时针旋转90度</li><li>180 - 屏幕旋转180度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.orientation === <span class="number">0</span> ? alert(<span class="string">'竖屏'</span>) : alert(<span class="string">'横屏'</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">180</span> || <span class="built_in">window</span>.orientation === <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'竖屏状态！'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">90</span> || <span class="built_in">window</span>.orientation === <span class="number">-90</span> )&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'横屏状态！'</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="CSS判断横竖屏"><a href="#CSS判断横竖屏" class="headerlink" title="CSS判断横竖屏"></a>CSS判断横竖屏</h4><p>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 竖屏 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> media=<span class="string">"all and (orientation:portrait)"</span> href=<span class="string">"portrait.css"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 竖屏 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> media=<span class="string">"all and (orientation:landscape)"</span> href=<span class="string">"landscape.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>方式二：写在同一个CSS中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (orientation: portrait) &#123;</span><br><span class="line">  <span class="comment">/*竖屏 css*/</span></span><br><span class="line">&#125; </span><br><span class="line">@media screen and (orientation: landscape) &#123;</span><br><span class="line">  <span class="comment">/*横屏 css*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;rem计算&quot;&gt;&lt;a href=&quot;#rem计算&quot; class=&quot;headerlink&quot; title=&quot;rem计算&quot;&gt;&lt;/a&gt;rem计算&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/gao531162436/article/detail
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack - 基础</title>
    <link href="/2019/05/09/webpack%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/webpack - 基础/</id>
    <published>2019-05-09T03:11:41.887Z</published>
    <updated>2019-05-09T03:15:16.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>主要用于对项目文件进行打包，减少用户浏览时的请求数量，并对es6、es7降级，解决css兼容性等问题</p><p><a href="https://www.npmjs.com/package/webpack" target="_blank" rel="noopener">npm</a>        <a href="https://webpack.docschina.org/" target="_blank" rel="noopener">官网</a></p><p><strong>适用于： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 样式表</span><br><span class="line">   .css     .less     .scss</span><br><span class="line">2. JS文件</span><br><span class="line">   .js        .ts (typescript)</span><br><span class="line">3. 图片</span><br><span class="line">   .jpg/.jpeg    .png   .gif    .bmp  </span><br><span class="line">4. 字体文件</span><br><span class="line">   .ttf     .eot    .woff    .woff2    .svg</span><br><span class="line">5. 模板文件</span><br><span class="line">   .vue   .jsx(react)</span><br></pre></td></tr></table></figure><p><strong>不适用： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 合并多个js文件为一个</span><br><span class="line">2. 模块化开发</span><br><span class="line">3. 把less、scss、es6/es7等高级语言编译为低级的，使得浏览器可以识别</span><br><span class="line">4. 编译图片为base64格式，减少网络请求次数</span><br></pre></td></tr></table></figure><p>其他打包工具：</p><ul><li>Grunt</li><li>Gulp</li></ul><hr><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>基于node环境，需要配置基本的入口文件。输入/输出文件夹</p></blockquote><p><strong>默认只对.js文件打包，若需要处理额外的格式，需要安装对应的包</strong></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(以下为默认情况下的配置，部分内容可通过配置文件调整)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>初始化</span><br><span class="line">初始化环境：npm init -y</span><br><span class="line">在项目文件夹中创建<span class="string">"src"</span>文件夹，用于默认的入口</span><br><span class="line">    创建入口文件:index.js、index.html</span><br><span class="line"><span class="number">2.</span>安装</span><br><span class="line">安装webpack和其依赖webpack-cli：npm i webpack webpack-cli -D</span><br><span class="line">（-d 等于将依赖安装到‘devDependencies’模块，该模块用于开发环境）</span><br><span class="line"><span class="number">3.</span>配置运行指令</span><br><span class="line">在package.json文件的scripts节点中，新增一个dev节点（自定义名称）</span><br><span class="line"><span class="string">"pack"</span>: <span class="string">"webpack"</span></span><br><span class="line">打包时，运行命令：npm run pack，即可打包</span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在项目根目录下，创建一个 webpack.config.js 文件</span><br><span class="line"></span><br><span class="line">自定义配置：（具体参考官网）</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// production:生产，产生优化压缩的打包文件</span></span><br><span class="line">    <span class="comment">// development:开发，产生有注释、空白、回车 可读性好的打包文件</span></span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: path.join(__dirname, <span class="string">'./src/index.js'</span>), <span class="comment">//  修改入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出目录</span></span><br><span class="line">        filename: <span class="string">'main.js'</span> <span class="comment">// 输出打包文件名字设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="HTML页面处理"><a href="#HTML页面处理" class="headerlink" title="HTML页面处理"></a>HTML页面处理</h3><blockquote><p>插件：html-webpack-plugin</p></blockquote><p><a href="https://webpack.docschina.org/concepts/#%E6%8F%92%E4%BB%B6-plugins-" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>, <span class="comment">//被打包的html模板文件名称</span></span><br><span class="line">        <span class="comment">//filename: 'index.html' //生成打包文件名称， 默认是index.html</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常规打包即可</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p><a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">参考</a></p><p><strong>loader : </strong> javascript函数，以模块形式存在，webpack打包过程中，遇到不能处理的内容就会寻找对应的loader处理</p><blockquote><p>处理不同内容的loader：</p><ul><li>css内容：            style-loader 和 css-loader</li><li>less内容：            less-loader 和 less(less-loader的依赖)</li><li>图片内容：            url-loader 和 file-loader</li><li>ES6/ES7内容：        babel-loader</li></ul></blockquote><p><strong>配置参考</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">没有参数的 <span class="number">1</span>个或多个 加载器配置</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">use</span>: 加载器 &#125;,<span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">use</span>: [加载器,加载器] &#125;,<span class="comment">//多个 数组元素 </span></span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器&#125;,<span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器!加载器&#125;,<span class="comment">//多个 !叹号分隔</span></span><br><span class="line"></span><br><span class="line">有options参数的 <span class="number">1</span>个或多个 加载器配置</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;, <span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, </span><br><span class="line">use:[</span><br><span class="line">&#123;<span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;,</span><br><span class="line">&#123;<span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">&#125;, <span class="comment">//多个</span></span><br></pre></td></tr></table></figure><h4 id="css文件处理"><a href="#css文件处理" class="headerlink" title="css文件处理"></a>css文件处理</h4><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 里添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// css名字结尾文件 处理loader设定</span></span><br><span class="line">        use: [</span><br><span class="line">            <span class="comment">// 以下两个loader有顺序要求，css-loader在后，style-loader在前</span></span><br><span class="line">            <span class="comment">// 它们在执行的时候是先执行css-loader在执行style-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">"style-loader"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//精简写法</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">    &#125;, ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="less处理"><a href="#less处理" class="headerlink" title="less处理"></a>less处理</h4><blockquote><p>最好先安装css-loader、style-loader</p></blockquote><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"less-loader"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url处理-img"><a href="#url处理-img" class="headerlink" title="url处理(+img)"></a>url处理(+img)</h4><blockquote><p>url-loader</p><p>该loader会将url引用的img图片转换成base64格式（可设置阈值）</p><p><strong>超过阈值的内容会交给</strong> <code>file-loader</code>处理</p></blockquote><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader url-loader</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//limit  代表 阈值尺寸</span></span><br></pre></td></tr></table></figure><h4 id="JS降级"><a href="#JS降级" class="headerlink" title="JS降级"></a>JS降级</h4><blockquote><p>babel-loader</p></blockquote><p><a href="https://babel.docschina.org/" target="_blank" rel="noopener">官网</a>    <a href="https://webpack.docschina.org/loaders/babel-loader/" target="_blank" rel="noopener">webpack</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同版本的安装：</span></span><br><span class="line"></span><br><span class="line">npm install babel-loader@<span class="number">8.0</span><span class="number">.0</span>-beta<span class="number">.0</span> @babel/core @babel/preset-env webpack</span><br><span class="line">npm install babel-loader babel-core babel-preset-env webpack</span><br><span class="line">npm install --save-dev babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><p><strong>配置 v1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>推荐配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 设置babel-loader，使得js中es6等高级语法可以降级为es5标准，兼容各个浏览器</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// node_modules目录的js文件不要给处理</span></span><br><span class="line">        use: <span class="string">'babel-loader'</span>, <span class="comment">// 调用具体loader</span></span><br><span class="line">        <span class="comment">// 具体preset在其他位置配置，给"根目录"制作.babelrc文件并做配置即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同级目录创建“.babelrc”，输入：</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-class-properties"</span>]     <span class="comment">//处理“静态”成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理“静态”成员"><a href="#处理“静态”成员" class="headerlink" title="处理“静态”成员"></a>处理“静态”成员</h5><blockquote><p>需要安装插件:class-properties</p></blockquote><p><a href="https://babel.docschina.org/docs/en/plugins" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span></span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在.babelrc中配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-class-properties"</span>]     <span class="comment">//处理“静态”成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在webpack.config.js中配置   ？？？</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-loader"><a href="#Vue-loader" class="headerlink" title="Vue-loader"></a>Vue-loader</h3><blockquote><p>处理.vue格式的文件</p></blockquote><p><a href="https://vue-loader.vuejs.org/" target="_blank" rel="noopener">官网</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            use: <span class="string">'vue-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3 </span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="简单服务器（实时预览）"><a href="#简单服务器（实时预览）" class="headerlink" title="简单服务器（实时预览）"></a>简单服务器（实时预览）</h4><blockquote><p>一个简单的 web 服务器，并且能够实时重新加载(live reloading)。</p></blockquote><blockquote><p>只会在内存中运行，不会生成对应的实体文件</p></blockquote><p>插件：webpack-dev-sever</p><p><a href="https://webpack.docschina.org/guides/development/#%E4%BD%BF%E7%94%A8-webpack-dev-server" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p><strong>配置 1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 中添加</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">contentBase: <span class="string">'./dist'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或 详细配置</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">//是否压缩</span></span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>, <span class="comment">// 服务主机ip地址</span></span><br><span class="line">    port: <span class="number">9000</span>, <span class="comment">//端口号</span></span><br><span class="line">    open: <span class="literal">true</span> <span class="comment">// 自动打开浏览器访问效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置 2</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 package.json 里添加一个启动方式</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"line"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run line</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描
      
    
    </summary>
    
      <category term="webpack" scheme="/categories/webpack/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>雅虎前端优化35条规则</title>
    <link href="/2019/05/09/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%9635%E6%9D%A1%E8%A7%84%E5%88%99/"/>
    <id>/2019/05/09/雅虎前端优化35条规则/</id>
    <published>2019-05-09T03:03:30.349Z</published>
    <updated>2019-05-09T03:08:48.155Z</updated>
    
    <content type="html"><![CDATA[<p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。翻译并不逐字逐句，部分难以逐字翻译的被意译了，另外一些不重要的举例等也被精简。</p><p>原文： <a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a>。</p><p>如何让web页面更快，雅虎团队实践总结了7类35条规则，下面一一列出。</p><h2 id="1-Content"><a href="#1-Content" class="headerlink" title="1. Content"></a>1. Content</h2><h3 id="1-1-Make-Fewer-HTTP-Requests"><a href="#1-1-Make-Fewer-HTTP-Requests" class="headerlink" title="1.1 Make Fewer HTTP Requests"></a>1.1 Make Fewer HTTP Requests</h3><p><strong>Minimize HTTP Requests</strong>减少/最小化 http 请求数。</p><p>到终端用户的响应时间80%花在前端：大部分用于下载组件（js/css/image/flash等等）。减少组件数就是减少渲染页面所需的http请求数。这是更快页面的关键。</p><p>减少组件数的一个方法就是简化页面设计。保持富内容的页面且能减少http请求，有以下几个技术：</p><ul><li>Combined files。合并文件，如合并js，合并css都能减少请求数。如果页面间脚本和样式差异很大，合并会更具挑战性。</li><li>CSS Sprites。雪碧图可以合并多个背景图片，通过<code>background-image</code> 和 <code>background-position</code> 来显示不同部分。</li><li>Image maps。合并多个图片到一个图片，一般用于如导航条。由于定义坐标的枯燥和易错，一般<em>不推荐</em>。</li><li>Inline images。使用<code>data:url scheme</code>来內连图片。</li></ul><p>减少请求数是为第一次访问页面的用户提高性能的最重要的指导。</p><h3 id="1-2-Reduce-DNS-Lookups"><a href="#1-2-Reduce-DNS-Lookups" class="headerlink" title="1.2 Reduce DNS Lookups"></a>1.2 Reduce DNS Lookups</h3><p>减少DNS查询。</p><p>就像电话簿，你在浏览器地址栏输入网址，通过DNS查询得到网站真实IP。</p><p>DNS查询被缓存来提高性能。这种缓存可能发生在特定的缓存服务器（ISP/local area network维护），或者用户的计算机。DNS信息留存在操作系统DNS缓存中（在windows中就是 <em>DNS Client Serve</em> ）。大多浏览器有自己的缓存，独立于操作系统缓存。只要浏览器在自己的缓存里有某条DNS记录，它就不会向操作系统发DNS解析请求。</p><p>IE默认缓存DNS记录30分钟，FireFox默认缓存1分钟。</p><p>当客户端的DNS缓存是空的，DNS查找次数等于页面中的唯一域名数。</p><p>减少DNS请求数可能会减少并行下载数。避免DNS查找减少响应时间，但减少并行下载数可能会增加响应时间。指导原则是组件可以分散在至少2个但不多于4个的不同域名。这是两者的妥协。</p><h3 id="1-3-Avoid-Redirects"><a href="#1-3-Avoid-Redirects" class="headerlink" title="1.3 Avoid Redirects"></a>1.3 Avoid Redirects</h3><p>避免跳转。</p><p>跳转用<code>301</code>或<code>302</code>状态码来达成。一个<code>301</code>响应http头的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Location: http://example.com/newuri</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure><p>浏览器自动跳转到<code>Location</code>指定的路径。跳转所需的所有信息都在http头，所以http主体一般是空的。<code>301`</code>302<code>响应一般不会被缓存，除非有额外的头部信息，比如</code>Expires<code>或</code>Cache-Control<code>指定要缓存。</code>meta<code>刷新标签或 JavaScript 也可以跳转，但如果真要跳转，</code>3xx`跳转更好，主要是保证返回键可用。</p><p>跳转显然拖慢响应速度。在跳转的页面被获取前浏览器没什么能渲染，没什么组件能下载。</p><p>最浪费的跳转之一发生在url尾部slash（/）缺失。比如<code>http://astrology.yahoo.com/astrology</code>会<code>301</code>跳转到<code>http://astrology.yahoo.com/astrology/</code>。这可以被Apache等服务器修复，用<code>Alias</code>，<code>mod_rewrite</code>等等。</p><h3 id="1-4-Make-Ajax-Cacheable"><a href="#1-4-Make-Ajax-Cacheable" class="headerlink" title="1.4 Make Ajax Cacheable"></a>1.4 Make Ajax Cacheable</h3><p>让Ajax可缓存。</p><p>使用ajax的好处是可以向用户提供很快的反馈，因为它是向后台异步请求数据。但是，这些异步请求不保证用户等待的时间——异步不意味着瞬时。</p><p>提高ajax性能的最重要的方法是让响应被缓存，即在<a href="https://developer.yahoo.com/performance/rules.html#expires" target="_blank" rel="noopener">Add an Expires or a Cache-Control Header</a>中讨论的 Expires 。其它方法是：</p><ul><li>gzip组件</li><li>减少DNS查找</li><li>压缩JS</li><li>避免跳转</li><li>设置ETags</li></ul><h3 id="1-5-Post-load-Components"><a href="#1-5-Post-load-Components" class="headerlink" title="1.5 Post-load Components"></a>1.5 Post-load Components</h3><p>延迟加载组件。</p><p>再看看你的页面然后问问自己，“什么是页面初始化必须的？”。剩下的内容和组件可以延迟。</p><p>JavaScript是理想的（延迟）候选者，可以切分到<code>onload</code>事件之前和之后。比如拖放的js库可以延迟，因为拖动必须在页面初始化之后。其它可延迟的包括隐藏的内容，折叠起来的图片等等。</p><h3 id="1-6-Preload-Components"><a href="#1-6-Preload-Components" class="headerlink" title="1.6 Preload Components"></a>1.6 Preload Components</h3><p>预加载组件。</p><p>预加载看起来与延迟加载相反，但它的确有个不同的目标。通过预加载你可以利用浏览器的空闲时间来请求你将来会用到的组件。这样当用户访问下一个页面时，你会有更多的组件已经在缓存中，这样会极大加快页面加载。</p><p>有几种预加载类型：</p><ul><li>无条件预加载：一旦<code>onload</code>触发，你立即获取另外的组件。比如谷歌会在主页这样加载搜索结果页面用到的雪碧图。</li><li>有条件预加载：基于用户动作，你推测用户下一步会去哪里并加载相应组件。</li><li>预期的预加载：在发布重新设计（的网站）前提前加载。在旧网页预加载新网页的部分组件，那么切换到新网页时就不会是没有任何缓存了。</li></ul><h3 id="1-7-Reduce-the-Number-of-DOM-Elements"><a href="#1-7-Reduce-the-Number-of-DOM-Elements" class="headerlink" title="1.7 Reduce the Number of DOM Elements"></a>1.7 Reduce the Number of DOM Elements</h3><p>减少dom数。</p><p>一个复杂的页面意味着更多的内容要下载，以及更慢的dom访问。比如在有500dom数量的页面添加事件处理就和有5000dom数量的不同。</p><p>如果你的页面dom元素很多，那么意味着你可能需要删除无用的内容和标签来优化。</p><h3 id="1-8-Split-Components-Across-Domains"><a href="#1-8-Split-Components-Across-Domains" class="headerlink" title="1.8 Split Components Across Domains"></a>1.8 Split Components Across Domains</h3><p>把组件分散到不同的域名。</p><p>把组件分散到不同的域名允许你最大化并行下载数。由于DNS查询的副作用，最佳的不同域名数是2-4。</p><h3 id="1-9-Minimize-the-Number-of-iframes"><a href="#1-9-Minimize-the-Number-of-iframes" class="headerlink" title="1.9 Minimize the Number of iframes"></a>1.9 Minimize the Number of iframes</h3><p>最小化iframe的数量。</p><p>iframe允许html文档被插入到父文档。</p><p><iframe>优点：</iframe></p><ul><li>帮助解决缓慢的第三方内容的加载，如广告和徽章</li><li>安全沙盒</li><li>并行下载脚本</li></ul><p><iframe>缺点：</iframe></p><ul><li>即使空的也消耗（资源和时间）</li><li>阻塞了页面的<code>onload</code></li><li>非语义化（标签）</li></ul><h3 id="1-10-No-404s"><a href="#1-10-No-404s" class="headerlink" title="1.10 No 404s"></a>1.10 No 404s</h3><p>不要404。</p><p>http请求是昂贵的，所以发出http请求但获得没用的响应（如404）是完全不必要的，并且会降低用户体验。</p><p>一些网站会有特别的404页面提高用户体验，但这仍然会浪费服务器资源。特别坏的是当链接指向外部js但却得到404结果。这样首先会降低（占用）并行下载数，其次浏览器可能会把404响应体当作js来解析，试图从里面找出可用的东西。</p><h2 id="2-Server"><a href="#2-Server" class="headerlink" title="2. Server"></a>2. Server</h2><h3 id="2-1-Use-a-Content-Delivery-Network"><a href="#2-1-Use-a-Content-Delivery-Network" class="headerlink" title="2.1 Use a Content Delivery Network"></a>2.1 Use a Content Delivery Network</h3><p>使用CDN。</p><p>用户接近你的服务器会减少响应时间。把你的内容发布到多个，地理上分散的服务器可以让页面加载更快。但怎么开始？</p><p>首先不要试图把你的架构重新设计成分布式架构。因为可能引进更多复杂性和不可控。</p><p>记住80-90%的终端用户响应时间花费在下载页面中的所有组件：图片、样式、脚本、falsh等等。这是<em>Performance Golden Rule</em>。不要从困难的重新设计后台架构开始，最好首先分发你的静态内容。这不仅可以减少响应时间，用CDN还很容易来做。</p><p>CDN是一群不同地点的服务器，可以更高效地分发内容到用户。一些大公司有自己的CDN。</p><h3 id="2-2-Add-an-Expires-or-a-Cache-Control-Header"><a href="#2-2-Add-an-Expires-or-a-Cache-Control-Header" class="headerlink" title="2.2 Add an Expires or a Cache-Control Header"></a>2.2 Add an Expires or a Cache-Control Header</h3><p>加<code>Expires</code>或者<code>Cache-Control</code>头部。</p><p>这条规则有两个方面：</p><ul><li>对静态组件：通过设置<code>Expires</code>头部来实现“永不过期”策略。</li><li>对动态组件：用合适的<code>Cache-Control</code>头部来帮助浏览器进行有条件请求。</li></ul><p>页面越来越丰富，意味着更多脚本，样式，图片等等。第一次访问的用户可能需要发出多个请求，但使用Expires可以让这些组件被缓存。这避免了访问子页面时没必要的http请求。Expires一般用在图片上，但应该用在所有的组件上。</p><p>浏览器（以及代理）使用缓存来减少http请求数，加快页面加载。服务器使用http响应的<code>Expires</code>头部来告诉客户端一个组件可以缓存多久。比如下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Thu, 15 Apr 2010 20:00:00 GMT //2010-04-15之前都是稳定的</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，如果你设置了<code>Expires</code>头部，当组件更新后，你必须更改文件名。</p><h3 id="2-3-Gzip-Components"><a href="#2-3-Gzip-Components" class="headerlink" title="2.3 Gzip Components"></a>2.3 Gzip Components</h3><p>传输时用gzip等压缩组件。</p><p>http请求或响应的传输时间可以被前端工程师显著减少。终端用户的带宽，ISP，接近对等交换点等等没法被开发团队控制，但是，压缩可以通过减少http响应的大小减少响应时间。</p><p>从<code>HTTP/1.1</code>开始，客户端通过http请求中的<code>Accept-Encoding</code>头部来提示支持的压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><p>如果服务器看到这个头部，它可能会选用列表中的某个方法压缩响应。服务器通过<code>Content-Encoding</code>头部提示客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><p>gzip一般可减小响应的70%。尽可能去gzip更多（文本）类型的文件。html，脚本，样式，xml和json等等都应该被gzip，而图片，pdf等等不应该被gzip，因为它们本身已被压缩过，gzip它们只是浪费cpu，甚至增加文件大小。</p><h3 id="2-4-Configure-ETags"><a href="#2-4-Configure-ETags" class="headerlink" title="2.4 Configure ETags"></a>2.4 Configure ETags</h3><p>实体标记（Entity tags，ETag）是服务器和浏览器之间判断浏览器缓存中某个组件是否匹配服务器端原组件的一种机制。实体就是组件：图片，脚本，样式等等。ETag被当作验证实体的比最后更改（<code>last-modified</code>）日期更高效的机制。服务器这样设置组件的ETag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">Content-Length: 12195</span><br></pre></td></tr></table></figure><p>之后，如果浏览器要验证组件，它用<code>If-None-Match</code>头部来传ETag给服务器。如果ETag匹配，服务器返回304：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /i/yahoo.gif HTTP/1.1</span><br><span class="line">Host: us.yimg.com</span><br><span class="line">If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">HTTP/1.1 304 Not Modified</span><br></pre></td></tr></table></figure><p>ETag的问题是它们被构造来使它们对特定的运行这个网站的服务器唯一。浏览器从一个服务器获取组件，之后向另一个服务器验证，ETag将不匹配。然而服务器集群是处理请求的通用解决方案。</p><p>如果不能解决多服务器间的ETag匹配问题，那么删除ETag可能更好。</p><h3 id="2-5-Flush-the-Buffer-Early"><a href="#2-5-Flush-the-Buffer-Early" class="headerlink" title="2.5 Flush the Buffer Early"></a>2.5 Flush the Buffer Early</h3><p>早一点刷新buffer（尽早给浏览器数据）。</p><p>当用户请求一个页面，服务器一般要花200-500ms来拼凑整个页面。这段时间，浏览器是空闲的（等数据返回）。在php，有个方法<code>flush()</code>允许你传输部分准备好的html响应给浏览器。这样的话浏览器就可以开始下载组件，而同时后台可以继续生成页面剩下的部分。这种好处更多是在忙碌的后台或轻前端网站可以看到。</p><p>一个比较好的flush的位置是在<code>head</code>之后，因为浏览器可以加载其中的样式和脚本文件，而后台继续生成页面剩余部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- css, js --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;?php flush(); ?&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- content --&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-Use-GET-for-AJAX-Requests"><a href="#2-6-Use-GET-for-AJAX-Requests" class="headerlink" title="2.6 Use GET for AJAX Requests"></a>2.6 Use GET for AJAX Requests</h3><p>ajax请求用get。</p><p><a href="http://mail.yahoo.com/" target="_blank" rel="noopener">Yahoo! Mail</a>团队发现当使用<code>XMLHttpRequest</code>，POST 被浏览器实现为两步：首先发送头部，然后发送数据。所以使用GET最好，仅用一个TCP包发送（除非cookie太多）。IE的url长度限制是2K。</p><p>POST但不提交任何数据根GET行为类似，但从语义上讲，获取数据应该用GET，提交数据到服务器用POST。</p><h3 id="2-7-Avoid-Empty-Image-src"><a href="#2-7-Avoid-Empty-Image-src" class="headerlink" title="2.7 Avoid Empty Image src"></a>2.7 Avoid Empty Image src</h3><p>避免空src的图片。</p><p>空src属性的图片的行为可能跟你预期的不一样。它有两种形式：</p><ol><li>html标签：<code>&lt;img src=&quot;&quot;&gt;</code></li><li>js：<code>var img = new Image(); img.src = &quot;&quot;;</code></li></ol><p>两种都会造成同一种后果：浏览器会向你的服务器发请求。</p><ul><li>IE，向页面所在的目录发请求。</li><li>Safari和Chrome，请求实际的页面。</li><li>FireFox3及之前和Safari/Chrome一样，但从3.5开始修复问题，不再发请求。</li><li>Opera遇到空图片src不做任何事。</li></ul><p><strong>为什么这种行为很糟糕？</strong></p><ol><li>由于发送大量的意料之外的流量，会削弱服务器，尤其那些每天pv上百万的页面。</li><li>浪费服务器计算周期取生成不会被浏览的页面。</li><li>可能会破坏用户数据。如果你在跟踪请求状态，通过cookie或其它，你可能会破坏数据。即使image的请求不会返回图片，但所有的头部数据都被浏览器读取了，包括cookie。即使剩下的响应体被丢弃，破坏可能已经发生。</li></ol><p>这种行为的根源是uri解析发生在浏览器。RFC 3986 定义了这种行为，空字符串被当作相对路径，Firefox, Safari, 和 Chrome都正确解析，而IE错误。总之，浏览器解析空字符串为相对路径的行为被认为是符合预期的。</p><p>html5在<em>4.8.2</em>添加了对标签src属性的描述，指导浏览器不要发出额外的请求。</p><blockquote><p>The src attribute must be present, and must contain a valid URL referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted. If the base URI of the element is the same as the document’s address, then the src attribute’s value must not be the empty string.</p></blockquote><p>幸运的是将来浏览器不会有这个问题了（在图片上）。不幸的是，<code>&lt;script src=&quot;&quot;&gt;</code>和<code>&lt;link href=&quot;&quot;&gt;</code>没有这样的规范。</p><h2 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3 Cookie"></a>3 Cookie</h2><h3 id="3-1-Reduce-Cookie-Size"><a href="#3-1-Reduce-Cookie-Size" class="headerlink" title="3.1 Reduce Cookie Size"></a>3.1 Reduce Cookie Size</h3><p>http cookie的使用有多种原因，比如授权和个性化。cookie的信息通过http头部在浏览器和服务器端交换。尽可能减小cookie的大小来降低响应时间。</p><ul><li>消除不必要的cookie。</li><li>尽可能减小cookie的大小来降低响应时间。</li><li>注意设置cookie到合适的域名级别，则其它子域名不会被影响。</li><li>正确设置Expires日期。早一点的Expires日期或者没有会尽早删除cookie，优化响应时间。</li></ul><h3 id="3-2-Use-Cookie-free-Domains-for-Components"><a href="#3-2-Use-Cookie-free-Domains-for-Components" class="headerlink" title="3.2 Use Cookie-free Domains for Components"></a>3.2 Use Cookie-free Domains for Components</h3><p>用没有cookie的域名提供组件。</p><p>当浏览器请求静态图片并把cookie一起发送到服务器时，cookie此时对服务器没什么用处。所以这些cookie只是增加了网络流量。所以你应该保证静态组件的请求是没有cookie的。可以创建一个子域名来托管所有静态组件。</p><p>比如，你域名是<code>www.example.org</code>，可以把静态组件托管在<code>static.example.org</code>。不过，你如果把cookie设置在顶级域名<code>example.org</code>下，这些cookie仍然会被传给<code>static.example.org</code>。这种情况下，启用一个全新的域名来托管静态组件。</p><p>另外一个用没有cookie的域名提供组件的好处是，某些代理可能会阻止缓存待cookie的静态组件请求。</p><h2 id="4-CSS"><a href="#4-CSS" class="headerlink" title="4. CSS"></a>4. CSS</h2><h3 id="4-1-Put-Stylesheets-at-the-Top"><a href="#4-1-Put-Stylesheets-at-the-Top" class="headerlink" title="4.1 Put Stylesheets at the Top"></a>4.1 Put Stylesheets at the Top</h3><p>把样式放在顶部。</p><p>研究雅虎网页性能时发现把样式表移到<code>&lt;head&gt;</code>里会让页面更快。这是因为把样式表移到<code>&lt;head&gt;</code>里允许页面逐步渲染。</p><p>关注性能的前端工程师希望页面被逐步渲染，这时因为，我们希望浏览器尽早渲染获取到的任何内容。这对大页面和网速慢的用户很重要。给用户视觉反馈，比如进度条的重要性已经被大量研究和记录。在我们的情况中，<code>HTML</code>页面就是进度条。当浏览器逐步加载页面头部，导航条，logo等等，这些都是给等待页面的用户的视觉反馈。这优化了整体用户体验。</p><p>把样式表放在文档底部的问题是它阻止了许多浏览器的逐步渲染，包括IE。这些浏览器阻止渲染来避免在样式更改时需要重绘页面元素。所以用户会卡在白屏。</p><p><a href="http://www.w3.org/TR/html4/struct/links.html#h-12.3" target="_blank" rel="noopener">HTML规范</a>清楚表明样式应该在<code>&lt;head&gt;</code>里。</p><h3 id="4-2-Avoid-CSS-Expressions"><a href="#4-2-Avoid-CSS-Expressions" class="headerlink" title="4.2 Avoid CSS Expressions"></a>4.2 Avoid CSS Expressions</h3><p>避免CSS表达式。</p><p>CSS表达式是强大的（可能也是危险的）设置动态CSS属性的方法。IE5开始支持，IE8开始不赞成使用。例如，背景颜色可以设置成每小时轮换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: expression( (new Date()).getHours()%2 ? &quot;#B8D4FF&quot; : &quot;#F08A00&quot; );</span><br></pre></td></tr></table></figure><p>CSS表达式的问题是它们可能比大多数人预期的计算的更频繁。它们不仅在页面载入和调整大小时重新计算，也在滚动页面甚至是用户在页面上移动鼠标时计算。比如在页面上移动鼠标可能轻易计算超过10000次。</p><p>要避免CSS表达式计算太多次，可以在它第一次计算后替换成确切值，或者用事件处理函数而不是CSS表达式。</p><h3 id="4-3-Choose-lt-link-gt-over-import"><a href="#4-3-Choose-lt-link-gt-over-import" class="headerlink" title="4.3 Choose &lt;link&gt; over @import"></a>4.3 Choose <code>&lt;link&gt;</code> over <code>@import</code></h3><p>选择<code>&lt;link&gt;</code>而不是<code>@import</code>。</p><p>之前的一个最佳原则是说CSS应该在顶部来允许逐步渲染。</p><p>在IE用<code>@import</code>和把CSS放到页面底部行为一致，所以最好别用。</p><h3 id="4-4-Avoid-Filters"><a href="#4-4-Avoid-Filters" class="headerlink" title="4.4 Avoid Filters"></a>4.4 Avoid Filters</h3><p>避免使用（IE）过滤器。</p><p>IE专有的<code>AlphaImageLoader</code>过滤器用于修复IE7以下版本的半透明真彩色PNG的问题。这个过滤器的问题是它阻止了渲染，并在图片下载时冻结了浏览器。另外它还引起内存消耗，并且它被应用到每个元素而不是每个图片，所以问题（的严重性）翻倍了。</p><p>最佳做法是放弃<code>AlphaImageLoader</code>，改用PNG8来优雅降级。</p><h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h2><h3 id="5-1-Put-Scripts-at-the-Bottom"><a href="#5-1-Put-Scripts-at-the-Bottom" class="headerlink" title="5.1 Put Scripts at the Bottom"></a>5.1 Put Scripts at the Bottom</h3><p>把脚本放到底部。</p><p>脚本引起的问题是它们阻塞了并行下载。<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4" target="_blank" rel="noopener">HTTP1.1规范</a>建议浏览器每个域名下不要一次下载超过2个组件。如果你的图片分散在不同服务器，那么你能并行下载多个图片。但<strong>当脚本在下载，浏览器不会再下载其它组件，即使在不同域名下</strong>。</p><p>有些情况下把脚本移动到底部并不简单。比如，脚本中用了<code>document.write</code>来插入内容，它就不能被移动到底部。另外有可能有作用域问题。但大多数情况，有方法可以解决这些问题。</p><p>一个替代建议是使用异步脚本。<code>defer</code>属性表明脚本不包含<code>document.write</code>，是提示浏览器继续渲染的线索。不幸的是，Firefox不支持。如果脚本能异步，那么也就可以移动到底部。</p><h3 id="5-2-Make-JavaScript-and-CSS-External"><a href="#5-2-Make-JavaScript-and-CSS-External" class="headerlink" title="5.2 Make JavaScript and CSS External"></a>5.2 Make JavaScript and CSS External</h3><p>使用外部JS和CSS。</p><p>这里的很多性能规则涉及外部组件怎么管理。但你首先要明白一个基本问题：JS和CSS是应该包含在外部文件还是內连在页面本身？</p><p>真实世界中使用外部文件一般会加快页面，因为JS和CSS文件被浏览器缓存了。內连的JS和CSS怎在每次HTML文档下载时都被下载。內连减少了http请求，但增加了HTML文档大小。另一方面，如果JS和CSS被缓存了，那么HTML文档可以减小大小而不增加HTTP请求。</p><p>核心因素，就是JS和CSS被缓存相对于HTML文档被请求的频率。尽管这个因素很难被量化，但可以用不同的指标来计算。如果网站用户每个session有多个pv，许多页面重用相同的JS和CSS，那么有很大可能用外部JS和CSS更好。</p><p>许多网站用这些指标计算后在中间位置。对这些网站来说，最佳方案还是用外部JS和CSS文件。唯一例外是內连更被主页偏爱，如<a href="http://www.yahoo.com/%E3%80%82%E4%B8%BB%E9%A1%B5%E6%AF%8F%E4%B8%AAsession%E5%8F%AF%E8%83%BD%E5%8F%AA%E6%9C%89%E5%B0%91%E9%87%8F%E7%9A%84%E7%94%9A%E8%87%B3%E4%B8%80%E4%B8%AApv%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E5%85%A7%E8%BF%9E%E5%8F%AF%E8%83%BD%E6%9B%B4%E5%BF%AB%E3%80%82" target="_blank" rel="noopener">http://www.yahoo.com/。主页每个session可能只有少量的甚至一个pv，这时候內连可能更快。</a></p><p>对多个页面的首页来说，可以通过技术减少（其它页面的）http请求。在首页用內连，初始化后动态加载外部文件，接下来的页面如果用到这些文件，就可以使用缓存了。</p><h3 id="5-3-Minify-JavaScript-and-CSS"><a href="#5-3-Minify-JavaScript-and-CSS" class="headerlink" title="5.3 Minify JavaScript and CSS"></a>5.3 Minify JavaScript and CSS</h3><p>压缩JS和CSS。</p><p>压缩就是删除代码中不必要的字符来减小文件大小，从而提高加载速度。当代码压缩时，注释删除，不需要的空格（空白，换行，tab）也被删除。</p><p>混淆是对代码可选的优化。它比压缩更复杂，并且可能产生bug。在对美国top10网站的调查，压缩可减小21%，而混淆可减小25%。</p><p>除了外部脚本和样式，內连的脚本和样式同样应该被压缩。</p><h3 id="5-4-Remove-Duplicate-Scripts"><a href="#5-4-Remove-Duplicate-Scripts" class="headerlink" title="5.4 Remove Duplicate Scripts"></a>5.4 Remove Duplicate Scripts</h3><p>删除重复的脚本。</p><p>在页面中引入相同的脚本两次会伤害性能。可能超出你的预料，美国top10网站的2家有重复脚本引入。两个主要因素造成同一页面引入相同脚本：团队大小和脚本数量。当确实引入重复脚本，会发出不必要的http请求和浪费js执行时间。</p><p>发出不必要的http请求发生在IE而不是Firefox。在IE，如果外部脚本引入两次且没有缓存，它会发出2个请求。即使脚本被缓存，刷新时也会发出额外请求。</p><p>除了增加http请求，时间被浪费在执行脚本多次上。不管IE还是Firefox都会执行多次。</p><p>一种避免多次引入脚本的方法是在模板系统实现一个脚本管理模块。</p><h3 id="5-5-Minimize-DOM-Access"><a href="#5-5-Minimize-DOM-Access" class="headerlink" title="5.5 Minimize DOM Access"></a>5.5 Minimize DOM Access</h3><p>最小化DOM访问。</p><p>用JS访问DOM元素是缓慢的，所以为了响应更好的页面，你应该：</p><ul><li>缓存访问过的元素的引用</li><li>在DOM树外更新节点，然后添加到DOM树</li><li>避免用JS实现固定布局</li></ul><h3 id="5-6-Develop-Smart-Event-Handlers"><a href="#5-6-Develop-Smart-Event-Handlers" class="headerlink" title="5.6 Develop Smart Event Handlers"></a>5.6 Develop Smart Event Handlers</h3><p>开发聪明的事件处理</p><p>有时候页面看起来不那么响应（响应速度慢），是因为绑定到不同元素的大量事件处理函数执行太多次。这是为什么使用<em>事件委托</em>是一种好方法。</p><p>另外，你不必等到<code>onload</code>事件来开始处理DOM树，<code>DOMContentLoaded</code>更快。大多时候你需要的只是想访问的元素已在DOM树中，所以你不必等到所有图片被下载。</p><h2 id="6-Images"><a href="#6-Images" class="headerlink" title="6 Images"></a>6 Images</h2><h3 id="6-1-Optimize-Images"><a href="#6-1-Optimize-Images" class="headerlink" title="6.1 Optimize Images"></a>6.1 Optimize Images</h3><p>优化图片</p><p>在设计师建好图片后，在上传图片到服务器前你仍可以做些事：</p><ul><li>检查gif图片的调色板大小是否匹配图片颜色数。</li><li>可以把gif转成png看看有没有变小。除了动画，gif一般可以转成png8。</li><li>运行<code>pngcrush</code>或其它工具压缩png。</li><li>运行<code>jpegtran</code>或其它工具压缩jpeg。</li></ul><h3 id="6-2-Optimize-CSS-Sprites"><a href="#6-2-Optimize-CSS-Sprites" class="headerlink" title="6.2 Optimize CSS Sprites"></a>6.2 Optimize CSS Sprites</h3><p>优化CSS雪碧图</p><ul><li>把图片横向合并而不是纵向，横向更小。</li><li>把颜色近似的图片合并到一张雪碧图，这样可以让颜色数更少，如果低于256就可以用png8.</li><li>“Be mobile-friendly”并且合并时图片间的间距不要太大。这对图片大小影响不是太大，但客户端解压时需要的内存更少。100×100是10000个像素，1000×1000是1000000个像素。</li></ul><h3 id="6-3-Don’t-Scale-Images-in-HTML"><a href="#6-3-Don’t-Scale-Images-in-HTML" class="headerlink" title="6.3 Don’t Scale Images in HTML"></a>6.3 Don’t Scale Images in HTML</h3><p>不要在html中缩放图片</p><p>不要因为你可以设置图片的宽高就去用比你需要的大得多的图片。如果你需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</span><br></pre></td></tr></table></figure><p>那么，就用100x100px的图片，而不是500x500px的。</p><h3 id="6-4-Make-favicon-ico-Small-and-Cacheable"><a href="#6-4-Make-favicon-ico-Small-and-Cacheable" class="headerlink" title="6.4 Make favicon.ico Small and Cacheable"></a>6.4 Make favicon.ico Small and Cacheable</h3><p>favicon.ico小且缓存</p><p>favicon.ico是在你服务器根路径的图片。邪恶的是即使你不关心它，浏览器仍然会请求它。所以最好不要响应404。另外由于在同一服务器，每次请求favicon.ico时也会带上cookie。这个图片还会影响下载顺序，比如在IE，如果你在<code>onload</code>时下载额外的组件，fcvicon会在这些组件之前被下载。</p><p>怎么减轻favicon.ico的缺点？</p><ul><li>小，最好1K以下</li><li>设置Expires头部。也许可以安全地设置为几个月。</li></ul><h2 id="7-Mobile"><a href="#7-Mobile" class="headerlink" title="7 Mobile"></a>7 Mobile</h2><h3 id="7-1-Keep-Components-under-25K"><a href="#7-1-Keep-Components-under-25K" class="headerlink" title="7.1 Keep Components under 25K"></a>7.1 Keep Components under 25K</h3><p>保持组件小于25K</p><p>这个限制与iPhone不缓存大于25K的组件相关。注意，这是非压缩（uncompressed）的文件大小。在这里minification（压缩，不要与compress混淆）很重要，因为gzip无法满足（iPhone）。</p><h3 id="7-2-Pack-Components-into-a-Multipart-Document"><a href="#7-2-Pack-Components-into-a-Multipart-Document" class="headerlink" title="7.2 Pack Components into a Multipart Document"></a>7.2 Pack Components into a Multipart Document</h3><p>打包组件到一个多部父文档</p><p>打包组件到一个多部父文档类似于带附件的邮件。它帮助你在一个http请求中获取多个组件，但注意，iPhone不支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是大名鼎鼎的雅虎前端优化规则（&lt;strong&gt;Yslow&lt;/strong&gt;）的翻译。翻译并不逐字逐句，部分难以逐字翻译的被意译了，另外一些不重要的举例等也被精简。&lt;/p&gt;
&lt;p&gt;原文： &lt;a href=&quot;https://developer.yahoo.com/perfo
      
    
    </summary>
    
      <category term="扩展阅读" scheme="/categories/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="扩展阅读" scheme="/tags/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/05/07/hello-world/"/>
    <id>/2019/05/07/hello-world/</id>
    <published>2019-05-07T10:06:43.794Z</published>
    <updated>2019-05-09T03:48:12.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>入了前端坑了以后，才越发发现技术领域的庞大，为了巩固所学知识 与项目实战的经验 着手准备撰写博客</p></li><li><p>该博客采用Hexo框架搭建，配置在了全球最大同性交友平台（giyhub）上</p></li></ul><h1 id="搭建流程概述"><a href="#搭建流程概述" class="headerlink" title="搭建流程概述"></a>搭建流程概述</h1><ol><li>安装nodejs      <a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a></li><li>打开cmd，安装hexo        <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a><ul><li>npm install hexo-cli -g</li></ul></li><li>新建文件夹 在cmd中初始化hexo<ul><li>hexo init</li></ul></li><li>安装对应主题（去github或官网查看）</li><li>配置_config.yml</li><li>使用git 初始化、上传到github上</li></ol><h1 id="配置（转载）"><a href="#配置（转载）" class="headerlink" title="配置（转载）"></a>配置（转载）</h1><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;入了前端坑了以后，才越发发现技术领域的庞大，为了巩固所学知识 与项目实战的经验 着手准备撰写博客&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="hexo" scheme="/categories/hexo/"/>
    
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
  </entry>
  
</feed>
