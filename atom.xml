<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nova7y</title>
  
  
  <link href="/yyy/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-09T03:15:01.230Z</updated>
  <id>/</id>
  
  <author>
    <name>nova7y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React - 基础</title>
    <link href="/2019/05/09/React%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/React - 基础/</id>
    <published>2019-05-09T03:15:24.626Z</published>
    <updated>2019-05-09T03:15:01.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React框架"><a href="#React框架" class="headerlink" title="React框架"></a>React框架</h2><p><strong>个人感觉</strong></p><ol><li>违背W3C等规范，将JS、HTML等语言混在一起使用</li><li>在JS的基础上进行扩展，又不符合常规语法，容易混淆，难以理解</li><li>一次编写 到处运行是个亮点，内部算法也许比Vue强</li></ol><p><strong>特性</strong></p><ul><li>声明式视图<ul><li>对于声明式组件，当数据变更的时候，React低层负责高效更新。这种方式代码更加可预见并且更容易调试。</li></ul></li><li>组件化<ul><li>封装管理数据的组件，通过组合的方式实现复杂的UI，组件的逻辑采用js实现而不是模板，这样可以保持数据在DOM之外。</li></ul></li><li>一次学习，随处编写<ul><li>React可以进行服务端渲染，也可以用于移动APP开发（React Native）</li></ul></li></ul><p><a href="https://react.docschina.org/" target="_blank" rel="noopener">中文官网</a></p><p><a href="https://reactjs.org/" target="_blank" rel="noopener">英文官网</a></p><p><strong>前端3大框架：</strong></p><table><thead><tr><th>框架</th><th>时间</th><th>作者</th><th>概述</th></tr></thead><tbody><tr><td>Vue</td><td>2012</td><td>尤雨溪</td><td>只关注视图层的开发</td></tr><tr><td>React</td><td>2010</td><td>facebook</td><td>一切都是javascript、包括html、css</td></tr><tr><td>angular</td><td>2009</td><td>google</td><td>TypeScript、被边缘化</td></tr></tbody></table><p><a href="http://caibaojian.com/vue-vs-react.html" target="_blank" rel="noopener">Vue与React的区别</a></p><p><strong>MVC、MVVM</strong></p><ul><li>MVC 主要是后端的分层开发思想；把 一个完整的后端项目，分成了三个部分：<ul><li>Model：（数据层）主要负责 数据库的操作；</li><li>View：（视图层）所有前端页面，统称为 View 层</li><li>Controller：（业务逻辑层）主要处理对应的业务逻辑；（对于后台来说，这是开发的重点）</li></ul></li></ul><ul><li>MVVM是前端页面的分层开发思想，主要关注于 视图层 分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View,  ViewModel<ul><li>Model 是 页面中，需要用到的数据</li><li>View 是页面中的HTML结构；</li><li>ViewModel 是 一个 中间的调度者,提供了双向数据绑定的概念；</li></ul></li></ul><p><strong>其他框架</strong></p><ol><li><p>Ember</p></li><li><p>Knockout</p></li><li>Polymer</li><li>Riot</li></ol><hr><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>注：代码中含有<script type="text/babel">为基础用法</strong></p><p><strong>后续会采用npm的方式安装React，并在js里写组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/react.development.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/react-dom.development.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./js/babel.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">      );</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm 下载</span><br></pre></td></tr></table></figure><h3 id="JSX-js扩展语法"><a href="#JSX-js扩展语法" class="headerlink" title="JSX(js扩展语法)"></a>JSX(js扩展语法)</h3><blockquote><p>本质：普通对象</p></blockquote><p>JSX中嵌入表达式（JSX本身也是表达式）</p><ul><li>JSX可以赋值给变量</li><li>作为函数的参数</li><li>作为函数的返回值</li></ul><h4 id="常规用法"><a href="#常规用法" class="headerlink" title="常规用法"></a>常规用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &lt;div&gt;Hello World!&lt;/div&gt;;</span><br><span class="line"><span class="comment">//可以html标签嵌套，但是需要包含一个根标签！！</span></span><br><span class="line"><span class="keyword">const</span> element = (&lt;div&gt;&lt;h1&gt;Hello!&lt;/h1&gt;&lt;/div&gt;);</span><br><span class="line"><span class="comment">//()可以不加~ 建议加上。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为函数的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div tabIndex=<span class="string">"0"</span> className=<span class="string">'active'</span>&gt;Tom&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/作为函数的参数</span></span><br><span class="line"><span class="regexp">function foo(info) &#123;</span></span><br><span class="line"><span class="regexp">  return info;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let ret = foo(&lt;div&gt;hi&lt;/</span>div&gt;);</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数原型</span></span><br><span class="line">React.createElement(element, [props], [...children])</span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上述JSX本质上可以表示为如下形式：</span></span><br><span class="line"><span class="regexp">const element = React.createElement(</span></span><br><span class="line"><span class="regexp">  'h1',</span></span><br><span class="line"><span class="regexp">  &#123;className: 'greeting'&#125;,</span></span><br><span class="line"><span class="regexp">  'Hello, world!'</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ let info = &lt;div&gt;你好&lt;/</span>div&gt;;</span><br><span class="line"><span class="comment">// let info = React.createElement('h1', &#123;className: 'active'&#125;, 'Nihao');</span></span><br><span class="line"><span class="keyword">let</span> c1 = React.createElement(<span class="string">'h1'</span>, &#123;<span class="attr">className</span>: <span class="string">'active1'</span>&#125;, <span class="string">'Nihao'</span>);</span><br><span class="line"><span class="keyword">let</span> c2 = React.createElement(<span class="string">'h2'</span>, &#123;<span class="attr">className</span>: <span class="string">'active2'</span>&#125;, <span class="string">'Hello'</span>);</span><br><span class="line"><span class="keyword">let</span> info = React.createElement(<span class="string">'div'</span>, &#123;<span class="attr">className</span>: <span class="string">'active'</span>&#125;, [c1, c2]);</span><br><span class="line">ReactDOM.render(info, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><h4 id="props属性操作"><a href="#props属性操作" class="headerlink" title="props属性操作"></a>props属性操作</h4><blockquote><p>可使用es6等语法，通过多种方式传递数据/属性</p></blockquote><p><strong>扩展运算符：传递多个数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用  ...  完成数据  解构？ 传递数据</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.props.name&#125; | &#123;<span class="keyword">this</span>.props.age&#125; | &#123;<span class="keyword">this</span>.props.sex&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let obj = &#123;name:'zs',age:18,sex:'男'&#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com &#123;...obj&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解构：传递指定数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ... 将name值“拆出来”，这时传递到组件中 就只有age、sex 了</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.props.name&#125; | &#123;<span class="keyword">this</span>.props.age&#125; | &#123;<span class="keyword">this</span>.props.sex&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let obj = &#123;name:'zs',age:18,sex:'男'&#125;</span></span><br><span class="line"><span class="regexp">    let &#123;name,...other&#125; = obj</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com &#123;...other&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="props值类型"><a href="#props值类型" class="headerlink" title="props值类型"></a>props值类型</h4><blockquote><p>组件传递数据时，可传递表达式、函数、对象等类型。并可以在组件中调用、更改值</p><p>但是开发环境中不建议修改props中的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.num&#125; | &#123;<span class="keyword">this</span>.props.obj.name&#125; | &#123;<span class="keyword">this</span>.props.fn()&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let myObj = &#123;name:1&#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com num=&#123;1+2+3&#125; obj=&#123;myObj&#125; fn=&#123;()=&gt;&#123;console.log(123)&#125;&#125; /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="children"><a href="#children" class="headerlink" title="children"></a>children</h4><blockquote><p>原理类似Vue中的 slot（插槽）</p><p>在React中，可通过 this.props.children 获取组件标签中的内容/html结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com&gt;hello world&lt;/</span>Com&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="点标记组件"><a href="#点标记组件" class="headerlink" title="点标记组件"></a>点标记组件</h4><blockquote><p>可通过对象的方式 包装 多个子组件，通常代表子组件功能相互关联</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> abc = &#123;</span><br><span class="line">        a:<span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">            render()&#123;</span><br><span class="line">                <span class="keyword">return</span> (&lt;div&gt;&lt;h1&gt;A&lt;/h1&gt;&lt;/div&gt;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        b:<span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">            render()&#123;</span><br><span class="line">                <span class="keyword">return</span> (&lt;div&gt;&lt;h1&gt;B&lt;/h1&gt;&lt;/div&gt;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = ( &lt;div&gt;&lt;abc.a /&gt;&lt;abc.b /&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,document.getElementById('root'))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><p><code>笔记未总结</code></p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><blockquote><p>重复利用的单元，形式与vue类似，实现原理不同</p><p>高内聚,低耦合</p></blockquote><blockquote><p>React的组件推荐写在js中，这里先写在html里，方便学习</p></blockquote><p><strong>定义组件的方式（2种）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//类组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义class并继承React.component，并return组件结构</span></span><br></pre></td></tr></table></figure><p><strong>类组件的传参 - 固定写法，包括 “props”</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;h1&gt;你好&#123;this.props.info&#125;&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> app = &lt;Con info="World"&gt;a&lt;/Con&gt;;</span><br><span class="line">  ReactDOM.render(app, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ----------说明----------</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ class Con   继承(extends)  React.Component</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 采用constructor 接收参数(props)  （固定写法）    /</span><span class="regexp">/这个+内部的super可以省略不写! </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 使用super(props) super代表调用父类构造函数（这里指React）  在这里接收了参数props</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Con中 写了一个render()方法 并将html结构return</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 外部可以使用&lt;Con&gt;&lt;/</span>Con&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Con中的this指向 与 普通构造函数的指向（示例）一致</span></span><br><span class="line"><span class="comment">// Con通过原型链  可以找到父类中的props 数据</span></span><br></pre></td></tr></table></figure><h3 id="组件状态-state（单向数据流）"><a href="#组件状态-state（单向数据流）" class="headerlink" title="组件状态-state（单向数据流）"></a>组件状态-state（单向数据流）</h3><blockquote><p>组件可通过this.state={} 设置内部数据</p><p>！class组件存在state，函数组件不存在</p></blockquote><p><strong>数据特性为单向：父组件数据传递给子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                msg:<span class="string">'hello world'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (&lt;Com1&gt;&lt;/</span>Com1&gt;)</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>state中数据修改</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若要设置state的值，则需要使用：this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 若不使用该方法，React则无法监测到数据变化 而改变DOM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    msg:<span class="keyword">new</span> <span class="built_in">Date</span>().toString()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>setState的数据修改异步问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setState是异步执行，所以这里console打印出的是旧数据</span></span><br><span class="line">clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setState有一个回调函数，这里打印出的是数据更新后的值</span></span><br><span class="line">clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    &#125;,()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.num);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件间数据传值"><a href="#组件间数据传值" class="headerlink" title="组件间数据传值"></a>组件间数据传值</h3><h4 id="父-→-子"><a href="#父-→-子" class="headerlink" title="父 → 子"></a>父 → 子</h4><blockquote><p>父组件向子组件传值(props)</p></blockquote><ol><li>子组件 通过”标签属性”向父组件传值</li><li>父组件class中的props中就会包含子组件传输的数据（格式：子组件属性:数据）</li><li>在父组件中可通过  this.props.属性获取子组件传送的数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                msg:<span class="string">'Father组件data'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;father&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;&#123;this.props.msg&#125;&lt;/</span>p&gt;</span><br><span class="line">                    &lt;Son msg=&#123;<span class="keyword">this</span>.state.msg&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    class Son extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">        constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">            super(props)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        render()&#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1&gt;son&lt;/</span>h1&gt;</span><br><span class="line">                    &lt;p&gt;&#123;<span class="keyword">this</span>.props.msg&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Father msg=<span class="string">'根组件data'</span>&gt;&lt;/Father&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(App,document.getElementById('root'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="子-→-父"><a href="#子-→-父" class="headerlink" title="子 → 父"></a>子 → 父</h4><blockquote><p>子组件向父组件传值(传递函数)</p></blockquote><ol><li>在父组件class中 render子组件</li><li>通过子组件标签属性传递一个函数sum     <Son sonnum={this.sum}></Son></li><li>在子组件class中解构、运行该函数   sonnum()     // 示例代码是通过事件触发解构、运行、传值</li></ol><p><strong>总结：通过父组件向子组件传递“函数”   并在子组件解构 + 运行 + 传递参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;sonnum&#125; = <span class="keyword">this</span>.props</span><br><span class="line">            sonnum(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.clk&#125;&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span&gt;&#123;this.state.num&#125;&lt;/</span>span&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    class Father extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">        constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">            super(props)</span></span><br><span class="line"><span class="regexp">            this.state=&#123;</span></span><br><span class="line"><span class="regexp">                total:0</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        sum=(n)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123;</span></span><br><span class="line"><span class="regexp">                total:this.state.total +  n</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        render()&#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1&gt;&#123;this.state.total&#125;&lt;/</span>h1&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                    &lt;Son sonnum=&#123;<span class="keyword">this</span>.sum&#125;&gt;&lt;/Son&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Father&gt;&lt;/</span>Father&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(App,document.getElementById('root'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="兄弟-→-兄弟"><a href="#兄弟-→-兄弟" class="headerlink" title="兄弟 → 兄弟"></a>兄弟 → 兄弟</h4><blockquote><p>非父子组件之间传值(redux)</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>组件从产生 → 销毁的过程</p></blockquote><p>（重要的加粗）</p><ol><li><p>（即将移除）componentWillMount：唯一在render()之前调用的钩子</p></li><li><p><strong>componentDidMount：</strong> DOM树渲染完成后调用，通常用于加载后台数据</p></li><li>（即将移除）componentWillReceiveProps：组件接收到新的props，该方法会首先被调用</li><li>（新增）static getDerivedStateFromProps(props, state)：state、props改变后，都会执行钩子</li><li><strong>componentWillUnmount：</strong>组件被销毁之前一般用于清理工作（定时器timer、网络请求、订阅事件）</li></ol><p><a href="https://www.jianshu.com/p/170009bcf6f8">其他生命周期钩子参考</a></p><p><strong>使用示例：</strong></p><p> <strong>componentDidMount(){}</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">    setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            msg:new Date().toString()</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;, 1000);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="D:\黑马前端 - 于健\囤货\4 - 文档笔记整理\React - 生命周期.png" alt=""></p><h3 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><blockquote><p>通过button标签中的  onClick={this.clk}  绑定点击事件clk</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.num&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.clk&#125;&gt;点击&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;Com&gt;&lt;/</span>Com&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h4><blockquote><p>若需要传递参数则需要在onClick中传递一个  “参数”  函数！！</p><p>—–错误写法：onClick={ this.clk(2) }  等同于函数调用，会返回字符串。而这里需要一个函数</p><p>可以通过  onClick={ (e)=&gt;{this.clk(e,2)} }    //第一个参数为 事件对象</p><p>可以通过 onClick={ this.clk.bind( this,2 ) }    //采用bind的特性（返回一个函数）</p><p>—–改变this只是原生js语法规定的，这里没有什么用 （不太确定）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clk=<span class="function">(<span class="params">e,n</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num + n</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.state.num&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;(e)=&gt;&#123;this.clk(e,2)&#125;&#125;&gt;点击&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = (</span></span><br><span class="line"><span class="regexp">        &lt;Com&gt;&lt;/</span>Com&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clk=<span class="function">(<span class="params">e,n</span>)=&gt;</span>&#123;</span><br><span class="line">    e.stopPropagation()  <span class="comment">// 阻止冒泡</span></span><br><span class="line">    e.preventDefault()   <span class="comment">// 阻止默认行为</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>         <span class="comment">// 不好使</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num:<span class="keyword">this</span>.state.num + n</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//clk方法写成了箭头函数，其原因为this指向问题</span></span><br><span class="line"><span class="comment">//另一种解决方法是： (改变this指向)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.clk = <span class="keyword">this</span>.clk.bind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>通过判断语句，甄别渲染组件/标签/内容</p></blockquote><p><strong>if else</strong></p><blockquote><p>在<strong>render</strong>函数中 通过<code>if</code>判断 要<code>reruen</code>什么html结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                show:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.state.show)&#123; <span class="keyword">return</span>( &lt;h1&gt;hello&lt;/h1&gt; ) &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="keyword">return</span> (&lt;h1&gt;world&lt;/h1&gt;) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> App = (</span><br><span class="line">        &lt;div&gt;&lt;Com&gt;&lt;/Com&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>三元表达式</strong></p><blockquote><p><strong>return</strong>时 可通过<code>三元表达式</code>来判断是否要渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            show:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.show ? &lt;h1&gt;hello&lt;/h1&gt; : &lt;h1&gt;world&lt;/h1&gt; &#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;Com&gt;&lt;/</span>Com&gt;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>阻止渲染</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在function中return null  /  在class render中 return null</span></span><br></pre></td></tr></table></figure><h3 id="遍历渲染"><a href="#遍历渲染" class="headerlink" title="遍历渲染"></a>遍历渲染</h3><blockquote><p>通过原生数组<code>map()</code>方法循环遍历 生成html结构，然后使用{html}渲染</p><p>遍历出的html必须包含唯一的key，便于React监控DOM树</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            ary:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">let</span> lis = <span class="keyword">this</span>.state.ary.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="keyword">return</span> &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;&#125;)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;&#123;lis&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><ul><li><p>受控组件：表单域的基本使用；通过标签中的value绑定数据 + onChange “实时”监控表单状态<code>双向数据绑定</code></p></li><li><p>非受控组件：<code>直接通过DOM获取value</code> <code>也可绑定state中数据</code></p></li></ul><p><strong>区别：</strong> </p><ul><li>需要设置<code>原始值</code>，或<code>实时监控组件内容</code>时 使用<strong>受控组件</strong>，反之非受控组件</li><li>表单中 若存在“value”，则通常为受控组件</li></ul><h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><blockquote><p>通过html表单域中的value 绑定state的值</p><p>通过给表单绑定onChange方法 更新state中的值</p><p>—-在onChange(e){}方法中，第一个参数为事件对象，通过e.target.vale可获取值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            uname:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inputChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = e.target.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            uname:val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.uname&#125; onChange=&#123;<span class="keyword">this</span>.inputChange&#125;/&gt;</span><br><span class="line">                &lt;p&gt;state的值：&#123;<span class="keyword">this</span>.state.uname&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h4><blockquote><p>通过html标签中的ref值 与class组件声明的ref 的进行绑定</p><p>通过 this.<code>ref</code>.current.value 获取对应html表单的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            uname:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.uNameRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    inputPush=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = <span class="keyword">this</span>.uNameRef.current.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            uname:val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;input的值不会实时绑定到state中&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="text" ref=&#123;this.uNameRef&#125; /</span>&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.inputPush&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;提交后state：&#123;this.state.uname&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = ( &lt;div&gt; &lt;Com&gt;&lt;/</span>Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常规表单处理"><a href="#常规表单处理" class="headerlink" title="常规表单处理"></a>常规表单处理</h4><p><strong>radio：</strong>通过<code>受控组件</code> 监控 选中情况，并根据绑定的value值 来决定checked</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            sex:<span class="string">'man'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sex:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"man"</span> checked=&#123;<span class="keyword">this</span>.state.sex==<span class="string">'man'</span>&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125; /&gt;男</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"women"</span> checked=&#123;<span class="keyword">this</span>.state.sex==<span class="string">'women'</span>&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125; /&gt;女</span><br><span class="line">                &lt;p&gt;radio数据：&#123;<span class="keyword">this</span>.state.sex&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>checkbox：</strong>通过onChange事件监控点击事件，使用临时array、遍历的方法判断点击次数，判断是否“选中”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            checkboxDate:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    isChecked=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = e.target.value</span><br><span class="line">        <span class="keyword">let</span> ary = <span class="keyword">this</span>.state.checkboxDate.slice()   <span class="comment">//截取(0)生成新数组，避免相同引用地址</span></span><br><span class="line">        <span class="keyword">let</span> index = ary.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item==val)  <span class="comment">//循环遍历出索引index</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">-1</span>) &#123; ary.push(val) &#125;   <span class="comment">//判断数组中是否存在</span></span><br><span class="line">        <span class="keyword">else</span> &#123; ary.splice(index,<span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            checkboxDate:ary</span><br><span class="line">        &#125;,()=&gt;&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.state.checkboxDate);&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"read"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;看书</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"game"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;游戏</span><br><span class="line">                &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"music"</span> onChange=&#123;<span class="keyword">this</span>.isChecked&#125; /&gt;音乐</span><br><span class="line">                &lt;p&gt;checkbox绑定的值：&#123;<span class="keyword">this</span>.state.checkboxDate&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select + option：</strong>通过<code>受控组件</code> 监控 选中情况，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            val:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            val:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;select value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125;&gt;</span><br><span class="line">                    &lt;option value=<span class="string">'1'</span>&gt;工作&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value='2'&gt;学习&lt;/</span>option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">'3'</span>&gt;看书&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>select&gt;</span><br><span class="line">                &lt;p&gt;option绑定的value值：&#123;<span class="keyword">this</span>.state.val&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>file：</strong>通过<code>非受控组件</code> ，当点击按钮后 读取 文件上传情况，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            name:<span class="string">''</span>,</span><br><span class="line">            size:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.fileRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    filePush=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].name,</span><br><span class="line">            size:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].size,</span><br><span class="line">            type:<span class="keyword">this</span>.fileRef.current.files[<span class="number">0</span>].type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> ref=&#123;<span class="keyword">this</span>.fileRef&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.filePush&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;file绑定的值：&#123;this.state.name&#125;----&#123;this.state.size&#125;----&#123;this.state.type&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = ( &lt;div&gt; &lt;Com&gt;&lt;/</span>Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>textarea：</strong>通过<code>受控组件</code> 监控 输入内容，并更新state中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            val:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            val:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;textarea value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.iChange&#125;&gt;&lt;/textarea&gt;</span><br><span class="line">                &lt;p&gt;textarea绑定的value值：&#123;<span class="keyword">this</span>.state.val&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = ( &lt;div&gt; &lt;Com&gt;&lt;/Com&gt; &lt;/div&gt; )</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS样式处理"><a href="#CSS样式处理" class="headerlink" title="CSS样式处理"></a>CSS样式处理</h3><p><strong>className</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React中class是关键词，所以使用className</span></span><br><span class="line"><span class="comment">// 可通过常规写法进行绑定样式，也可通过绑定 state 中数据来控制</span></span><br><span class="line"><span class="comment">// 在className中 也可以使用表达式</span></span><br><span class="line"></span><br><span class="line">&lt;style&gt;.box&#123;<span class="attr">color</span>: red;&#125;.box2&#123;<span class="attr">color</span>: blue&#125;.fs&#123;font-size: <span class="number">16</span>px;&#125;&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="root"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                abc:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;div&gt;&lt;h1 className='box fs'&gt;hello&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div&gt;&lt;h1 className=&#123;this.state.abc?'box2 fs':'box fs'&#125;&gt;world&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过html标签绑定 state 中的对象来控制行内样式</span></span><br><span class="line"><span class="comment">// 或者 在html标签中采用 &#123;&#123;key:value,key:value&#125;&#125; 控制样式（不推荐）</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                abc:&#123;<span class="string">'fontSize'</span>:<span class="string">'36px'</span>,<span class="attr">color</span>:<span class="string">'blue'</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> ( </span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1 style=&#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>,<span class="string">'fontSize'</span>:<span class="string">'16px'</span>&#125;&#125;&gt;hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;h1 style=&#123;this.state.abc&#125;&gt;world&lt;/</span>h1&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yarn-类似npm"><a href="#yarn-类似npm" class="headerlink" title="yarn(类似npm)"></a>yarn(类似npm)</h2><blockquote><p>  类似npm的包管理网站</p></blockquote><p><a href="https://yarn.bootcss.com/">官网</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在官网中找到对应的安装文件，安装</span></span><br><span class="line"><span class="comment">//在cmd中输入 yarn --version  查看是否安装成功</span></span><br></pre></td></tr></table></figure><p><strong>基础命令</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与npm对比</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化新项目</span></span><br><span class="line">npm init</span><br><span class="line">yarn init</span><br><span class="line"><span class="comment">// 默认安装</span></span><br><span class="line">npm install</span><br><span class="line">yarn install</span><br><span class="line"><span class="comment">// 安装某个依赖，并且默认保存到package.</span></span><br><span class="line">npm install express —save</span><br><span class="line">yarn add express</span><br><span class="line"><span class="comment">// 移除某个依赖项目</span></span><br><span class="line">npm uninstall express —save</span><br><span class="line">yarn remove express</span><br><span class="line"><span class="comment">// 安装某个开发时依赖项目</span></span><br><span class="line">npm install express —save-dev  </span><br><span class="line">yarn add express —dev</span><br><span class="line"><span class="comment">// 更新某个依赖项目</span></span><br><span class="line">npm update express —save </span><br><span class="line">yarn upgrade express</span><br><span class="line"><span class="comment">// 安装某个全局依赖项目</span></span><br><span class="line">npm install webpack -g</span><br><span class="line">yarn global add webpack</span><br><span class="line"><span class="comment">// 运行某个命令</span></span><br><span class="line">npm run 命令名称</span><br><span class="line">yarn run 命令名称</span><br></pre></td></tr></table></figure><h2 id="create-react-app-脚手架"><a href="#create-react-app-脚手架" class="headerlink" title="create-react-app (脚手架)"></a>create-react-app (脚手架)</h2><blockquote><p>官方脚手架工具，类似Vue-cli 脚手架工具，用来初始化项目</p></blockquote><blockquote><p>其他关键词：前端工程化、前后端分离</p></blockquote><blockquote><p>基于yarn，包装了webpack等工具包</p></blockquote><p><a href="https://react.docschina.org/docs/create-a-new-react-app.html">官网</a></p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p><strong>安装</strong></p><blockquote><p>需要先安装npx（npm引入的新命令）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app 项目名称</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">npm install -g create-react-app   <span class="comment">//全局安装</span></span><br><span class="line">create-react-app 项目名称</span><br></pre></td></tr></table></figure><p><strong>运行说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,<span class="comment">//运行项目</span></span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,<span class="comment">//打包、编译</span></span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,<span class="comment">//运行测试项目</span></span><br><span class="line">  <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span><span class="comment">//解锁webpack等包，解锁后不能还原</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><blockquote><p>根据hash实现，url中的#不会解析。通过js获取对应hash 并显示不同的组件</p></blockquote><ul><li><a href="https://github.com/ReactTraining/react-router">react-router</a></li><li><a href="https://reacttraining.com/react-router/">doc</a></li></ul><p>####配置</p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><h4 id="声明式路由"><a href="#声明式路由" class="headerlink" title="声明式路由"></a>声明式路由</h4><blockquote><p>import { BrowserRouter as Router, Route, Link } from “react-router-dom”;</p></blockquote><ul><li><Router>标签包裹 内容</li><li>使用<Link to=''>首页<Link />    //相当于<a></li><li>使用<Route path='url' component={组件}>      // url为”/“时，加入 exact</li></ul><Route>中若没有path，则会匹配其他url，然后重定向？到component组件中<br><br><Route component={Game}></Route><p><strong><Route>可以不写component：</strong></p><ul><li><p>可使用render={()=&gt;{<h1>111111</h1>}}  处理简单内容，触发条件为 path匹配</p></li><li><p>可使用children={()=&gt;{<h1>111111</h1>}}  与render类似，但触发条件为 路径触发则调用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Game <span class="keyword">from</span> <span class="string">'./components/Game'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/game"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path='</span>/game<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Redirect to="/"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><p>html容器：<Route path='/' exact component={Home}></Route></p><h4 id="模糊路由"><a href="#模糊路由" class="headerlink" title="模糊路由"></a>模糊路由</h4><blockquote><p>import { BrowserRouter as Router, Route, Link, Switch} from “react-router-dom”;</p><p><Route>不写明path，需要导入Switch，并用<Switch>包裹</p><p><Switch>：在路径相同的情况下，只匹配第一个，可以避免重复匹配路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/game"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/music"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to="/:abc"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='</span>/game<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='</span>/music<span class="string">' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><blockquote><p>子组件不需要用<Router>标签包裹 内容，且子组件可包含<Link>或<Route></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">// import './App.css';</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Game <span class="keyword">from</span> <span class="string">'./components/Game'</span></span><br><span class="line"><span class="keyword">import</span> Other <span class="keyword">from</span> <span class="string">'./components/Other'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">music1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &lt;p&gt;华语&lt;/p&gt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">music2</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &lt;p&gt;英语&lt;/p&gt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Music</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to="/music/1"&gt;华语&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to="/music/2"&gt;英语&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path="/mu</span>sic/<span class="number">1</span><span class="string">" component=&#123;music1&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/music/<span class="number">2</span><span class="string">" component=&#123;music2&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">class App extends Component &#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;Router&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/<span class="string">"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/game<span class="string">"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/music<span class="string">"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;Link to="</span>/:abc<span class="string">"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;/ul&gt;</span></span><br><span class="line"><span class="string">          &lt;Switch&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/game' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path='/music' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><blockquote><p>通过<Route> 中的path设置传参  例如path=’/game/:id’</p><p>在<Link>标签to中传递参数</p><p>在对应组件的 this.props.match 获取参数(class组件)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/game/123"&gt;游戏&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/music"&gt;音乐&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/:abc"&gt;其他&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path='/</span><span class="string">' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path='</span>/game/:id<span class="string">' component=&#123;Game&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path='</span>/music<span class="string">' component=&#123;Music&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route component=&#123;Other&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若是函数组件，则通过match获取参数</span></span><br><span class="line">&lt;Route path=<span class="string">"/:id"</span> component=&#123;Child&#125; /&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; match &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;ID: &#123;match.params.id&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><blockquote><p>import { BrowserRouter as Router, Route, Link, Switch, Redirect} from “react-router-dom”;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件，判断条件是否成立     //如果页面中存在&lt;Redirect&gt;标签，则会直接跳转</span></span><br><span class="line"><span class="function">function <span class="title">music2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  let isok = <span class="keyword">false</span></span><br><span class="line">  let info = isok ? "" : &lt;Redirect to='/'&gt;&lt;/Redirect&gt;</span><br><span class="line">  <span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><blockquote><p>通过js的方式  实现组件跳转             //注意根url 的<Route>有没有exact</p></blockquote><blockquote><p>导入withRouter   import { withRouter } from “react-router-dom”;</p><p>导出组件时需要使用withRouter包裹      export default withRouter(Game)</p><p>给事件源（按钮）注册方法，触发事件</p><p>通过结构获取props中的history     let {history} = this.props</p><p>通过 history.push(‘/‘)  跳转页面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    fn=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;history&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="built_in">console</span>.dir(history);</span><br><span class="line">        history.push(<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment">// history.push('/',&#123;key:val&#125;)  传参</span></span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">let</span> id = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="built_in">console</span>.log(id);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;游戏&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.fn&#125;&gt;编程式导航&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withRouter(Game)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 传参跳转时，外部获取参数 props.location.state</span></span><br></pre></td></tr></table></figure><h4 id="自定义路由链接-样式"><a href="#自定义路由链接-样式" class="headerlink" title="自定义路由链接(样式)"></a>自定义路由链接(样式)</h4><blockquote><p>路由发生变化时 改变对应标签的样式/结构重构</p></blockquote><blockquote><p>利用<Route>的children属性 获取当前点击事件源，并赋予指定样式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="comment">// 通过props解构传入的参数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;to,name&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// children传入函数，通过解构match判断当前事件源</span></span><br><span class="line">            &lt;Route path=&#123;to&#125; children=&#123;( &#123;match&#125; )=&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    &lt;div className=&#123;match?<span class="string">'active'</span>:<span class="string">''</span>&#125;&gt;</span><br><span class="line">                        &lt;Link to=&#123;to&#125;&gt;&#123;name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时的组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (&lt;div&gt;hello&lt;/div&gt;)&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp2</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (&lt;div&gt;world&lt;/div&gt;)&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/* 内容容器 （这里组件写死了，以后可以动态传入组件） */</span>&#125;</span><br><span class="line">                &lt;Route path=<span class="string">'/main/message/url-1'</span> component=&#123;Temp1&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/main/message/url-2'</span> component=&#123;Temp2&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &#123;<span class="comment">/* 引入组件，传入参数 */</span>&#125;</span><br><span class="line">                &lt;Com to=<span class="string">'/main/message/url-1'</span> name=<span class="string">'111'</span> /&gt; </span><br><span class="line">                &lt;Com to=<span class="string">'/main/message/url-2'</span> name=<span class="string">'222'</span> /&gt; </span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Message</span></span><br></pre></td></tr></table></figure><p>// 参考项目代码：myapp-基础项目搭建.zip （看Menu.js、Main.js）</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><blockquote><p>状态（数据）管理，类似vuex</p></blockquote><p>看另一个笔记。。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><h3 id="短路运算符-amp-amp"><a href="#短路运算符-amp-amp" class="headerlink" title="短路运算符: &amp;&amp;"></a>短路运算符: &amp;&amp;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过短路运算符 判断标签是否需要渲染到页面中</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            show:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &#123;<span class="keyword">this</span>.state.show &amp;&amp; &lt;h1&gt;hello&lt;/h1&gt; &#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let App = (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;Com&gt;&lt;/</span>Com&gt;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟DOM（Virtual-DOM）"><a href="#虚拟DOM（Virtual-DOM）" class="headerlink" title="虚拟DOM（Virtual DOM）"></a>虚拟DOM（Virtual DOM）</h3><ul><li>映射真实DOM树的JS对象</li><li>数据发生改变时，先对虚拟DOM进行操作（diff）<ul><li>diff的结果就是变更的节点（这里的节点指的是虚拟节点-本质上就是普通对象）</li></ul></li><li>而后对虚拟DOM、真实DOM进行比较</li><li>根据比较结构，对真实DOM进行操作，完成页面更新</li></ul><h3 id="案例1-tab栏切换"><a href="#案例1-tab栏切换" class="headerlink" title="案例1 - tab栏切换"></a>案例1 - tab栏切换</h3><p><strong>本质：</strong></p><ul><li>利用点击按钮时传递循环产生的 i，与state中的index配对</li><li>通过按钮点击事件 改变state中的值，保证这对数据 一致性</li><li>通过判断 i 和state中的index，判断 div 是否显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #box div&#123;height: 200px;width: 300px;background: #ccc;display: none&#125;</span><br><span class="line">    #box div.active&#123;display: block&#125;</span><br><span class="line">    #box button.active&#123;background: orange&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="root"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props)</span><br><span class="line">            <span class="keyword">this</span>.state=&#123;</span><br><span class="line">                tabData:[&#123;<span class="attr">title</span>:<span class="string">'导航1'</span>,<span class="attr">cont</span>:<span class="string">'内容1'</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">'导航2'</span>,<span class="attr">cont</span>:<span class="string">'内容2'</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">'导航3'</span>,<span class="attr">cont</span>:<span class="string">'内容3'</span>&#125;],</span><br><span class="line">                eleIndex:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleTag=<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                eleIndex:i</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="keyword">this</span>.state.eleIndex</span><br><span class="line">            <span class="keyword">let</span> tempTitle = []</span><br><span class="line">            <span class="keyword">let</span> tempCont = []</span><br><span class="line">            <span class="keyword">this</span>.state.tabData.forEach(<span class="function">(<span class="params">item,i</span>) =&gt;</span> &#123;</span><br><span class="line">                tempTitle.push(&lt;button className=&#123;index==i?'active':''&#125; key=&#123;i&#125; onClick=&#123;(e)=&gt;&#123;this.handleTag(e,i)&#125;&#125;&gt;&#123;item.title&#125;&lt;/button&gt;)</span><br><span class="line">                tempCont.push(&lt;div className=&#123;index==i?'active':''&#125; key=&#123;i&#125;&gt;&#123;item.cont&#125;&lt;/div&gt;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">                    &#123;tempTitle&#125;</span><br><span class="line">                    &#123;tempCont&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let App = ( &lt;div&gt;&lt;Com /</span>&gt;&lt;/div&gt; )</span><br><span class="line">    ReactDOM.render(App,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></script></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React框架&quot;&gt;&lt;a href=&quot;#React框架&quot; class=&quot;headerlink&quot; title=&quot;React框架&quot;&gt;&lt;/a&gt;React框架&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;个人感觉&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;违背W3C等规范，将JS、HT
      
    
    </summary>
    
      <category term="React" scheme="/categories/React/"/>
    
    
      <category term="React" scheme="/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>手机rem、x倍图适配</title>
    <link href="/2019/05/09/%E6%89%8B%E6%9C%BArem%E3%80%81x%E5%80%8D%E5%9B%BE%E9%80%82%E9%85%8D/"/>
    <id>/2019/05/09/手机rem、x倍图适配/</id>
    <published>2019-05-09T03:11:41.902Z</published>
    <updated>2019-05-09T03:10:08.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rem计算"><a href="#rem计算" class="headerlink" title="rem计算"></a>rem计算</h2><p><a href="https://blog.csdn.net/gao531162436/article/details/81699313" target="_blank" rel="noopener">参考</a></p><h4 id="vm-rem："><a href="#vm-rem：" class="headerlink" title="vm+rem："></a>vm+rem：</h4><p><a href="http://caibaojian.com/vw-vh.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .scss预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span></span><br><span class="line">$vm_fontsize: <span class="number">75</span>; <span class="comment">// iPhone 6尺寸的根元素大小基准值</span></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">rem</span>(<span class="params">$px</span>) </span>&#123;</span><br><span class="line">     @<span class="keyword">return</span> ($px / $vm_fontsize ) * <span class="number">1</span>rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根元素大小使用 vw 单位</span></span><br><span class="line">$vm_design: <span class="number">750</span>;</span><br><span class="line">html &#123;</span><br><span class="line">    font-size: ($vm_fontsize / ($vm_design / <span class="number">2</span>)) * <span class="number">100</span>vw; </span><br><span class="line">    <span class="comment">// 同时，通过Media Queries 限制根元素最大最小值</span></span><br><span class="line">    @media screen and (max-width: <span class="number">320</span>px) &#123;</span><br><span class="line">        font-size: <span class="number">64</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    @media screen and (min-width: <span class="number">540</span>px) &#123;</span><br><span class="line">        font-size: <span class="number">108</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// body增加宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span></span><br><span class="line">body &#123;</span><br><span class="line">    max-width: <span class="number">540</span>px;</span><br><span class="line">    min-width: <span class="number">320</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">div &#123;</span><br><span class="line">    height: rem(<span class="number">300</span>);</span><br><span class="line">    width: rem(<span class="number">300</span>);</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标准rem方案："><a href="#标准rem方案：" class="headerlink" title="标准rem方案："></a>标准rem方案：</h4><ul><li>动态获取屏幕宽度 并赋予font-size</li><li>应对于各视口+横竖屏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取手机屏幕宽度</span></span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="comment">//动态设置html的font-size</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth / <span class="number">6.4</span>+ <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">//设计稿基准640px则：640/100=6.4</span></span><br><span class="line"><span class="comment">//页面元素rem = 设计稿尺寸 / 100 rem</span></span><br></pre></td></tr></table></figure><h4 id="其他rem："><a href="#其他rem：" class="headerlink" title="其他rem："></a>其他rem：</h4><p>背景：在 <code>1080px</code> 的视觉稿中，左上角有个logo，宽度是 <code>180px</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width"</span>&gt; <span class="comment">//最低设置</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取手机屏幕宽度</span></span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="comment">//动态设置html的font-size</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>sass</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义方法：calc</span></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">$val</span>)</span>&#123;</span><br><span class="line">    @<span class="keyword">return</span> $val / <span class="number">1080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo&#123;</span><br><span class="line">    width : calc(<span class="number">180</span>rem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍图适配方法"><a href="#倍图适配方法" class="headerlink" title="倍图适配方法"></a>倍图适配方法</h2><h3 id="普通图片："><a href="#普通图片：" class="headerlink" title="普通图片："></a>普通图片：</h3><h4 id="js-img异步加载图片"><a href="#js-img异步加载图片" class="headerlink" title="js+img异步加载图片"></a>js+img异步加载图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;img id=<span class="string">"img"</span> data-src1x=<span class="string">"xxx@1x.jpg"</span> data-src2x=<span class="string">"xxx@2x.jpg"</span> data-src3x=<span class="string">"xxx@3x.jpg"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="keyword">if</span>(dpr &gt; <span class="number">3</span>)&#123;</span><br><span class="line">    dpr = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgSrc = $(<span class="string">'#img'</span>).data(<span class="string">'src'</span>+dpr+<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = imgSrc;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params">imgObj</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#img'</span>).remove().prepend(imgObj);<span class="comment">//替换img对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="srcset-标签"><a href="#srcset-标签" class="headerlink" title="srcset 标签"></a><code>srcset</code> 标签</h4><blockquote><p>基于WebKit特性srcset</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"1.jpg"</span> srcset=<span class="string">"2.jpg 2x, 3.jpg 3x"</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="http://developer.51cto.com/art/201309/410720.htm" target="_blank" rel="noopener">参考</a></p><h3 id="背景图片："><a href="#背景图片：" class="headerlink" title="背景图片："></a>背景图片：</h3><h4 id="media-query"><a href="#media-query" class="headerlink" title="media query"></a>media query</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 普通显示屏(设备像素比例小于等于1)使用1倍的图 */</span></span><br><span class="line">.css&#123;</span><br><span class="line">    background-image: url(img_1x.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高清显示屏(设备像素比例大于等于2)使用2倍图  */</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">    .css&#123;</span><br><span class="line">        background-image: url(img_2x.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高清显示屏(设备像素比例大于等于3)使用3倍图  */</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio:<span class="number">3</span>)&#123;</span><br><span class="line">    .css&#123;</span><br><span class="line">        background-image: url(img_3x.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="横、竖屏："><a href="#横、竖屏：" class="headerlink" title="横、竖屏："></a>横、竖屏：</h2><blockquote><p>需要针对横、竖屏编写不同的css</p></blockquote><blockquote><p>动态设置字体尺寸（不推荐）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    deviceHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line"></span><br><span class="line"><span class="comment">//横屏状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">90</span> || <span class="built_in">window</span>.orientation === <span class="number">-90</span>) &#123;</span><br><span class="line">    deviceWidth = deviceHeight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置根字体大小</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><h4 id="JS检测横竖屏"><a href="#JS检测横竖屏" class="headerlink" title="JS检测横竖屏"></a>JS检测横竖屏</h4><p>js获取屏幕旋转方向：<code>window.orientation</code></p><ul><li>0 - 正常方向</li><li>-90 - 屏幕顺时钟旋转90度</li><li>90 - 屏幕逆时针旋转90度</li><li>180 - 屏幕旋转180度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.orientation === <span class="number">0</span> ? alert(<span class="string">'竖屏'</span>) : alert(<span class="string">'横屏'</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">180</span> || <span class="built_in">window</span>.orientation === <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'竖屏状态！'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">90</span> || <span class="built_in">window</span>.orientation === <span class="number">-90</span> )&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'横屏状态！'</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="CSS判断横竖屏"><a href="#CSS判断横竖屏" class="headerlink" title="CSS判断横竖屏"></a>CSS判断横竖屏</h4><p>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 竖屏 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> media=<span class="string">"all and (orientation:portrait)"</span> href=<span class="string">"portrait.css"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 竖屏 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> media=<span class="string">"all and (orientation:landscape)"</span> href=<span class="string">"landscape.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>方式二：写在同一个CSS中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (orientation: portrait) &#123;</span><br><span class="line">  <span class="comment">/*竖屏 css*/</span></span><br><span class="line">&#125; </span><br><span class="line">@media screen and (orientation: landscape) &#123;</span><br><span class="line">  <span class="comment">/*横屏 css*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;rem计算&quot;&gt;&lt;a href=&quot;#rem计算&quot; class=&quot;headerlink&quot; title=&quot;rem计算&quot;&gt;&lt;/a&gt;rem计算&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/gao531162436/article/detail
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack - 基础</title>
    <link href="/2019/05/09/webpack%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/webpack - 基础/</id>
    <published>2019-05-09T03:11:41.887Z</published>
    <updated>2019-05-09T03:15:16.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>主要用于对项目文件进行打包，减少用户浏览时的请求数量，并对es6、es7降级，解决css兼容性等问题</p><p><a href="https://www.npmjs.com/package/webpack" target="_blank" rel="noopener">npm</a>        <a href="https://webpack.docschina.org/" target="_blank" rel="noopener">官网</a></p><p><strong>适用于： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 样式表</span><br><span class="line">   .css     .less     .scss</span><br><span class="line">2. JS文件</span><br><span class="line">   .js        .ts (typescript)</span><br><span class="line">3. 图片</span><br><span class="line">   .jpg/.jpeg    .png   .gif    .bmp  </span><br><span class="line">4. 字体文件</span><br><span class="line">   .ttf     .eot    .woff    .woff2    .svg</span><br><span class="line">5. 模板文件</span><br><span class="line">   .vue   .jsx(react)</span><br></pre></td></tr></table></figure><p><strong>不适用： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 合并多个js文件为一个</span><br><span class="line">2. 模块化开发</span><br><span class="line">3. 把less、scss、es6/es7等高级语言编译为低级的，使得浏览器可以识别</span><br><span class="line">4. 编译图片为base64格式，减少网络请求次数</span><br></pre></td></tr></table></figure><p>其他打包工具：</p><ul><li>Grunt</li><li>Gulp</li></ul><hr><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>基于node环境，需要配置基本的入口文件。输入/输出文件夹</p></blockquote><p><strong>默认只对.js文件打包，若需要处理额外的格式，需要安装对应的包</strong></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(以下为默认情况下的配置，部分内容可通过配置文件调整)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>初始化</span><br><span class="line">初始化环境：npm init -y</span><br><span class="line">在项目文件夹中创建<span class="string">"src"</span>文件夹，用于默认的入口</span><br><span class="line">    创建入口文件:index.js、index.html</span><br><span class="line"><span class="number">2.</span>安装</span><br><span class="line">安装webpack和其依赖webpack-cli：npm i webpack webpack-cli -D</span><br><span class="line">（-d 等于将依赖安装到‘devDependencies’模块，该模块用于开发环境）</span><br><span class="line"><span class="number">3.</span>配置运行指令</span><br><span class="line">在package.json文件的scripts节点中，新增一个dev节点（自定义名称）</span><br><span class="line"><span class="string">"pack"</span>: <span class="string">"webpack"</span></span><br><span class="line">打包时，运行命令：npm run pack，即可打包</span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在项目根目录下，创建一个 webpack.config.js 文件</span><br><span class="line"></span><br><span class="line">自定义配置：（具体参考官网）</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// production:生产，产生优化压缩的打包文件</span></span><br><span class="line">    <span class="comment">// development:开发，产生有注释、空白、回车 可读性好的打包文件</span></span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: path.join(__dirname, <span class="string">'./src/index.js'</span>), <span class="comment">//  修改入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出目录</span></span><br><span class="line">        filename: <span class="string">'main.js'</span> <span class="comment">// 输出打包文件名字设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="HTML页面处理"><a href="#HTML页面处理" class="headerlink" title="HTML页面处理"></a>HTML页面处理</h3><blockquote><p>插件：html-webpack-plugin</p></blockquote><p><a href="https://webpack.docschina.org/concepts/#%E6%8F%92%E4%BB%B6-plugins-" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>, <span class="comment">//被打包的html模板文件名称</span></span><br><span class="line">        <span class="comment">//filename: 'index.html' //生成打包文件名称， 默认是index.html</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常规打包即可</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p><a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">参考</a></p><p><strong>loader : </strong> javascript函数，以模块形式存在，webpack打包过程中，遇到不能处理的内容就会寻找对应的loader处理</p><blockquote><p>处理不同内容的loader：</p><ul><li>css内容：            style-loader 和 css-loader</li><li>less内容：            less-loader 和 less(less-loader的依赖)</li><li>图片内容：            url-loader 和 file-loader</li><li>ES6/ES7内容：        babel-loader</li></ul></blockquote><p><strong>配置参考</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">没有参数的 <span class="number">1</span>个或多个 加载器配置</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">use</span>: 加载器 &#125;,<span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">use</span>: [加载器,加载器] &#125;,<span class="comment">//多个 数组元素 </span></span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器&#125;,<span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器!加载器&#125;,<span class="comment">//多个 !叹号分隔</span></span><br><span class="line"></span><br><span class="line">有options参数的 <span class="number">1</span>个或多个 加载器配置</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, <span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;, <span class="comment">//1个</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.格式$/</span>, </span><br><span class="line">use:[</span><br><span class="line">&#123;<span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;,</span><br><span class="line">&#123;<span class="attr">loader</span>: 加载器, <span class="attr">options</span>:对象参数&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">&#125;, <span class="comment">//多个</span></span><br></pre></td></tr></table></figure><h4 id="css文件处理"><a href="#css文件处理" class="headerlink" title="css文件处理"></a>css文件处理</h4><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 里添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// css名字结尾文件 处理loader设定</span></span><br><span class="line">        use: [</span><br><span class="line">            <span class="comment">// 以下两个loader有顺序要求，css-loader在后，style-loader在前</span></span><br><span class="line">            <span class="comment">// 它们在执行的时候是先执行css-loader在执行style-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">"style-loader"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//精简写法</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">    &#125;, ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="less处理"><a href="#less处理" class="headerlink" title="less处理"></a>less处理</h4><blockquote><p>最好先安装css-loader、style-loader</p></blockquote><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"less-loader"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url处理-img"><a href="#url处理-img" class="headerlink" title="url处理(+img)"></a>url处理(+img)</h4><blockquote><p>url-loader</p><p>该loader会将url引用的img图片转换成base64格式（可设置阈值）</p><p><strong>超过阈值的内容会交给</strong> <code>file-loader</code>处理</p></blockquote><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader url-loader</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//limit  代表 阈值尺寸</span></span><br></pre></td></tr></table></figure><h4 id="JS降级"><a href="#JS降级" class="headerlink" title="JS降级"></a>JS降级</h4><blockquote><p>babel-loader</p></blockquote><p><a href="https://babel.docschina.org/" target="_blank" rel="noopener">官网</a>    <a href="https://webpack.docschina.org/loaders/babel-loader/" target="_blank" rel="noopener">webpack</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同版本的安装：</span></span><br><span class="line"></span><br><span class="line">npm install babel-loader@<span class="number">8.0</span><span class="number">.0</span>-beta<span class="number">.0</span> @babel/core @babel/preset-env webpack</span><br><span class="line">npm install babel-loader babel-core babel-preset-env webpack</span><br><span class="line">npm install --save-dev babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><p><strong>配置 v1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>推荐配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 文件中添加：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 设置babel-loader，使得js中es6等高级语法可以降级为es5标准，兼容各个浏览器</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// node_modules目录的js文件不要给处理</span></span><br><span class="line">        use: <span class="string">'babel-loader'</span>, <span class="comment">// 调用具体loader</span></span><br><span class="line">        <span class="comment">// 具体preset在其他位置配置，给"根目录"制作.babelrc文件并做配置即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同级目录创建“.babelrc”，输入：</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-class-properties"</span>]     <span class="comment">//处理“静态”成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理“静态”成员"><a href="#处理“静态”成员" class="headerlink" title="处理“静态”成员"></a>处理“静态”成员</h5><blockquote><p>需要安装插件:class-properties</p></blockquote><p><a href="https://babel.docschina.org/docs/en/plugins" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span></span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在.babelrc中配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-class-properties"</span>]     <span class="comment">//处理“静态”成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在webpack.config.js中配置   ？？？</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-loader"><a href="#Vue-loader" class="headerlink" title="Vue-loader"></a>Vue-loader</h3><blockquote><p>处理.vue格式的文件</p></blockquote><p><a href="https://vue-loader.vuejs.org/" target="_blank" rel="noopener">官网</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            use: <span class="string">'vue-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3 </span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="简单服务器（实时预览）"><a href="#简单服务器（实时预览）" class="headerlink" title="简单服务器（实时预览）"></a>简单服务器（实时预览）</h4><blockquote><p>一个简单的 web 服务器，并且能够实时重新加载(live reloading)。</p></blockquote><blockquote><p>只会在内存中运行，不会生成对应的实体文件</p></blockquote><p>插件：webpack-dev-sever</p><p><a href="https://webpack.docschina.org/guides/development/#%E4%BD%BF%E7%94%A8-webpack-dev-server" target="_blank" rel="noopener">参考</a></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p><strong>配置 1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 webpack.config.js 中添加</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">contentBase: <span class="string">'./dist'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或 详细配置</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">//是否压缩</span></span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>, <span class="comment">// 服务主机ip地址</span></span><br><span class="line">    port: <span class="number">9000</span>, <span class="comment">//端口号</span></span><br><span class="line">    open: <span class="literal">true</span> <span class="comment">// 自动打开浏览器访问效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置 2</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 package.json 里添加一个启动方式</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"line"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run line</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描
      
    
    </summary>
    
      <category term="webpack" scheme="/categories/webpack/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>雅虎前端优化35条规则</title>
    <link href="/2019/05/09/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%9635%E6%9D%A1%E8%A7%84%E5%88%99/"/>
    <id>/2019/05/09/雅虎前端优化35条规则/</id>
    <published>2019-05-09T03:03:30.349Z</published>
    <updated>2019-05-09T03:08:48.155Z</updated>
    
    <content type="html"><![CDATA[<p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。翻译并不逐字逐句，部分难以逐字翻译的被意译了，另外一些不重要的举例等也被精简。</p><p>原文： <a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a>。</p><p>如何让web页面更快，雅虎团队实践总结了7类35条规则，下面一一列出。</p><h2 id="1-Content"><a href="#1-Content" class="headerlink" title="1. Content"></a>1. Content</h2><h3 id="1-1-Make-Fewer-HTTP-Requests"><a href="#1-1-Make-Fewer-HTTP-Requests" class="headerlink" title="1.1 Make Fewer HTTP Requests"></a>1.1 Make Fewer HTTP Requests</h3><p><strong>Minimize HTTP Requests</strong>减少/最小化 http 请求数。</p><p>到终端用户的响应时间80%花在前端：大部分用于下载组件（js/css/image/flash等等）。减少组件数就是减少渲染页面所需的http请求数。这是更快页面的关键。</p><p>减少组件数的一个方法就是简化页面设计。保持富内容的页面且能减少http请求，有以下几个技术：</p><ul><li>Combined files。合并文件，如合并js，合并css都能减少请求数。如果页面间脚本和样式差异很大，合并会更具挑战性。</li><li>CSS Sprites。雪碧图可以合并多个背景图片，通过<code>background-image</code> 和 <code>background-position</code> 来显示不同部分。</li><li>Image maps。合并多个图片到一个图片，一般用于如导航条。由于定义坐标的枯燥和易错，一般<em>不推荐</em>。</li><li>Inline images。使用<code>data:url scheme</code>来內连图片。</li></ul><p>减少请求数是为第一次访问页面的用户提高性能的最重要的指导。</p><h3 id="1-2-Reduce-DNS-Lookups"><a href="#1-2-Reduce-DNS-Lookups" class="headerlink" title="1.2 Reduce DNS Lookups"></a>1.2 Reduce DNS Lookups</h3><p>减少DNS查询。</p><p>就像电话簿，你在浏览器地址栏输入网址，通过DNS查询得到网站真实IP。</p><p>DNS查询被缓存来提高性能。这种缓存可能发生在特定的缓存服务器（ISP/local area network维护），或者用户的计算机。DNS信息留存在操作系统DNS缓存中（在windows中就是 <em>DNS Client Serve</em> ）。大多浏览器有自己的缓存，独立于操作系统缓存。只要浏览器在自己的缓存里有某条DNS记录，它就不会向操作系统发DNS解析请求。</p><p>IE默认缓存DNS记录30分钟，FireFox默认缓存1分钟。</p><p>当客户端的DNS缓存是空的，DNS查找次数等于页面中的唯一域名数。</p><p>减少DNS请求数可能会减少并行下载数。避免DNS查找减少响应时间，但减少并行下载数可能会增加响应时间。指导原则是组件可以分散在至少2个但不多于4个的不同域名。这是两者的妥协。</p><h3 id="1-3-Avoid-Redirects"><a href="#1-3-Avoid-Redirects" class="headerlink" title="1.3 Avoid Redirects"></a>1.3 Avoid Redirects</h3><p>避免跳转。</p><p>跳转用<code>301</code>或<code>302</code>状态码来达成。一个<code>301</code>响应http头的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Location: http://example.com/newuri</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure><p>浏览器自动跳转到<code>Location</code>指定的路径。跳转所需的所有信息都在http头，所以http主体一般是空的。<code>301`</code>302<code>响应一般不会被缓存，除非有额外的头部信息，比如</code>Expires<code>或</code>Cache-Control<code>指定要缓存。</code>meta<code>刷新标签或 JavaScript 也可以跳转，但如果真要跳转，</code>3xx`跳转更好，主要是保证返回键可用。</p><p>跳转显然拖慢响应速度。在跳转的页面被获取前浏览器没什么能渲染，没什么组件能下载。</p><p>最浪费的跳转之一发生在url尾部slash（/）缺失。比如<code>http://astrology.yahoo.com/astrology</code>会<code>301</code>跳转到<code>http://astrology.yahoo.com/astrology/</code>。这可以被Apache等服务器修复，用<code>Alias</code>，<code>mod_rewrite</code>等等。</p><h3 id="1-4-Make-Ajax-Cacheable"><a href="#1-4-Make-Ajax-Cacheable" class="headerlink" title="1.4 Make Ajax Cacheable"></a>1.4 Make Ajax Cacheable</h3><p>让Ajax可缓存。</p><p>使用ajax的好处是可以向用户提供很快的反馈，因为它是向后台异步请求数据。但是，这些异步请求不保证用户等待的时间——异步不意味着瞬时。</p><p>提高ajax性能的最重要的方法是让响应被缓存，即在<a href="https://developer.yahoo.com/performance/rules.html#expires" target="_blank" rel="noopener">Add an Expires or a Cache-Control Header</a>中讨论的 Expires 。其它方法是：</p><ul><li>gzip组件</li><li>减少DNS查找</li><li>压缩JS</li><li>避免跳转</li><li>设置ETags</li></ul><h3 id="1-5-Post-load-Components"><a href="#1-5-Post-load-Components" class="headerlink" title="1.5 Post-load Components"></a>1.5 Post-load Components</h3><p>延迟加载组件。</p><p>再看看你的页面然后问问自己，“什么是页面初始化必须的？”。剩下的内容和组件可以延迟。</p><p>JavaScript是理想的（延迟）候选者，可以切分到<code>onload</code>事件之前和之后。比如拖放的js库可以延迟，因为拖动必须在页面初始化之后。其它可延迟的包括隐藏的内容，折叠起来的图片等等。</p><h3 id="1-6-Preload-Components"><a href="#1-6-Preload-Components" class="headerlink" title="1.6 Preload Components"></a>1.6 Preload Components</h3><p>预加载组件。</p><p>预加载看起来与延迟加载相反，但它的确有个不同的目标。通过预加载你可以利用浏览器的空闲时间来请求你将来会用到的组件。这样当用户访问下一个页面时，你会有更多的组件已经在缓存中，这样会极大加快页面加载。</p><p>有几种预加载类型：</p><ul><li>无条件预加载：一旦<code>onload</code>触发，你立即获取另外的组件。比如谷歌会在主页这样加载搜索结果页面用到的雪碧图。</li><li>有条件预加载：基于用户动作，你推测用户下一步会去哪里并加载相应组件。</li><li>预期的预加载：在发布重新设计（的网站）前提前加载。在旧网页预加载新网页的部分组件，那么切换到新网页时就不会是没有任何缓存了。</li></ul><h3 id="1-7-Reduce-the-Number-of-DOM-Elements"><a href="#1-7-Reduce-the-Number-of-DOM-Elements" class="headerlink" title="1.7 Reduce the Number of DOM Elements"></a>1.7 Reduce the Number of DOM Elements</h3><p>减少dom数。</p><p>一个复杂的页面意味着更多的内容要下载，以及更慢的dom访问。比如在有500dom数量的页面添加事件处理就和有5000dom数量的不同。</p><p>如果你的页面dom元素很多，那么意味着你可能需要删除无用的内容和标签来优化。</p><h3 id="1-8-Split-Components-Across-Domains"><a href="#1-8-Split-Components-Across-Domains" class="headerlink" title="1.8 Split Components Across Domains"></a>1.8 Split Components Across Domains</h3><p>把组件分散到不同的域名。</p><p>把组件分散到不同的域名允许你最大化并行下载数。由于DNS查询的副作用，最佳的不同域名数是2-4。</p><h3 id="1-9-Minimize-the-Number-of-iframes"><a href="#1-9-Minimize-the-Number-of-iframes" class="headerlink" title="1.9 Minimize the Number of iframes"></a>1.9 Minimize the Number of iframes</h3><p>最小化iframe的数量。</p><p>iframe允许html文档被插入到父文档。</p><p><iframe>优点：</iframe></p><ul><li>帮助解决缓慢的第三方内容的加载，如广告和徽章</li><li>安全沙盒</li><li>并行下载脚本</li></ul><p><iframe>缺点：</iframe></p><ul><li>即使空的也消耗（资源和时间）</li><li>阻塞了页面的<code>onload</code></li><li>非语义化（标签）</li></ul><h3 id="1-10-No-404s"><a href="#1-10-No-404s" class="headerlink" title="1.10 No 404s"></a>1.10 No 404s</h3><p>不要404。</p><p>http请求是昂贵的，所以发出http请求但获得没用的响应（如404）是完全不必要的，并且会降低用户体验。</p><p>一些网站会有特别的404页面提高用户体验，但这仍然会浪费服务器资源。特别坏的是当链接指向外部js但却得到404结果。这样首先会降低（占用）并行下载数，其次浏览器可能会把404响应体当作js来解析，试图从里面找出可用的东西。</p><h2 id="2-Server"><a href="#2-Server" class="headerlink" title="2. Server"></a>2. Server</h2><h3 id="2-1-Use-a-Content-Delivery-Network"><a href="#2-1-Use-a-Content-Delivery-Network" class="headerlink" title="2.1 Use a Content Delivery Network"></a>2.1 Use a Content Delivery Network</h3><p>使用CDN。</p><p>用户接近你的服务器会减少响应时间。把你的内容发布到多个，地理上分散的服务器可以让页面加载更快。但怎么开始？</p><p>首先不要试图把你的架构重新设计成分布式架构。因为可能引进更多复杂性和不可控。</p><p>记住80-90%的终端用户响应时间花费在下载页面中的所有组件：图片、样式、脚本、falsh等等。这是<em>Performance Golden Rule</em>。不要从困难的重新设计后台架构开始，最好首先分发你的静态内容。这不仅可以减少响应时间，用CDN还很容易来做。</p><p>CDN是一群不同地点的服务器，可以更高效地分发内容到用户。一些大公司有自己的CDN。</p><h3 id="2-2-Add-an-Expires-or-a-Cache-Control-Header"><a href="#2-2-Add-an-Expires-or-a-Cache-Control-Header" class="headerlink" title="2.2 Add an Expires or a Cache-Control Header"></a>2.2 Add an Expires or a Cache-Control Header</h3><p>加<code>Expires</code>或者<code>Cache-Control</code>头部。</p><p>这条规则有两个方面：</p><ul><li>对静态组件：通过设置<code>Expires</code>头部来实现“永不过期”策略。</li><li>对动态组件：用合适的<code>Cache-Control</code>头部来帮助浏览器进行有条件请求。</li></ul><p>页面越来越丰富，意味着更多脚本，样式，图片等等。第一次访问的用户可能需要发出多个请求，但使用Expires可以让这些组件被缓存。这避免了访问子页面时没必要的http请求。Expires一般用在图片上，但应该用在所有的组件上。</p><p>浏览器（以及代理）使用缓存来减少http请求数，加快页面加载。服务器使用http响应的<code>Expires</code>头部来告诉客户端一个组件可以缓存多久。比如下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Thu, 15 Apr 2010 20:00:00 GMT //2010-04-15之前都是稳定的</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，如果你设置了<code>Expires</code>头部，当组件更新后，你必须更改文件名。</p><h3 id="2-3-Gzip-Components"><a href="#2-3-Gzip-Components" class="headerlink" title="2.3 Gzip Components"></a>2.3 Gzip Components</h3><p>传输时用gzip等压缩组件。</p><p>http请求或响应的传输时间可以被前端工程师显著减少。终端用户的带宽，ISP，接近对等交换点等等没法被开发团队控制，但是，压缩可以通过减少http响应的大小减少响应时间。</p><p>从<code>HTTP/1.1</code>开始，客户端通过http请求中的<code>Accept-Encoding</code>头部来提示支持的压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><p>如果服务器看到这个头部，它可能会选用列表中的某个方法压缩响应。服务器通过<code>Content-Encoding</code>头部提示客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><p>gzip一般可减小响应的70%。尽可能去gzip更多（文本）类型的文件。html，脚本，样式，xml和json等等都应该被gzip，而图片，pdf等等不应该被gzip，因为它们本身已被压缩过，gzip它们只是浪费cpu，甚至增加文件大小。</p><h3 id="2-4-Configure-ETags"><a href="#2-4-Configure-ETags" class="headerlink" title="2.4 Configure ETags"></a>2.4 Configure ETags</h3><p>实体标记（Entity tags，ETag）是服务器和浏览器之间判断浏览器缓存中某个组件是否匹配服务器端原组件的一种机制。实体就是组件：图片，脚本，样式等等。ETag被当作验证实体的比最后更改（<code>last-modified</code>）日期更高效的机制。服务器这样设置组件的ETag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">Content-Length: 12195</span><br></pre></td></tr></table></figure><p>之后，如果浏览器要验证组件，它用<code>If-None-Match</code>头部来传ETag给服务器。如果ETag匹配，服务器返回304：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /i/yahoo.gif HTTP/1.1</span><br><span class="line">Host: us.yimg.com</span><br><span class="line">If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">HTTP/1.1 304 Not Modified</span><br></pre></td></tr></table></figure><p>ETag的问题是它们被构造来使它们对特定的运行这个网站的服务器唯一。浏览器从一个服务器获取组件，之后向另一个服务器验证，ETag将不匹配。然而服务器集群是处理请求的通用解决方案。</p><p>如果不能解决多服务器间的ETag匹配问题，那么删除ETag可能更好。</p><h3 id="2-5-Flush-the-Buffer-Early"><a href="#2-5-Flush-the-Buffer-Early" class="headerlink" title="2.5 Flush the Buffer Early"></a>2.5 Flush the Buffer Early</h3><p>早一点刷新buffer（尽早给浏览器数据）。</p><p>当用户请求一个页面，服务器一般要花200-500ms来拼凑整个页面。这段时间，浏览器是空闲的（等数据返回）。在php，有个方法<code>flush()</code>允许你传输部分准备好的html响应给浏览器。这样的话浏览器就可以开始下载组件，而同时后台可以继续生成页面剩下的部分。这种好处更多是在忙碌的后台或轻前端网站可以看到。</p><p>一个比较好的flush的位置是在<code>head</code>之后，因为浏览器可以加载其中的样式和脚本文件，而后台继续生成页面剩余部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- css, js --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;?php flush(); ?&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- content --&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-Use-GET-for-AJAX-Requests"><a href="#2-6-Use-GET-for-AJAX-Requests" class="headerlink" title="2.6 Use GET for AJAX Requests"></a>2.6 Use GET for AJAX Requests</h3><p>ajax请求用get。</p><p><a href="http://mail.yahoo.com/" target="_blank" rel="noopener">Yahoo! Mail</a>团队发现当使用<code>XMLHttpRequest</code>，POST 被浏览器实现为两步：首先发送头部，然后发送数据。所以使用GET最好，仅用一个TCP包发送（除非cookie太多）。IE的url长度限制是2K。</p><p>POST但不提交任何数据根GET行为类似，但从语义上讲，获取数据应该用GET，提交数据到服务器用POST。</p><h3 id="2-7-Avoid-Empty-Image-src"><a href="#2-7-Avoid-Empty-Image-src" class="headerlink" title="2.7 Avoid Empty Image src"></a>2.7 Avoid Empty Image src</h3><p>避免空src的图片。</p><p>空src属性的图片的行为可能跟你预期的不一样。它有两种形式：</p><ol><li>html标签：<code>&lt;img src=&quot;&quot;&gt;</code></li><li>js：<code>var img = new Image(); img.src = &quot;&quot;;</code></li></ol><p>两种都会造成同一种后果：浏览器会向你的服务器发请求。</p><ul><li>IE，向页面所在的目录发请求。</li><li>Safari和Chrome，请求实际的页面。</li><li>FireFox3及之前和Safari/Chrome一样，但从3.5开始修复问题，不再发请求。</li><li>Opera遇到空图片src不做任何事。</li></ul><p><strong>为什么这种行为很糟糕？</strong></p><ol><li>由于发送大量的意料之外的流量，会削弱服务器，尤其那些每天pv上百万的页面。</li><li>浪费服务器计算周期取生成不会被浏览的页面。</li><li>可能会破坏用户数据。如果你在跟踪请求状态，通过cookie或其它，你可能会破坏数据。即使image的请求不会返回图片，但所有的头部数据都被浏览器读取了，包括cookie。即使剩下的响应体被丢弃，破坏可能已经发生。</li></ol><p>这种行为的根源是uri解析发生在浏览器。RFC 3986 定义了这种行为，空字符串被当作相对路径，Firefox, Safari, 和 Chrome都正确解析，而IE错误。总之，浏览器解析空字符串为相对路径的行为被认为是符合预期的。</p><p>html5在<em>4.8.2</em>添加了对标签src属性的描述，指导浏览器不要发出额外的请求。</p><blockquote><p>The src attribute must be present, and must contain a valid URL referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted. If the base URI of the element is the same as the document’s address, then the src attribute’s value must not be the empty string.</p></blockquote><p>幸运的是将来浏览器不会有这个问题了（在图片上）。不幸的是，<code>&lt;script src=&quot;&quot;&gt;</code>和<code>&lt;link href=&quot;&quot;&gt;</code>没有这样的规范。</p><h2 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3 Cookie"></a>3 Cookie</h2><h3 id="3-1-Reduce-Cookie-Size"><a href="#3-1-Reduce-Cookie-Size" class="headerlink" title="3.1 Reduce Cookie Size"></a>3.1 Reduce Cookie Size</h3><p>http cookie的使用有多种原因，比如授权和个性化。cookie的信息通过http头部在浏览器和服务器端交换。尽可能减小cookie的大小来降低响应时间。</p><ul><li>消除不必要的cookie。</li><li>尽可能减小cookie的大小来降低响应时间。</li><li>注意设置cookie到合适的域名级别，则其它子域名不会被影响。</li><li>正确设置Expires日期。早一点的Expires日期或者没有会尽早删除cookie，优化响应时间。</li></ul><h3 id="3-2-Use-Cookie-free-Domains-for-Components"><a href="#3-2-Use-Cookie-free-Domains-for-Components" class="headerlink" title="3.2 Use Cookie-free Domains for Components"></a>3.2 Use Cookie-free Domains for Components</h3><p>用没有cookie的域名提供组件。</p><p>当浏览器请求静态图片并把cookie一起发送到服务器时，cookie此时对服务器没什么用处。所以这些cookie只是增加了网络流量。所以你应该保证静态组件的请求是没有cookie的。可以创建一个子域名来托管所有静态组件。</p><p>比如，你域名是<code>www.example.org</code>，可以把静态组件托管在<code>static.example.org</code>。不过，你如果把cookie设置在顶级域名<code>example.org</code>下，这些cookie仍然会被传给<code>static.example.org</code>。这种情况下，启用一个全新的域名来托管静态组件。</p><p>另外一个用没有cookie的域名提供组件的好处是，某些代理可能会阻止缓存待cookie的静态组件请求。</p><h2 id="4-CSS"><a href="#4-CSS" class="headerlink" title="4. CSS"></a>4. CSS</h2><h3 id="4-1-Put-Stylesheets-at-the-Top"><a href="#4-1-Put-Stylesheets-at-the-Top" class="headerlink" title="4.1 Put Stylesheets at the Top"></a>4.1 Put Stylesheets at the Top</h3><p>把样式放在顶部。</p><p>研究雅虎网页性能时发现把样式表移到<code>&lt;head&gt;</code>里会让页面更快。这是因为把样式表移到<code>&lt;head&gt;</code>里允许页面逐步渲染。</p><p>关注性能的前端工程师希望页面被逐步渲染，这时因为，我们希望浏览器尽早渲染获取到的任何内容。这对大页面和网速慢的用户很重要。给用户视觉反馈，比如进度条的重要性已经被大量研究和记录。在我们的情况中，<code>HTML</code>页面就是进度条。当浏览器逐步加载页面头部，导航条，logo等等，这些都是给等待页面的用户的视觉反馈。这优化了整体用户体验。</p><p>把样式表放在文档底部的问题是它阻止了许多浏览器的逐步渲染，包括IE。这些浏览器阻止渲染来避免在样式更改时需要重绘页面元素。所以用户会卡在白屏。</p><p><a href="http://www.w3.org/TR/html4/struct/links.html#h-12.3" target="_blank" rel="noopener">HTML规范</a>清楚表明样式应该在<code>&lt;head&gt;</code>里。</p><h3 id="4-2-Avoid-CSS-Expressions"><a href="#4-2-Avoid-CSS-Expressions" class="headerlink" title="4.2 Avoid CSS Expressions"></a>4.2 Avoid CSS Expressions</h3><p>避免CSS表达式。</p><p>CSS表达式是强大的（可能也是危险的）设置动态CSS属性的方法。IE5开始支持，IE8开始不赞成使用。例如，背景颜色可以设置成每小时轮换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: expression( (new Date()).getHours()%2 ? &quot;#B8D4FF&quot; : &quot;#F08A00&quot; );</span><br></pre></td></tr></table></figure><p>CSS表达式的问题是它们可能比大多数人预期的计算的更频繁。它们不仅在页面载入和调整大小时重新计算，也在滚动页面甚至是用户在页面上移动鼠标时计算。比如在页面上移动鼠标可能轻易计算超过10000次。</p><p>要避免CSS表达式计算太多次，可以在它第一次计算后替换成确切值，或者用事件处理函数而不是CSS表达式。</p><h3 id="4-3-Choose-lt-link-gt-over-import"><a href="#4-3-Choose-lt-link-gt-over-import" class="headerlink" title="4.3 Choose &lt;link&gt; over @import"></a>4.3 Choose <code>&lt;link&gt;</code> over <code>@import</code></h3><p>选择<code>&lt;link&gt;</code>而不是<code>@import</code>。</p><p>之前的一个最佳原则是说CSS应该在顶部来允许逐步渲染。</p><p>在IE用<code>@import</code>和把CSS放到页面底部行为一致，所以最好别用。</p><h3 id="4-4-Avoid-Filters"><a href="#4-4-Avoid-Filters" class="headerlink" title="4.4 Avoid Filters"></a>4.4 Avoid Filters</h3><p>避免使用（IE）过滤器。</p><p>IE专有的<code>AlphaImageLoader</code>过滤器用于修复IE7以下版本的半透明真彩色PNG的问题。这个过滤器的问题是它阻止了渲染，并在图片下载时冻结了浏览器。另外它还引起内存消耗，并且它被应用到每个元素而不是每个图片，所以问题（的严重性）翻倍了。</p><p>最佳做法是放弃<code>AlphaImageLoader</code>，改用PNG8来优雅降级。</p><h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h2><h3 id="5-1-Put-Scripts-at-the-Bottom"><a href="#5-1-Put-Scripts-at-the-Bottom" class="headerlink" title="5.1 Put Scripts at the Bottom"></a>5.1 Put Scripts at the Bottom</h3><p>把脚本放到底部。</p><p>脚本引起的问题是它们阻塞了并行下载。<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4" target="_blank" rel="noopener">HTTP1.1规范</a>建议浏览器每个域名下不要一次下载超过2个组件。如果你的图片分散在不同服务器，那么你能并行下载多个图片。但<strong>当脚本在下载，浏览器不会再下载其它组件，即使在不同域名下</strong>。</p><p>有些情况下把脚本移动到底部并不简单。比如，脚本中用了<code>document.write</code>来插入内容，它就不能被移动到底部。另外有可能有作用域问题。但大多数情况，有方法可以解决这些问题。</p><p>一个替代建议是使用异步脚本。<code>defer</code>属性表明脚本不包含<code>document.write</code>，是提示浏览器继续渲染的线索。不幸的是，Firefox不支持。如果脚本能异步，那么也就可以移动到底部。</p><h3 id="5-2-Make-JavaScript-and-CSS-External"><a href="#5-2-Make-JavaScript-and-CSS-External" class="headerlink" title="5.2 Make JavaScript and CSS External"></a>5.2 Make JavaScript and CSS External</h3><p>使用外部JS和CSS。</p><p>这里的很多性能规则涉及外部组件怎么管理。但你首先要明白一个基本问题：JS和CSS是应该包含在外部文件还是內连在页面本身？</p><p>真实世界中使用外部文件一般会加快页面，因为JS和CSS文件被浏览器缓存了。內连的JS和CSS怎在每次HTML文档下载时都被下载。內连减少了http请求，但增加了HTML文档大小。另一方面，如果JS和CSS被缓存了，那么HTML文档可以减小大小而不增加HTTP请求。</p><p>核心因素，就是JS和CSS被缓存相对于HTML文档被请求的频率。尽管这个因素很难被量化，但可以用不同的指标来计算。如果网站用户每个session有多个pv，许多页面重用相同的JS和CSS，那么有很大可能用外部JS和CSS更好。</p><p>许多网站用这些指标计算后在中间位置。对这些网站来说，最佳方案还是用外部JS和CSS文件。唯一例外是內连更被主页偏爱，如<a href="http://www.yahoo.com/%E3%80%82%E4%B8%BB%E9%A1%B5%E6%AF%8F%E4%B8%AAsession%E5%8F%AF%E8%83%BD%E5%8F%AA%E6%9C%89%E5%B0%91%E9%87%8F%E7%9A%84%E7%94%9A%E8%87%B3%E4%B8%80%E4%B8%AApv%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E5%85%A7%E8%BF%9E%E5%8F%AF%E8%83%BD%E6%9B%B4%E5%BF%AB%E3%80%82" target="_blank" rel="noopener">http://www.yahoo.com/。主页每个session可能只有少量的甚至一个pv，这时候內连可能更快。</a></p><p>对多个页面的首页来说，可以通过技术减少（其它页面的）http请求。在首页用內连，初始化后动态加载外部文件，接下来的页面如果用到这些文件，就可以使用缓存了。</p><h3 id="5-3-Minify-JavaScript-and-CSS"><a href="#5-3-Minify-JavaScript-and-CSS" class="headerlink" title="5.3 Minify JavaScript and CSS"></a>5.3 Minify JavaScript and CSS</h3><p>压缩JS和CSS。</p><p>压缩就是删除代码中不必要的字符来减小文件大小，从而提高加载速度。当代码压缩时，注释删除，不需要的空格（空白，换行，tab）也被删除。</p><p>混淆是对代码可选的优化。它比压缩更复杂，并且可能产生bug。在对美国top10网站的调查，压缩可减小21%，而混淆可减小25%。</p><p>除了外部脚本和样式，內连的脚本和样式同样应该被压缩。</p><h3 id="5-4-Remove-Duplicate-Scripts"><a href="#5-4-Remove-Duplicate-Scripts" class="headerlink" title="5.4 Remove Duplicate Scripts"></a>5.4 Remove Duplicate Scripts</h3><p>删除重复的脚本。</p><p>在页面中引入相同的脚本两次会伤害性能。可能超出你的预料，美国top10网站的2家有重复脚本引入。两个主要因素造成同一页面引入相同脚本：团队大小和脚本数量。当确实引入重复脚本，会发出不必要的http请求和浪费js执行时间。</p><p>发出不必要的http请求发生在IE而不是Firefox。在IE，如果外部脚本引入两次且没有缓存，它会发出2个请求。即使脚本被缓存，刷新时也会发出额外请求。</p><p>除了增加http请求，时间被浪费在执行脚本多次上。不管IE还是Firefox都会执行多次。</p><p>一种避免多次引入脚本的方法是在模板系统实现一个脚本管理模块。</p><h3 id="5-5-Minimize-DOM-Access"><a href="#5-5-Minimize-DOM-Access" class="headerlink" title="5.5 Minimize DOM Access"></a>5.5 Minimize DOM Access</h3><p>最小化DOM访问。</p><p>用JS访问DOM元素是缓慢的，所以为了响应更好的页面，你应该：</p><ul><li>缓存访问过的元素的引用</li><li>在DOM树外更新节点，然后添加到DOM树</li><li>避免用JS实现固定布局</li></ul><h3 id="5-6-Develop-Smart-Event-Handlers"><a href="#5-6-Develop-Smart-Event-Handlers" class="headerlink" title="5.6 Develop Smart Event Handlers"></a>5.6 Develop Smart Event Handlers</h3><p>开发聪明的事件处理</p><p>有时候页面看起来不那么响应（响应速度慢），是因为绑定到不同元素的大量事件处理函数执行太多次。这是为什么使用<em>事件委托</em>是一种好方法。</p><p>另外，你不必等到<code>onload</code>事件来开始处理DOM树，<code>DOMContentLoaded</code>更快。大多时候你需要的只是想访问的元素已在DOM树中，所以你不必等到所有图片被下载。</p><h2 id="6-Images"><a href="#6-Images" class="headerlink" title="6 Images"></a>6 Images</h2><h3 id="6-1-Optimize-Images"><a href="#6-1-Optimize-Images" class="headerlink" title="6.1 Optimize Images"></a>6.1 Optimize Images</h3><p>优化图片</p><p>在设计师建好图片后，在上传图片到服务器前你仍可以做些事：</p><ul><li>检查gif图片的调色板大小是否匹配图片颜色数。</li><li>可以把gif转成png看看有没有变小。除了动画，gif一般可以转成png8。</li><li>运行<code>pngcrush</code>或其它工具压缩png。</li><li>运行<code>jpegtran</code>或其它工具压缩jpeg。</li></ul><h3 id="6-2-Optimize-CSS-Sprites"><a href="#6-2-Optimize-CSS-Sprites" class="headerlink" title="6.2 Optimize CSS Sprites"></a>6.2 Optimize CSS Sprites</h3><p>优化CSS雪碧图</p><ul><li>把图片横向合并而不是纵向，横向更小。</li><li>把颜色近似的图片合并到一张雪碧图，这样可以让颜色数更少，如果低于256就可以用png8.</li><li>“Be mobile-friendly”并且合并时图片间的间距不要太大。这对图片大小影响不是太大，但客户端解压时需要的内存更少。100×100是10000个像素，1000×1000是1000000个像素。</li></ul><h3 id="6-3-Don’t-Scale-Images-in-HTML"><a href="#6-3-Don’t-Scale-Images-in-HTML" class="headerlink" title="6.3 Don’t Scale Images in HTML"></a>6.3 Don’t Scale Images in HTML</h3><p>不要在html中缩放图片</p><p>不要因为你可以设置图片的宽高就去用比你需要的大得多的图片。如果你需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</span><br></pre></td></tr></table></figure><p>那么，就用100x100px的图片，而不是500x500px的。</p><h3 id="6-4-Make-favicon-ico-Small-and-Cacheable"><a href="#6-4-Make-favicon-ico-Small-and-Cacheable" class="headerlink" title="6.4 Make favicon.ico Small and Cacheable"></a>6.4 Make favicon.ico Small and Cacheable</h3><p>favicon.ico小且缓存</p><p>favicon.ico是在你服务器根路径的图片。邪恶的是即使你不关心它，浏览器仍然会请求它。所以最好不要响应404。另外由于在同一服务器，每次请求favicon.ico时也会带上cookie。这个图片还会影响下载顺序，比如在IE，如果你在<code>onload</code>时下载额外的组件，fcvicon会在这些组件之前被下载。</p><p>怎么减轻favicon.ico的缺点？</p><ul><li>小，最好1K以下</li><li>设置Expires头部。也许可以安全地设置为几个月。</li></ul><h2 id="7-Mobile"><a href="#7-Mobile" class="headerlink" title="7 Mobile"></a>7 Mobile</h2><h3 id="7-1-Keep-Components-under-25K"><a href="#7-1-Keep-Components-under-25K" class="headerlink" title="7.1 Keep Components under 25K"></a>7.1 Keep Components under 25K</h3><p>保持组件小于25K</p><p>这个限制与iPhone不缓存大于25K的组件相关。注意，这是非压缩（uncompressed）的文件大小。在这里minification（压缩，不要与compress混淆）很重要，因为gzip无法满足（iPhone）。</p><h3 id="7-2-Pack-Components-into-a-Multipart-Document"><a href="#7-2-Pack-Components-into-a-Multipart-Document" class="headerlink" title="7.2 Pack Components into a Multipart Document"></a>7.2 Pack Components into a Multipart Document</h3><p>打包组件到一个多部父文档</p><p>打包组件到一个多部父文档类似于带附件的邮件。它帮助你在一个http请求中获取多个组件，但注意，iPhone不支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是大名鼎鼎的雅虎前端优化规则（&lt;strong&gt;Yslow&lt;/strong&gt;）的翻译。翻译并不逐字逐句，部分难以逐字翻译的被意译了，另外一些不重要的举例等也被精简。&lt;/p&gt;
&lt;p&gt;原文： &lt;a href=&quot;https://developer.yahoo.com/perfo
      
    
    </summary>
    
      <category term="扩展阅读" scheme="/categories/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="扩展阅读" scheme="/tags/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/05/07/hello-world/"/>
    <id>/2019/05/07/hello-world/</id>
    <published>2019-05-07T10:06:43.794Z</published>
    <updated>2019-05-07T09:50:07.152Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
