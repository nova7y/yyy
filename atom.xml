<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nova7y</title>
  
  
  <link href="/yyy/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-14T06:03:20.148Z</updated>
  <id>/</id>
  
  <author>
    <name>nova7y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js实现盒子内容无缝滚动</title>
    <link href="/2019/05/14/js%E5%AE%9E%E7%8E%B0%E7%9B%92%E5%AD%90%E5%86%85%E5%AE%B9%E6%97%A0%E7%BC%9D%E6%BB%9A%E5%8A%A8/"/>
    <id>/2019/05/14/js实现盒子内容无缝滚动/</id>
    <published>2019-05-14T06:00:59.682Z</published>
    <updated>2019-05-14T06:03:20.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #box &#123;height: 144px;width: 300px;margin: 100px auto;background: #eee;overflow: hidden;text-align: center;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var lHeight = 24;</span></span><br><span class="line"><span class="undefined">        var time = 50;</span></span><br><span class="line"><span class="undefined">        box.innerHTML += box.innerHTML;</span></span><br><span class="line"><span class="undefined">        box.scrollTop = 0;</span></span><br><span class="line"><span class="undefined">        var timer;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        scrollMove()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function scrollMove() &#123;</span></span><br><span class="line"><span class="undefined">            box.scrollTop++;</span></span><br><span class="line"><span class="undefined">            timer = setInterval('scroll()', time);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 间歇滚动</span></span><br><span class="line"><span class="undefined">        function scrollUp() &#123;</span></span><br><span class="line"><span class="undefined">            if (box.scrollTop % lHeight == 0) &#123; //滚动一行后，延时2秒</span></span><br><span class="line"><span class="undefined">                clearInterval(timer);</span></span><br><span class="line"><span class="undefined">                setTimeout("scrollMove()", 2000);</span></span><br><span class="line"><span class="undefined">            &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                box.scrollTop++;</span></span><br><span class="line"><span class="undefined">                //判断滚动高度,当滚动高度大于box本身的高度时，使其回到原点重新滚动</span></span><br><span class="line"><span class="undefined">                if (box.scrollTop &gt;= box.scrollHeight / 2) &#123;</span></span><br><span class="line"><span class="undefined">                    box.scrollTop = 0;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 无缝滚动</span></span><br><span class="line"><span class="undefined">        function scroll() &#123;</span></span><br><span class="line"><span class="undefined">            box.scrollTop++;</span></span><br><span class="line"><span class="undefined">            //判断滚动高度,当滚动高度大于box本身的高度时，使其回到原点重新滚动</span></span><br><span class="line"><span class="undefined">            if (box.scrollTop &gt;= box.scrollHeight / 2) &#123;</span></span><br><span class="line"><span class="undefined">                box.scrollTop = 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        box.onmouseenter = function () &#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(timer)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        box.onmouseleave = function () &#123;</span></span><br><span class="line"><span class="undefined">            scrollMove()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;直接上代码&quot;&gt;&lt;a href=&quot;#直接上代码&quot; class=&quot;headerlink&quot; title=&quot;直接上代码&quot;&gt;&lt;/a&gt;直接上代码&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS实现文件拖拽上传功能</title>
    <link href="/2019/05/13/JS%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%96%E6%8B%BD%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/"/>
    <id>/2019/05/13/JS实现文件拖拽上传功能/</id>
    <published>2019-05-13T07:22:53.447Z</published>
    <updated>2019-05-13T07:23:49.818Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.upload</span> &#123;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 50%;</span></span><br><span class="line"><span class="undefined">            left: 50%;</span></span><br><span class="line"><span class="undefined">            margin-left: -250px;</span></span><br><span class="line"><span class="undefined">            margin-top: -25px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.upload</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">            box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.upload</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: '请将文件拖拽到该区域';</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.upload</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.upload</span> <span class="selector-class">.uploadInput</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- header --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box w"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">ondrop</span>=<span class="string">"drop(event)"</span> <span class="attr">ondragover</span>=<span class="string">"allowDrop(event)"</span> <span class="attr">ondragleave</span>=<span class="string">"removeDrop(event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;a href="javascript:;" class="uploadBtn"&gt;从电脑中选择 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFile"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-3.3.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /* 文件拖拽上传</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="undefined">        var FormData = new FormData</span></span><br><span class="line"><span class="undefined">        //文件移入</span></span><br><span class="line"><span class="undefined">        function allowDrop(event) &#123;</span></span><br><span class="line"><span class="undefined">            event.preventDefault(); //阻止浏览器默认事件</span></span><br><span class="line"><span class="undefined">            event.target.style.border = "1px dotted red"</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        //文件移除</span></span><br><span class="line"><span class="undefined">        function removeDrop(event) &#123;</span></span><br><span class="line"><span class="undefined">            event.preventDefault();</span></span><br><span class="line"><span class="undefined">            event.target.style.border = "1px solid black"</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        //当鼠标松开文件</span></span><br><span class="line"><span class="undefined">        function drop(event) &#123;</span></span><br><span class="line"><span class="undefined">            event.preventDefault();</span></span><br><span class="line"><span class="undefined">            event.target.style.border = "1px solid green"</span></span><br><span class="line"><span class="undefined">            var files = event.dataTransfer.files</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            // if(files.length==0)&#123;</span></span><br><span class="line"><span class="undefined">            // 没有文件返回false</span></span><br><span class="line"><span class="undefined">            //     return false</span></span><br><span class="line"><span class="undefined">            // &#125;</span></span><br><span class="line"><span class="undefined">            AddFiles(files)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        //添加文件，for循环掉多个文件 ，支持多文件添加,这里也可以做是否为图片文件判断</span></span><br><span class="line"><span class="undefined">        function AddFiles(files) &#123;</span></span><br><span class="line"><span class="undefined">            console.log(files);</span></span><br><span class="line"><span class="undefined">            for (var i = 0; i &lt; files.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                FormData.append("file", files[i])</span></span><br><span class="line"><span class="undefined">                FileUpload(FormData)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        //最后将拿到的文件进行ajax上传，暂时没拿服务器测试，实际情况可能会有所出入</span></span><br><span class="line"><span class="undefined">        function FileUpload(FormData) &#123;</span></span><br><span class="line"><span class="undefined">            console.log(FormData);</span></span><br><span class="line"><span class="undefined">            ///这里用了jQuery的ajax封装方法，这里还没来得及封装自己的ajax  先用了jQuery的</span></span><br><span class="line"><span class="undefined">            // 　$.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            //     url:url,</span></span><br><span class="line"><span class="undefined">            //     type:"post",</span></span><br><span class="line"><span class="undefined">            //     data:FormData,</span></span><br><span class="line"><span class="undefined">            //     processData:false,</span></span><br><span class="line"><span class="undefined">            //     contentType:false,</span></span><br><span class="line"><span class="undefined">            //     success:function(data)&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            //     &#125;</span></span><br><span class="line"><span class="undefined">            // &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击上传证书文件包</span></span><br><span class="line"><span class="undefined">        // $('.uploadBtn').click(function () &#123;</span></span><br><span class="line"><span class="undefined">        //     $('.uploadInput')[0].click()</span></span><br><span class="line"><span class="undefined">        // &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>限制文本字数，超出部分用省略号显示</title>
    <link href="/2019/05/13/%E9%99%90%E5%88%B6%E6%96%87%E6%9C%AC%E5%AD%97%E6%95%B0%EF%BC%8C%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E7%94%A8%E7%9C%81%E7%95%A5%E5%8F%B7%E6%98%BE%E7%A4%BA/"/>
    <id>/2019/05/13/限制文本字数，超出部分用省略号显示/</id>
    <published>2019-05-13T06:41:33.627Z</published>
    <updated>2019-05-13T06:45:28.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置一行文字显示文本数量，超出部分用…表示"><a href="#设置一行文字显示文本数量，超出部分用…表示" class="headerlink" title="设置一行文字显示文本数量，超出部分用…表示"></a>设置一行文字显示文本数量，超出部分用…表示</h1><p>知识点：css3 text-overflow属性</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>clip</td><td>修剪文本。</td></tr><tr><td>ellipsis</td><td>显示省略符号来代表被修剪的文本。</td></tr><tr><td>string</td><td>使用给定的字符串来代表被修剪的文本。</td></tr></tbody></table><h1 id="代码实现（单行）超出部分省略："><a href="#代码实现（单行）超出部分省略：" class="headerlink" title="代码实现（单行）超出部分省略："></a>代码实现（单行）超出部分省略：</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>; </span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-box</span>; </span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span><span class="selector-pseudo">:vertical</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span><span class="selector-pseudo">:2</span>; </span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">overflow:hidden; //超出的文本隐藏</span><br><span class="line">text-overflow:ellipsis; //溢出用省略号显示</span><br><span class="line">white-space:nowrap; //溢出不换行</span><br></pre></td></tr></table></figure><h1 id="js实现多行"><a href="#js实现多行" class="headerlink" title="js实现多行"></a>js实现多行</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">#view&#123;border:1px solid red;</span><br><span class="line">width:<span class="number">200</span>px;</span><br><span class="line">height:<span class="number">70</span>px;</span><br><span class="line">overflow:auto;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"> &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id='view'&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">s = '今天学习任务是总结1、快排代码及思想，2、css实现三角形圆形，3、js和css实现限制显示字数，文字长度超出部分用省略号表示 '</span></span><br><span class="line"><span class="string">el = document.getElementById('view');</span></span><br><span class="line"><span class="string">n = el.offsetHeight;  //取到当前包裹文本的父级元素的高度， </span></span><br><span class="line"><span class="string">for(i=0; i&lt;s.length; i++) &#123;</span></span><br><span class="line"><span class="string">          el.innerHTML = s.substr(0, i);  //表示在for循环中取出长度递增的文段</span></span><br><span class="line"><span class="string">          if(n &lt; el.scrollHeight) &#123; </span></span><br><span class="line"><span class="string">          //当前文本高度的内容的高度代表着刚好达到溢出的界限，</span></span><br><span class="line"><span class="string">             el.style.overflow = 'hidden';  //将父级元素设置为隐藏</span></span><br><span class="line"><span class="string">             el.innerHTML = s.substr(0, i-3) + '...';  //最后三个字</span></span><br><span class="line"><span class="string">             break;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="当鼠标移上去显示被省略的内容"><a href="#当鼠标移上去显示被省略的内容" class="headerlink" title="当鼠标移上去显示被省略的内容"></a>当鼠标移上去显示被省略的内容</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">overflow</span>: visible;</span><br><span class="line"> <span class="attribute">text-overflow</span>: inherit;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置一行文字显示文本数量，超出部分用…表示&quot;&gt;&lt;a href=&quot;#设置一行文字显示文本数量，超出部分用…表示&quot; class=&quot;headerlink&quot; title=&quot;设置一行文字显示文本数量，超出部分用…表示&quot;&gt;&lt;/a&gt;设置一行文字显示文本数量，超出部分用…表示&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS3自定义滚动条样式</title>
    <link href="/2019/05/13/CSS3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/"/>
    <id>/2019/05/13/CSS3自定义滚动条样式/</id>
    <published>2019-05-13T06:00:17.057Z</published>
    <updated>2019-05-13T06:03:03.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，所以用处还是挺大的。当然，兼容所有浏览器的滚动条样式目前是不存在的。</p><h2 id="滚动条组成"><a href="#滚动条组成" class="headerlink" title="滚动条组成"></a>滚动条组成</h2><ul><li>::-webkit-scrollbar 滚动条整体部分</li><li>::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li><li>::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）</li><li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li><li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li><li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li><li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li></ul><h2 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,0.3);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.3);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h2><p>定义滚动条就是利用伪元素与伪类，那什么是伪元素和伪类呢？</p><p>伪类大家应该很熟悉:link,:focus,:hover，此外CSS3中又增加了许多伪类选择器，如:nth-child，:last-child，:nth-last-of-type()等。</p><p>CSS中的伪元素大家以前看过：:first-line,:first-letter,:before,:after。那么在CSS3中，伪元素进行了调整，在以前的基础上增加了一个“：”也就是现在变成了“::first-letter,::first-line,::before,::after”，另外CSS3还增加了一个“::selection”。两个“：：”和一个“：”在css3中主要用来区分伪类和伪元素。</p><p>webkit的伪类和伪元素的实现很强，可以把滚动条当成一个页面元素来定义，再结合一些高级的CSS3属性，比如渐变、圆角、RGBa等等。然后如果有些地方要用图片，可以把图片也可以转换成Base64，不然每次都得加载那个多个图片，增加请求数。</p><p>任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。下面的伪类可以应用到上面的伪元素中。有点小复杂，具体怎么写可以看第一个demo，那里也有注释。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:horizontal</span></span><br><span class="line">//horizontal伪类适用于任何水平方向上的滚动条</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:vertical</span></span><br><span class="line">//vertical伪类适用于任何垂直方向的滚动条</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:decrement</span></span><br><span class="line">//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:increment</span></span><br><span class="line">//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:start</span></span><br><span class="line">//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:end</span></span><br><span class="line">//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:double-button</span></span><br><span class="line">//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:single-button</span></span><br><span class="line">//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:no-button</span></span><br><span class="line"><span class="selector-tag">no-button</span>伪类表示轨道结束的位置没有按钮。</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:corner-present</span></span><br><span class="line">//corner-present伪类表示滚动条的角落是否存在。</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:window-inactive</span></span><br><span class="line">//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track-piece</span><span class="selector-pseudo">:start</span> &#123;</span><br><span class="line"><span class="comment">/*滚动条上半边或左半边*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span><span class="selector-pseudo">:window-inactive</span> &#123;</span><br><span class="line"><span class="comment">/*当焦点不在当前区域滑块的状态*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-button</span><span class="selector-pseudo">:horizontal</span><span class="selector-pseudo">:decrement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="comment">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，所以用处还是挺大的。当然，兼容所有浏览
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS 实现隐藏滚动条同时又可以滚动</title>
    <link href="/2019/05/13/CSS%20%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%90%8C%E6%97%B6%E5%8F%88%E5%8F%AF%E4%BB%A5%E6%BB%9A%E5%8A%A8/"/>
    <id>/2019/05/13/CSS 实现隐藏滚动条同时又可以滚动/</id>
    <published>2019-05-13T05:58:53.333Z</published>
    <updated>2019-05-13T06:00:12.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webkit-scrollbar"><a href="#webkit-scrollbar" class="headerlink" title="::-webkit-scrollbar"></a>::-webkit-scrollbar</h1><blockquote><p>有兼容问题</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-pseudo">::-webkit-scrollbar</span> &#123;<span class="attribute">display</span>:none&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">" width:200px;   height: 200px;  overflow-y: scroll;"</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            11111<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webkit-scrollbar&quot;&gt;&lt;a href=&quot;#webkit-scrollbar&quot; class=&quot;headerlink&quot; title=&quot;::-webkit-scrollbar&quot;&gt;&lt;/a&gt;::-webkit-scrollbar&lt;/h1&gt;&lt;blockquote
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>盒子设置最小高度值并自适应高度</title>
    <link href="/2019/05/13/%E7%9B%92%E5%AD%90%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E5%80%BC%E5%B9%B6%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/"/>
    <id>/2019/05/13/盒子设置最小高度值并自适应高度/</id>
    <published>2019-05-13T01:45:56.894Z</published>
    <updated>2019-05-13T01:47:11.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盒子设置最小高度值并自适应高度"><a href="#盒子设置最小高度值并自适应高度" class="headerlink" title="盒子设置最小高度值并自适应高度"></a>盒子设置最小高度值并自适应高度</h1><p>一般来说，想让一个DIV盒子的高度能够根据盒子内的内容自动调整，不设置盒子的高度值（height）就行了。</p><p>但还有一种情况：为了使盒子布局美观，需要对盒子设置一个初始高度，当盒子中的内容很少时，保持这个初始高度，如果内容超过该盒子初始高度的容量，则盒子的高度根据内容自动调整增高。所以这时需要设置一个具体的DIV盒子高度值，又要使其能够在超过初始高度时自适应。</p><p>具体解决办法是（假设DIV盒子的初始高度是500px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#columnMain</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">min-height</span>:<span class="number">500px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">height</span>:auto <span class="meta">!important</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，height:500px;适用于IE6，因为IE6不认识前两条CSS语句，但height:500px;对IE6足够了，因为IE6的渲染办法是当已设置的实际高度不够用时，会自动撑开盒子的高度；前两条CSS语句min-height:500px;height:auto !important;是对IE7+、Chrome、FF和Oprea用的，这些版本的浏览器使用min-height:500px;设置了最小高度，如果超过了最小高度，则使用height:auto !important;自动调整高度，注意这条CSS语句中有!important，所以它的优先性是超过其后的height:500px;的。</p><p>至此，问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;盒子设置最小高度值并自适应高度&quot;&gt;&lt;a href=&quot;#盒子设置最小高度值并自适应高度&quot; class=&quot;headerlink&quot; title=&quot;盒子设置最小高度值并自适应高度&quot;&gt;&lt;/a&gt;盒子设置最小高度值并自适应高度&lt;/h1&gt;&lt;p&gt;一般来说，想让一个DIV盒子的高度能
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS判断后台返回值是否存在</title>
    <link href="/2019/05/10/JS%E5%88%A4%E6%96%AD%E5%90%8E%E5%8F%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
    <id>/2019/05/10/JS判断后台返回值是否存在/</id>
    <published>2019-05-10T09:20:33.674Z</published>
    <updated>2019-05-10T09:24:11.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS判断json中的某个字段是否存在："><a href="#JS判断json中的某个字段是否存在：" class="headerlink" title="JS判断json中的某个字段是否存在："></a>JS判断json中的某个字段是否存在：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hasOwnProperty(String)，存在的话，返回true，否则返回false。代码如下：</span></span><br><span class="line"><span class="keyword">if</span> (res.data.hasOwnProperty(<span class="string">'objectName'</span>)) &#123;</span><br><span class="line"><span class="comment">// 如果存在              </span></span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS判断字符串是否为空："><a href="#JS判断字符串是否为空：" class="headerlink" title="JS判断字符串是否为空："></a>JS判断字符串是否为空：</h1><p><strong>长度判断</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strings = <span class="string">''</span>; </span><br><span class="line"><span class="keyword">if</span> (string.length == <span class="number">0</span>) &#123; </span><br><span class="line">    alert(<span class="string">'字符串为空'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>排除空格后，根据长度判断</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strings = <span class="string">' '</span>; </span><br><span class="line"><span class="keyword">if</span> (strings.replace(<span class="regexp">/(^s*)|(s*$)/g</span>, <span class="string">""</span>).length ==<span class="number">0</span>) &#123; </span><br><span class="line">    alert(<span class="string">'字符串为空'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数判断为空串，字符串为空或全部为空格</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 字符串为空或全部为空格，返回true；否则，返回false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNull</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( str == <span class="string">""</span> ) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> regu = <span class="string">"^[ ]+$"</span>;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regu);</span><br><span class="line">    <span class="keyword">return</span> re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台还是比较喜欢返回null的，如果返回的是null上面就没有办法判断了，下面是我的一些改进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是null</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (exp == <span class="literal">null</span>) &#123; </span><br><span class="line">    alert(<span class="string">"is null"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面判断的只是null的类型，有可能为空又有可能为null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为：空、空格、null，是的话返回true。否则false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNull</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( str == <span class="string">""</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ( str == <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^[ ]+$"</span>);</span><br><span class="line">    <span class="keyword">return</span> re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个比较简单的写法：要同时判断null和undefined时可使用本法。 如果 exp 为 undefined，或数字零，或 false，也会得到与 null 相同的结果，虽然 null 和二者不一样。</p><p>注意：要同时判断 null、undefined、数字零、false 时可使用本法。但是这种方法不能判断出是否为空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (!exp) &#123; </span><br><span class="line">    alert(<span class="string">"is null"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS判断json中的某个字段是否存在：&quot;&gt;&lt;a href=&quot;#JS判断json中的某个字段是否存在：&quot; class=&quot;headerlink&quot; title=&quot;JS判断json中的某个字段是否存在：&quot;&gt;&lt;/a&gt;JS判断json中的某个字段是否存在：&lt;/h3&gt;&lt;figu
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>element-ui的table表格不对齐问题</title>
    <link href="/2019/05/10/element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E4%B8%8D%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/"/>
    <id>/2019/05/10/element-ui的table表格不对齐问题/</id>
    <published>2019-05-10T05:29:40.575Z</published>
    <updated>2019-05-10T05:51:47.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>将以下样式代码添加到index.html、或app.vue中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.el-table</span> <span class="selector-tag">colgroup</span><span class="selector-class">.gutter</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h1&gt;&lt;p&gt;将以下样式代码添加到index.html、或app.vue中&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Vue" scheme="/categories/Vue/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何让多个li居中于ul中间</title>
    <link href="/2019/05/10/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%A4%9A%E4%B8%AAli%E5%B1%85%E4%B8%AD%E4%BA%8Eul%E4%B8%AD%E9%97%B4/"/>
    <id>/2019/05/10/如何让多个li居中于ul中间/</id>
    <published>2019-05-10T05:27:05.549Z</published>
    <updated>2019-05-10T08:32:20.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决方法一："><a href="#解决方法一：" class="headerlink" title="解决方法一："></a>解决方法一：</h1><blockquote><p>利用margin-left设置；</p></blockquote><p>比如 侧边栏的div宽300px;我有四个li，每个设置height：30px；width：60px；并让这四个li位于侧边栏的头部；就可以设置ul的margin-left：80px；</p><p>这样就会使四个li居于中间；如果想使四个li之间有间隔。可以设置li的margin-left:5px;这样就需要改变先前ul的margin-left为（300-240-20）/2-2.5，因为margin-left是透明的，所以才会有上面这个计算式子。可见可能会出现小数，这样是我们要避免的。利用ul的margin-left很简单地设置居中，只是不是强迫症患者的首选。因为这个方法，大家应该都会，而且百度一下，都会出来这样的例子，在此不贴代码。</p><p>在这个方法中，我们可以设置ul的高和宽，但只要不让ul的宽超过div的宽，以及不让ul的宽低于四个li的和的宽，就不会出现排版错误。</p><p>本人也不喜欢这个方法，于是，就有了第二种方法。</p><h1 id="解决方法二："><a href="#解决方法二：" class="headerlink" title="解决方法二："></a>解决方法二：</h1><blockquote><p>利用ul的text-align：center属性；</p></blockquote><p>对于第二种方法，首先要说的是，设置ul的display：table，text-align:center。是不是觉得好神奇，怎么会出现display：table，说实话，这也是我第一次用到这个属性，虽然知道有这个属性，但一般还真不用，我们似乎只用none，inline和block，但这里我们必须用这个属性，不然解决不了。下面是一段代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #div1 &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #ul1 &#123;</span></span><br><span class="line"><span class="undefined">            display: table;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .li1 &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: 5px;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            width: 70px;</span></span><br><span class="line"><span class="undefined">            height: 60px;</span></span><br><span class="line"><span class="undefined">            line-height: 60px;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            list-style-type: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>33333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码可以解决居中方法，注意：ul设为display：table；text-align：center；但记住千万千万不可以设置ul的宽，不然无法实现。</p><h1 id="解决方法三："><a href="#解决方法三：" class="headerlink" title="解决方法三："></a>解决方法三：</h1><blockquote><p>其实这不能用的方法，这方法太渣；<br>就是ul的设为text-align：center；</p></blockquote><p>li的设为display：inline；</p><p>但这样的话，就无法做出li的宽和高，虽然也会居中，但已经失去了其解决的意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决方法一：&quot;&gt;&lt;a href=&quot;#解决方法一：&quot; class=&quot;headerlink&quot; title=&quot;解决方法一：&quot;&gt;&lt;/a&gt;解决方法一：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;利用margin-left设置；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如 
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js获取客户端真实IP</title>
    <link href="/2019/05/10/js%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9EIP/"/>
    <id>/2019/05/10/js获取客户端真实IP/</id>
    <published>2019-05-10T05:23:35.910Z</published>
    <updated>2019-05-10T05:25:32.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：（所有的平台及浏览器）"><a href="#方法一：（所有的平台及浏览器）" class="headerlink" title="方法一：（所有的平台及浏览器）"></a>方法一：（所有的平台及浏览器）</h2><p>使用搜狐接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="built_in">document</span>.write(returnCitySN[<span class="string">"cip"</span>]+<span class="string">','</span>+returnCitySN[<span class="string">"cname"</span>])</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二：（所有的平台及浏览器）"><a href="#方法二：（所有的平台及浏览器）" class="headerlink" title="方法二：（所有的平台及浏览器）"></a>方法二：（所有的平台及浏览器）</h2><p>使用新浪接口：(我测试过，此方法好像不行。访问网站也不能访问了。)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://counter.sina.com.cn/ip/"</span> charset=<span class="string">"gb2312"</span>&gt;&lt;/script&gt;       &lt;!--获取接口数据，注意charset --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"IP地址："</span>+ILData[<span class="number">0</span>]+<span class="string">"&lt;br /&gt;"</span>);             <span class="comment">//输出接口数据中的IP地址</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">1</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的类型</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">2</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的省市</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">3</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"地址类型："</span>+ILData[<span class="number">4</span>]+<span class="string">"&lt;br /&gt;"</span>);         <span class="comment">//输出接口数据中的IP地址的运营商</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>个人Robert Hashemian写的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"JavaScript"</span> src=<span class="string">"http://www.hashemian.com/js/visitorIP.js.php"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</span><br><span class="line">    VIH_BackColor = <span class="string">"palegreen"</span>;</span><br><span class="line">    VIH_ForeColor = <span class="string">"navy"</span>;</span><br><span class="line">    VIH_FontPix = <span class="string">"16"</span>;</span><br><span class="line">    VIH_DisplayFormat = <span class="string">"You are visiting from:&lt;br&gt;IP Address: %%IP%%&lt;br&gt;Host: %%HOST%%"</span>;</span><br><span class="line">    VIH_DisplayOnPage = <span class="string">"yes"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h2><blockquote><p>（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）</p></blockquote><p>利用ActiveXObject控件，ie浏览器里要开启此控件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class="line">function GetLocalIPAddr()&#123; var oSetting = null; var ip = null; try&#123; oSetting = new ActiveXObject(&quot;rcbdyctl.Setting&quot;); ip = oSetting.GetIPAddress; if (ip.length == 0)&#123; return &quot;没有连接到Internet&quot;; &#125; oSetting = null; &#125;catch(e)&#123; return ip; &#125; return ip; &#125; document.write(GetLocalIPAddr()+&quot;&lt;br/&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一：（所有的平台及浏览器）&quot;&gt;&lt;a href=&quot;#方法一：（所有的平台及浏览器）&quot; class=&quot;headerlink&quot; title=&quot;方法一：（所有的平台及浏览器）&quot;&gt;&lt;/a&gt;方法一：（所有的平台及浏览器）&lt;/h2&gt;&lt;p&gt;使用搜狐接口：&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>时间格式化、时间戳转换</title>
    <link href="/2019/05/09/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/"/>
    <id>/2019/05/09/时间格式化、时间戳转换/</id>
    <published>2019-05-09T08:38:53.862Z</published>
    <updated>2019-05-09T10:18:17.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> ddd = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">var</span> year = ddd.getFullYear()</span><br><span class="line">  <span class="keyword">var</span> month = ddd.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> day = ddd.getDate()</span><br><span class="line">  <span class="keyword">var</span> hours = ddd.getHours()</span><br><span class="line">  <span class="keyword">var</span> minutes = ddd.getMinutes()</span><br><span class="line">  <span class="keyword">var</span> seconds = ddd.getSeconds()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> tempTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">return</span> tempTime.toLocaleDateString().replace(<span class="regexp">/\//g</span>, <span class="string">"-"</span>) + <span class="string">" "</span> + tempTime.toTimeString().substr(<span class="number">0</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h1 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h1><blockquote><p>javascript获得时间戳的方法有四种，都是通过实例化时间对象 new Date() 来进一步获取当前的时间戳</p></blockquote><p>1.var timestamp1 = Date.parse(new Date()); // 结果：1477808630000 不推荐这种办法，毫秒级别的数值被转化为000</p><p>  console.log(timestamp1);</p><p>2.var timestamp2 = (new Date()).valueOf(); // 结果：1477808630404 通过<code>valueOf()</code>函数返回指定对象的原始值获得准确的时间戳值</p><p>console.log(timestamp2);</p><p>3.var timestamp3 = new Date().getTime(); // 结果：1477808630404 ，通过原型方法直接获得当前时间的毫秒值，准确</p><p>console.log(timestamp3);</p><p>4.var timetamp4 = Number(new Date()) ; //结果：1477808630404 ,将时间转化为一个number类型的数值，即时间戳</p><p>console.log(timetamp4);</p><p><strong>如果不需要精确到毫秒，可以 / 1000</strong></p><h1 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h1><p>var timestamp4 = new Date(1472048779952);**//直接用 new Date(时间戳) 格式转化获得当前时间</p><p>console.log(timestamp4);</p><p>console.log(timestamp4.toLocaleDateString().replace(/\//g, “-“) + “ “ + timestamp4.toTimeString().substr(0, 8)); //再利用拼接正则等手段转化为yyyy-MM-dd hh:mm:ss 格式</p><p>不过这样转换在某些浏览器上会出现不理想的效果，因为toLocaleDateString()方法是因浏览器而异的，比如 IE为2016年8月24日 22:26:19 格式 搜狗为Wednesday, August 24, 2016 22:39:42</p><p><em>可以通过分别获取时间的年月日进行拼接，比如：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">                y = now.getFullYear(),</span><br><span class="line">                m = now.getMonth() + <span class="number">1</span>,</span><br><span class="line">                d = now.getDate();</span><br><span class="line">            <span class="keyword">return</span> y + <span class="string">"-"</span> + (m &lt; <span class="number">10</span> ? <span class="string">"0"</span> + m : m) + <span class="string">"-"</span> + (d &lt; <span class="number">10</span> ? <span class="string">"0"</span> + d : d) + <span class="string">" "</span> + now.toTimeString().substr(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间格式化&quot;&gt;&lt;a href=&quot;#时间格式化&quot; class=&quot;headerlink&quot; title=&quot;时间格式化&quot;&gt;&lt;/a&gt;时间格式化&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 盒子模型塌陷的解决方法</title>
    <link href="/2019/05/09/CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%A1%8C%E9%99%B7%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>/2019/05/09/CSS 盒子模型塌陷的解决方法/</id>
    <published>2019-05-09T07:33:02.154Z</published>
    <updated>2019-05-10T05:27:02.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="一、盒子塌陷是什么？"><a href="#一、盒子塌陷是什么？" class="headerlink" title="一、盒子塌陷是什么？"></a>一、盒子塌陷是什么？</h2><p>本应该在父盒子内部的元素跑到了外部。</p><h2 id="二，为什么会出现盒子塌陷？"><a href="#二，为什么会出现盒子塌陷？" class="headerlink" title="二，为什么会出现盒子塌陷？"></a>二，为什么会出现盒子塌陷？</h2><p> 当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是<strong>CSS高度塌陷</strong>。</p><h2 id="三，关于盒子塌陷的几种解决方法"><a href="#三，关于盒子塌陷的几种解决方法" class="headerlink" title="三，关于盒子塌陷的几种解决方法"></a>三，关于盒子塌陷的几种解决方法</h2><ol><li><p>最简单，直接，粗暴的方法就是盒子大小写死，给每个盒子设定固定的width和height，直到合适为止，这样的好处是简单方便，兼容性好，适合只改动少量内容不涉及盒子排布的版面，缺点是非自适应，浏览器的窗口大小直接影响用户体验。</p></li><li><p>给外部的父盒子也添加浮动，让其也脱离标准文档流，这种方法方便，但是对页面的布局不是很友好，不易维护。</p></li><li><p>给父盒子添加overflow属性。<br> overflow:auto; 有可能出现滚动条，影响美观。<br> overflow:hidden; 可能会带来内容不可见的问题。</p></li><li><p>父盒子里最下方引入清除浮动块。最简单的有：<br> <code>&lt;span style=&quot;clear:both;&quot;&gt;&lt;/span&gt;</code><br> 有很多人是这么解决的，但是我们并不推荐，因为其引入了不必要的冗余元素 。</p></li><li><p>after伪类清除浮动。<br> 外部盒子的after伪元素设置clear属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">       <span class="attribute">clear</span>: both;</span><br><span class="line">       <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">display</span>: block;</span><br><span class="line">       <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS&quot;&gt;&lt;/a&gt;HTML+CSS&lt;/h1&gt;&lt;h2 id=&quot;一、盒子塌陷是什么？&quot;&gt;&lt;a href=&quot;#一、盒子塌陷是什么？&quot; class=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mock.js+easyMock</title>
    <link href="/2019/05/09/mock.js+easyMock/"/>
    <id>/2019/05/09/mock.js+easyMock/</id>
    <published>2019-05-09T07:09:27.856Z</published>
    <updated>2019-05-09T07:10:41.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mock和easymock"><a href="#mock和easymock" class="headerlink" title="mock和easymock"></a>mock和easymock</h1><h3 id="WHY-mock-js"><a href="#WHY-mock-js" class="headerlink" title="WHY? mock.js"></a>WHY? <a href="http://mockjs.com/" target="_blank" rel="noopener">mock.js</a></h3><p>  <img src="./static/02.png" alt="mockjs"></p><h3 id="and-easymock"><a href="#and-easymock" class="headerlink" title="and easymock"></a>and <a href="https://www.easy-mock.com/" target="_blank" rel="noopener">easymock</a></h3><p>  <img src="./static/03.png" alt="easymock"></p><p>  <strong>对于全端开发工程师在与后台同学协同开发的时候会遇到问题</strong>: <em>(问号脸)后台接口都没有,请求个吉尔?</em><br>  我们只能使用比如Apache/node等后台语言搭建一个服务器,再加上Mysql数据库加上可视化Navicat,给我们提供数据服务. <strong>很烦</strong>,因为我们要模拟假数据表,关联数据库,测试运行后台服务并解决跨域等问题,然后才能做 <strong>前端开发</strong>,很难受,假如<strong>有一款在线工具能按照我们的接口文档咔咔往上整数据,然后发送的ajax请求都能响应且数据格式正确</strong>, 这就很舒服 ,最好<strong>能和Vue等主流框架配合使用</strong>那就更舒服了(<code>到vue再说</code>).</p><p><strong>面试装逼:</strong> <em>Mock.js</em>是一款前端开发中拦截Ajax请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.</p><hr><hr><h2 id="思考-提个简单的开发需求"><a href="#思考-提个简单的开发需求" class="headerlink" title="思考: 提个简单的开发需求:"></a>思考: 提个简单的开发需求:</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">请求后台某个接口,返回<span class="number">10</span><span class="number">-15</span>条学生数据: 要求包含 姓名,年龄,性别. 成功状态码:<span class="number">200</span> .成功状态信息: success.</span><br><span class="line"></span><br><span class="line"><span class="string">`响应数据结构分析:`</span></span><br><span class="line">&#123;</span><br><span class="line">  status:<span class="number">200</span>,</span><br><span class="line">  msg:<span class="string">'success'</span>,</span><br><span class="line">  stuInfo:</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">'abc'</span>,</span><br><span class="line">      age:<span class="number">10</span>,</span><br><span class="line">      gender:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    ...</span><br><span class="line">    ,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">'abc'</span>,</span><br><span class="line">      age:<span class="number">10</span>,</span><br><span class="line">      gender:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`方法1: 模拟后台(node/php + mysql)`</span></span><br><span class="line">  <span class="number">1</span>,搭建node服务器/Apache服务器 </span><br><span class="line">  <span class="number">2</span>,开启Mysql服务, 制定数据库,数据表,添加表信息(添加姓名,年龄,性别的值 和 值类型)</span><br><span class="line">  <span class="number">3</span>,使用node或者php语法关联数据库,声明查询sql语句,并执行sql.</span><br><span class="line">  <span class="number">4</span>,将查询db内容处理为json返回</span><br><span class="line">代码量: 前端ajax+模板引擎<span class="number">20</span>行左右 + 后台实现代码<span class="number">40</span>行左右 + 繁琐的数据表设计 + 一条条的添加数据库内容  =  BOOM心态爆炸!!!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者你可以...</span></span><br><span class="line"><span class="string">`方法2: 完全脱离后台和数据库(mockjs配合vue的拦截器),或者 脱离数据库操作(mockjs简单的node后台)`</span></span><br><span class="line">  <span class="number">1</span>,搭建node服务器</span><br><span class="line">  <span class="number">2</span>,使用mockjs的mock方法制定随机数据</span><br><span class="line">  <span class="number">3</span>,处理为json返回</span><br><span class="line">代码量: 前端ajax+模板引擎<span class="number">20</span>行左右 + node服务响应mock数据<span class="number">11</span>行 = 咦嘿嘿很开心!</span><br><span class="line">代码:</span><br><span class="line">  <span class="keyword">const</span> app = reqire(<span class="string">'express'</span>)</span><br><span class="line">  <span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line">  app.get(<span class="string">'/someApi'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> resData = Mock.mock(&#123;</span><br><span class="line">      <span class="string">'status'</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="string">'msg'</span>:<span class="string">'success'</span>,</span><br><span class="line">      <span class="string">'stuData|10-20'</span>:[&#123;</span><br><span class="line">        <span class="string">'name|1-3'</span>:<span class="regexp">/[a-z][A-Z]/</span>,</span><br><span class="line">        <span class="string">'age|+1'</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="string">'gender|1'</span>:<span class="literal">true</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData))</span><br><span class="line">  &#125;)</span><br><span class="line">  app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><hr><hr><h2 id="一-Mockjs怎么用"><a href="#一-Mockjs怎么用" class="headerlink" title="一 Mockjs怎么用?"></a>一 Mockjs怎么用?</h2><h3 id="1-mock-js的使用"><a href="#1-mock-js的使用" class="headerlink" title="1 mock.js的使用"></a>1 mock.js的使用</h3><h5 id="1-1-1-安装并引入mock-js"><a href="#1-1-1-安装并引入mock-js" class="headerlink" title="1.1.1 安装并引入mock.js"></a>1.1.1 安装并引入mock.js</h5><p>  创建一个node服务器–server.js文件<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'123'</span></span><br><span class="line"><span class="comment">// 监听路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; </span><br><span class="line">  res.end(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 开启服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h5 id="1-1-2-安装并引入mock-js"><a href="#1-1-2-安装并引入mock-js" class="headerlink" title="1.1.2 安装并引入mock.js"></a>1.1.2 安装并引入mock.js</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs </span><br><span class="line">或者 </span><br><span class="line">script:src=&quot;http://mockjs.com/dist/mock.js&quot;</span><br></pre></td></tr></table></figure><h5 id="1-1-3-mockjs模块模拟数据"><a href="#1-1-3-mockjs模块模拟数据" class="headerlink" title="1.1.3 mockjs模块模拟数据"></a>1.1.3 mockjs模块模拟数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引进express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 引进mockjs</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备随机数据</span></span><br><span class="line">  <span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|1-20'</span>: [&#123;</span><br><span class="line">      <span class="string">'name|3-5'</span>: <span class="regexp">/[a-z][A-Z]/</span>,</span><br><span class="line">      <span class="string">'age|10-15'</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="string">'gender|1'</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h5 id="1-1-4-测试服务"><a href="#1-1-4-测试服务" class="headerlink" title="1.1.4 测试服务"></a>1.1.4 测试服务</h5><p>在terminal窗口中运行命令nodemoon server.js<br>在浏览器中请求127.0.0.1:3000 观察响应体<br><img src="./static/01.bmp" alt="响应数据"></p><h5 id="1-1-5-使用"><a href="#1-1-5-使用" class="headerlink" title="1.1.5 使用"></a>1.1.5 使用</h5><p>这样在ajax请求相关接口就能返回内容随机,结构固定的JSON数据了</p><hr><h4 id="2-mockjs语法"><a href="#2-mockjs语法" class="headerlink" title="2 mockjs语法"></a>2 <a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification" target="_blank" rel="noopener">mockjs语法</a></h4><h5 id="2-1-Mock-mock-方法"><a href="#2-1-Mock-mock-方法" class="headerlink" title="2.1 Mock.mock()方法"></a>2.1 <strong>Mock.mock()方法</strong></h5><p>  加对象参数就可以生成响应数据</p><hr><h5 id="2-2-参数对象模板规则"><a href="#2-2-参数对象模板规则" class="headerlink" title="2.2 参数对象模板规则"></a>2.2 参数对象模板规则</h5><ul><li><strong>属性名|生成规则：属性值 name | rule : value</strong>  </li><li><strong>name</strong>: 生成数据的名字字符串</li><li><strong>|</strong>: 一定要加</li><li><strong>rule</strong>: 生成数据的规则<pre><code>|min-max                  生成个数min至max条|count                    生成count条|min-max.dmin-dmax        1-9.2-3  数字值在1-9之间,小数点后保留2-3位  如 2.1   3.74|min-max.dcount           1-9.2     数字值在1-9之间,小数点后保留2位   如2.13  8.54|count.dmin-dmax          10.1-2    整数部分是10,小数点部分1-2位      如10.99   10.1|count.dcount             10.2      整数部分是10,小数点部分2位        如10.11   10.43|+step                    &apos;score|+1&apos;:1,   以value 1为基准,递增1</code></pre></li><li><p><strong>value</strong>: 属性值的规则</p><ul><li><p>字符串</p><pre><code>&apos;name|min-max&apos;: string 通过重复 string 生成一个字符串，min&lt;=重复次数&lt;=max&apos;name|count&apos;: string 通过重复 string 生成一个字符串，重复次数==count。</code></pre></li><li><p>数字</p><pre><code>&apos;name|+1&apos;: number 属性值自动加 1，初始值为 number。&apos;name|min-max&apos;: number    number确定数据类型,生成值在min-max间的整数&apos;name|min-max.dmin-dmax&apos;: numbernumber确定数据类型,生成值在min-max间的小数</code></pre></li><li>布尔<pre><code>&apos;name|1&apos;: boolean随机生成一个布尔值,真假各50%&apos;name|t-f&apos;: true随机生成一个布尔值,真占t/t+f  假占f/t+f</code></pre></li><li><p>对象</p><pre><code>&apos;name|count&apos;: object从属性值 object 中随机选取 count 个属性。&apos;name|min-max&apos;: object从属性值 object 中随机选取 min 到 max 个属性。</code></pre></li><li><p><code>数组</code>  </p><pre><code>&apos;name|1&apos;: array从属性值 array 中随机选取 1 个元素，作为最终值。&apos;name|+1&apos;: array从属性值 array 中顺序选取 1 个元素，作为最终值。&apos;name|min-max&apos;: array通过重复属性值 array 生成一个新数组，重复次数大于等于 min，小于等于 max。&apos;name|count&apos;: array通过重复属性值 array 生成一个新数组，重复次数为 count。var data = mock.mock({  // 将value数组中的项(对象) 重复计算1-10次 添加到新数组返回  &apos;obj|1-10&apos;:[    {      &apos;score|+1&apos;:1    }  ]})//生成 { obj: [ { score: 1 }, { score: 2 }, { score: 3 }, { score: 4 } ] }</code></pre></li><li><p>函数(不用)</p><pre><code>&apos;name&apos;: function执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 &apos;name&apos; 所在的对象。</code></pre></li><li>正则<pre><code>&apos;name&apos;: regexp根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。/[a-z][A-Z][0-9]/  /\w\W\s\S\d\D/  /\d{5,10}/ [\u4e00-\u9fa5]    </code></pre></li></ul></li></ul><hr><h5 id="2-3-Mock-valid-template-data-校验数据-处理请求发送来的数据-如果完全脱离后台就需要该方法"><a href="#2-3-Mock-valid-template-data-校验数据-处理请求发送来的数据-如果完全脱离后台就需要该方法" class="headerlink" title="2.3  Mock.valid( template, data ) 校验数据(处理请求发送来的数据,如果完全脱离后台就需要该方法)"></a>2.3  <strong>Mock.valid( template, data )</strong> 校验数据(处理请求发送来的数据,如果完全脱离后台就需要该方法)</h5><ul><li><code>在vue中可以脱离后台开发(到下个自习说)</code></li><li><strong>template</strong> 必选, 表示数据模板，可以是对象或字符串</li><li><strong>data</strong> 必选, 表示真实数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用来做基于mock的ajax请求参数的处理</span></span><br><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line">    name: <span class="string">'value1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'value2'</span></span><br><span class="line">&#125;</span><br><span class="line">Mock.valid(template, data)<span class="comment">//返回值是一个校验结果数组</span></span><br><span class="line"><span class="comment">// 如果匹配则 返回空数组</span></span><br><span class="line"><span class="comment">// 如果不匹配 messages属性表示tteamplate和data不匹配的原因</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="2-4-Mock-random工具对象"><a href="#2-4-Mock-random工具对象" class="headerlink" title="2.4 Mock.random工具对象"></a>2.4 <a href="https://github.com/nuysoft/Mock/wiki/Mock.Random" target="_blank" rel="noopener">Mock.random</a>工具对象</h5><ul><li>Mock.Random 是一个工具类，<code>用于生成各种随机数据。不用掌握,用到就点击蓝字查</code></li></ul><hr><h1 id="3-easymock的使用"><a href="#3-easymock的使用" class="headerlink" title="3 easymock的使用"></a>3 easymock的使用</h1><p>  <img src="./static/06.png" alt="easymock"></p><h4 id="3-1-注册"><a href="#3-1-注册" class="headerlink" title="3.1 注册"></a>3.1 <a href="https://www.easy-mock.com/login" target="_blank" rel="noopener"><code>注册</code></a></h4><p>  <img src="./static/04.png" alt="个人页面"></p><h4 id="3-2-注意右侧的使用文档右键新窗口打开"><a href="#3-2-注意右侧的使用文档右键新窗口打开" class="headerlink" title="3.2 注意右侧的使用文档右键新窗口打开"></a>3.2 注意右侧的<a href="https://www.easy-mock.com/docs" target="_blank" rel="noopener"><code>使用文档</code></a>右键新窗口打开</h4><p>  <img src="./static/05.png" alt="文档"></p><h4 id="3-3-快速开始-创建一个项目-点击左侧演示项目"><a href="#3-3-快速开始-创建一个项目-点击左侧演示项目" class="headerlink" title="3.3 快速开始 - 创建一个项目 点击左侧演示项目"></a>3.3 <code>快速开始 - 创建一个项目</code> 点击左侧演示项目</h4><p>  <img src="./static/07.png" alt="打开项目"></p><h4 id="3-5-打开项目设置"><a href="#3-5-打开项目设置" class="headerlink" title="3.5 打开项目设置"></a>3.5 <code>打开项目设置</code></h4><p>  <img src="./static/08.png" alt="项目设置"></p><h4 id="3-6-配置接口点击保存-提示更新成功就OK了"><a href="#3-6-配置接口点击保存-提示更新成功就OK了" class="headerlink" title="3.6 配置接口点击保存,提示更新成功就OK了"></a>3.6 <code>配置接口</code>点击保存,提示更新成功就OK了</h4><p>  <img src="./static/09.png" alt="项目设置"></p><h4 id="3-7-接口列表配置"><a href="#3-7-接口列表配置" class="headerlink" title="3.7 接口列表配置"></a>3.7 <code>接口列表配置</code></h4><pre><code>记录当前项目的基本地址  `Base URL,注意要记录自己项目的啊!`https://www.easy-mock.com/mock/5bcd7381617c6c67bc2a20f8/itcast点击3.1左侧项目,进入个人项目,点击创建接口</code></pre><p>  <img src="./static/10.png" alt="接口列表位置"></p><h4 id="3-8-接口配置页面-左侧是当前接口返回值设置-右侧接口请求方式-地址等设置"><a href="#3-8-接口配置页面-左侧是当前接口返回值设置-右侧接口请求方式-地址等设置" class="headerlink" title="3.8 接口配置页面: 左侧是当前接口返回值设置,右侧接口请求方式,地址等设置"></a>3.8 <code>接口配置页面</code>: 左侧是当前接口返回值设置,右侧接口请求方式,地址等设置</h4><p>  <img src="./static/11.png" alt="接口详情设置">  <img src="./static/12.png" alt="配置"><br>  将以下代码粘贴至左侧区域,并配置右侧选项<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//响应状态码</span></span><br><span class="line">  <span class="string">'status'</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stus 值为数组</span></span><br><span class="line">  <span class="string">'stus|5-10'</span>: [&#123;</span><br><span class="line">    <span class="string">'name|2-4'</span>: <span class="regexp">/[\u4e00-\u9fa5]/</span>, <span class="comment">//生辰任意内容的字符串</span></span><br><span class="line">    <span class="string">'age|+1'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'score|1-100'</span>: <span class="number">100</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-9创建或更新接口后会返回到列表页面-点击预览按钮"><a href="#3-9创建或更新接口后会返回到列表页面-点击预览按钮" class="headerlink" title="3.9创建或更新接口后会返回到列表页面, 点击预览按钮"></a>3.9创建或更新接口后会返回到列表页面, <strong>点击预览按钮</strong></h4><pre><code>如果能够看到响应的数据,就说明本次请求配置是欧克的</code></pre><p>  <img src="./static/14.png" alt="接口预览-响应"><br>  <img src="./static/15.png" alt="接口预览-请求"></p><h4 id="3-10使用-POSTMan测试接口"><a href="#3-10使用-POSTMan测试接口" class="headerlink" title="3.10使用 POSTMan测试接口"></a>3.10使用 <strong>POSTMan</strong>测试接口</h4><pre><code>`拼接地址注意: 要使用easymock项目的BaseUrl 和 测试接口的地址&quot;test&quot;拼接`</code></pre><p>  <img src="./static/16.png" alt="接口预览-请求"></p><h4 id="3-11欧克-现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦"><a href="#3-11欧克-现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦" class="headerlink" title="3.11欧克,现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦!"></a>3.11欧克,现在你可以脱离数据库及后台的配置发送ajax请求直接拿数据啦!</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mock和easymock&quot;&gt;&lt;a href=&quot;#mock和easymock&quot; class=&quot;headerlink&quot; title=&quot;mock和easymock&quot;&gt;&lt;/a&gt;mock和easymock&lt;/h1&gt;&lt;h3 id=&quot;WHY-mock-js&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="扩展阅读" scheme="/categories/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="扩展阅读" scheme="/tags/%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基础</title>
    <link href="/2019/05/09/Vue%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Vue - 基础/</id>
    <published>2019-05-09T07:07:25.801Z</published>
    <updated>2019-05-09T07:08:37.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;待完成&quot;&gt;&lt;a href=&quot;#待完成&quot; class=&quot;headerlink&quot; title=&quot;待完成&quot;&gt;&lt;/a&gt;待完成&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Vue" scheme="/categories/Vue/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Node - 内置模块</title>
    <link href="/2019/05/09/Node%20-%20%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    <id>/2019/05/09/Node - 内置模块/</id>
    <published>2019-05-09T07:05:02.909Z</published>
    <updated>2019-05-09T07:07:01.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h1><table><thead><tr><th>fs</th><th>操作 文件</th></tr></thead><tbody><tr><td>const fs = require(‘fs’)</td><td></td></tr><tr><td>fs.readFile()</td><td>读取   fs.readFile(‘1.txt’,’utf-8’, (err, data) =&gt; {})</td></tr><tr><td>fs.writeFlie()</td><td>重写   fs.writeFlie(文件路径,data,(err)=&gt;{})</td></tr><tr><td>fs.watchFile()</td><td>监视fs.watchFile(‘./1.txt’,{interval:200},(curr,   prev) =&gt; {})</td></tr><tr><td>fs.access(path, (err) =&gt;   {})</td><td>存在，如果err是一个对象，就是文件不存在</td></tr><tr><td>fs.unlink(‘test.txt’, (err)   =&gt; {})</td><td>删除文件</td></tr><tr><td>fs.appendFile(file,   data, callback)</td><td>向文件中追加内容</td></tr><tr><td>fs.copyFile(src,   callback)</td><td>复制文件</td></tr><tr><td>fs.mkdir(path,   callback)</td><td>创建目录</td></tr><tr><td>fs.readDir(path,   callback)</td><td>读取目录列表</td></tr><tr><td>fs.rename(oldPath,   newPath, callback)</td><td>重命名文件/目录</td></tr><tr><td>fs.rmdir(path,   callback)</td><td>只能删除空目录</td></tr><tr><td>fs.stat(path,   callback)</td><td>获取文件/目录信息</td></tr><tr><td>fs.watch(filename[,   options][, listener])</td><td>监视文件/目录</td></tr></tbody></table><h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><table><thead><tr><th>path</th><th>操作 路径</th></tr></thead><tbody><tr><td>const path = require(‘path’)</td><td></td></tr><tr><td>path.basename(‘路径’)</td><td>获取文件名</td></tr><tr><td>path.dirname(‘路径’)</td><td>获取路径</td></tr><tr><td>path.extname(‘路径’)</td><td>获取后缀名</td></tr><tr><td>path.parse(‘路径’)</td><td>将路径转换成对象，包含各个部分</td></tr><tr><td>path.join(‘路径’,’路径’)</td><td>拼接多个路径</td></tr><tr><td>path.resolve(‘路径’,’路径’)</td><td>在当前文件目录基础上 拼接路径</td></tr></tbody></table><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><table><thead><tr><th>html</th><th>创建服务器</th></tr></thead><tbody><tr><td>const fs =   require(‘html’)</td><td></td></tr><tr><td>server.listen(8080,   ‘127.0.0.1’, (err) =&gt; { })</td><td>监听8080端口</td></tr><tr><td>server.on(‘request’,   (request, response) =&gt; {})</td><td>用户请求后  的处理程序</td></tr><tr><td>response.setHeader(‘Content-Type’,   ‘text/html’)</td><td>设置用户请求文件的content-type</td></tr><tr><td>request.method   === ‘GET’    //POST</td><td>判断提交方式</td></tr><tr><td>request.on(‘data’,   (chunk) =&gt; {    })</td><td>如果是表单提交，利用chunk抓数据包</td></tr><tr><td>request.on(‘end’,   () =&gt; {})</td><td>表单提交抓包后，的处理程序</td></tr><tr><td>response.writeHead(302, {   Location: ‘/‘ });</td><td>表单提交后，设置302跳转</td></tr></tbody></table><h1 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h1><table><thead><tr><th>querystring</th><th>字符串 转对象</th></tr></thead><tbody><tr><td>const qs = require(‘querystring’)</td><td></td></tr><tr><td>querystring.parse(str[,   sep[, eq[, options]]])</td><td>将字符串解析成对象  （字符串，默认&amp;，默认=）</td></tr></tbody></table><h1 id="mime-—-第三方模块"><a href="#mime-—-第三方模块" class="headerlink" title="mime —   第三方模块"></a>mime —   第三方模块</h1><table><thead><tr><th>mime —   第三方模块</th><th>通过后缀名 创建   Content-Type</th></tr></thead><tbody><tr><td>const mime = require(‘mime’)</td><td></td></tr><tr><td>mime.getType(后缀名)</td><td>mime.getType(.html)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fs&quot;&gt;&lt;a href=&quot;#fs&quot; class=&quot;headerlink&quot; title=&quot;fs&quot;&gt;&lt;/a&gt;fs&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;fs&lt;/th&gt;
&lt;th&gt;操作 文件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;t
      
    
    </summary>
    
      <category term="Node.js" scheme="/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node - 基础</title>
    <link href="/2019/05/09/Node%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/Node - 基础/</id>
    <published>2019-05-09T07:01:40.717Z</published>
    <updated>2019-05-09T07:04:53.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><table><thead><tr><th>类型</th><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>全局成员</td><td>Global Objects</td><td></td><td></td></tr><tr><td>__filename</td><td>console.log(__filename)</td><td>获取当前脚本名</td><td></td></tr><tr><td>__dirname</td><td></td><td>获取当前脚本所在目录</td><td></td></tr><tr><td>REPL</td><td>R：Read 读取</td><td></td><td></td></tr><tr><td>E：Eval 执行</td><td></td><td></td><td></td></tr><tr><td>P：Print 输出</td><td></td><td></td><td></td></tr><tr><td>L：Loop 循环</td><td></td><td></td><td></td></tr><tr><td>执行</td><td>打开命令行并定位到 hello.js   文件所属目录    - 在命令行中输入 node hello.js 回车执行</td><td></td><td></td></tr><tr><td>基本</td><td>require</td><td>要求，命令</td><td>用于核心模块的请求,每个核心模块就是个{}</td></tr><tr><td>request</td><td>请求</td><td></td><td></td></tr><tr><td>throw</td><td>抛出</td><td></td><td></td></tr><tr><td>init</td><td>在里面 ？</td><td></td><td></td></tr><tr><td>install</td><td>安装</td><td></td><td></td></tr><tr><td>Sync</td><td>同步</td><td></td><td></td></tr><tr><td></td><td>statusCode</td><td>响应码、状态码</td><td></td></tr><tr><td></td><td>views</td><td></td><td></td></tr><tr><td>导入导出      (用户模块 请求  (./))      (核心、第三方模块 直接名字)</td><td>module.exports</td><td>模块.导出</td><td>每个模块都有1个 这个对象</td></tr><tr><td>exports</td><td>导出</td><td>这个是module的对象，但不能导出单个成员</td><td></td></tr><tr><td>这俩都指向一个{}，可以有属性、方法，但是require给对象新赋值后   会改变对象的指向</td><td></td><td></td><td></td></tr><tr><td>JSON</td><td>JSON.parse(data)</td><td></td><td>把*.json转化成对象</td></tr><tr><td>JSON.stringify(obj)</td><td></td><td>把对象转换成json字符串</td></tr></tbody></table><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'xx.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'message.txt'</span>, <span class="string">'Hello Node.js'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The file has been saved!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="简单服务器"><a href="#简单服务器" class="headerlink" title="简单服务器"></a>简单服务器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer()</span><br><span class="line"><span class="comment">// 当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.end(<span class="string">'Hello Node.js!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 绑定端口号，启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功，请求访问 http://127.0.0.1:3000/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr
      
    
    </summary>
    
      <category term="Node.js" scheme="/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery - 基础</title>
    <link href="/2019/05/09/2.2.1.jQuery%20-%20%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/05/09/2.2.1.jQuery - 基础/</id>
    <published>2019-05-09T06:40:16.262Z</published>
    <updated>2019-05-10T08:04:27.143Z</updated>
    
    <content type="html"><![CDATA[<p><code>隐式迭代、链式编程</code></p><h1 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h1><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>$(‘选择器’);</td><td>$是一个函数   var $btn = $(‘#btn’);</td></tr><tr><td>jQuery(‘选择器’);</td><td>var $btn =   jQuery(‘#btn’)</td></tr><tr><td>$(dom对象);</td><td>DOM转jq对象</td></tr><tr><td>var div =   $(‘div’)[0];</td><td>jq转DOM对象</td></tr></tbody></table><p>通过$符号调用所返回的jQuery对象的本质就是一个集合（==伪数组==）→   jQuery对象      //  通过index()可获取一组标签中的索引</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>$(‘#id’)</td><td>ID选择器</td><td>获取指定ID的元素</td></tr><tr><td>$(‘.class’)</td><td>类选择器</td><td>获取同一类class的元素</td></tr><tr><td>$(‘div’)</td><td>标签选择器</td><td>获取同一类标签的所有元素</td></tr><tr><td>$(‘div,p,li’)</td><td>并集选择器</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>$(‘div.redClass’)</td><td>交集选择器</td><td>获取class为redClass的div元素</td></tr><tr><td>$(‘ul &gt;   li’)</td><td>子代选择器</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>$(‘ul li’)</td><td>后代选择器</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr><tr><td>$(‘li:eq(2)’).css(‘color’,   ‘red’)</td><td>:eq(index)</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>$(‘li:odd’).css(‘color’,   ‘red’)</td><td>:odd</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>$(‘li:even’).css(‘color’,   ‘red’)</td><td>:even</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr><tr><td>children(selector)</td><td>(‘ul’).children(‘li’)</td><td>相当于\$(‘ull &gt;   i’)，子类选择器</td></tr><tr><td>find(selector)</td><td>(‘ul’).find(‘li’)</td><td>相当于\$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(‘#first’).siblings(‘li’)</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(‘#first’).parent()</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(‘li’).eq(2)</td><td>相当于$(‘li:eq(2)’),index从0开始</td></tr><tr><td>end()</td><td></td><td>找上一级的jq对象</td></tr><tr><td>next()</td><td>$(‘li’).next()</td><td>找下一个兄弟</td></tr><tr><td>nextAll()</td><td></td><td></td></tr><tr><td>prev()</td><td>$(‘li’).prev()</td><td>找上一次兄弟</td></tr><tr><td>prevAll()</td><td></td></tr></tbody></table><h1 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.事件名(事件处理程序);</td><td>简单方式</td><td>$(‘button’).click(function(){     alert(‘nihao’)   });</td></tr><tr><td>jQuery对象.on(‘事件名’,事件处理程序);</td><td>on方式注册</td><td></td></tr><tr><td>jQuery对象.off(‘click’,事件处理程序名称)</td><td>解绑简单的事件</td><td></td></tr><tr><td>jQuery对象.off(‘click’,‘选择器’,事件处理程序名称)</td><td>解绑事件委托注册的事件</td><td></td></tr><tr><td>jQuery对象.trigger(‘事件名’);</td><td>触发事件</td><td>通常用于定时器，每隔<em>秒  触发一次某个元素的</em>事件</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件委托  jQuery对象.on('事件名','选择器',事件处理程序);</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul'</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// this 是谁？ 当前点击的li</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    alert($(<span class="keyword">this</span>).text());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="样式、属性、类名、内容控制"><a href="#样式、属性、类名、内容控制" class="headerlink" title="样式、属性、类名、内容控制"></a>样式、属性、类名、内容控制</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.css(name,value);</td><td></td><td>$(‘div’).css(‘width’,500);</td></tr><tr><td>jQuery对象.css({ name:value, name:value});</td><td></td><td>$(‘div’).css({      border:’10px solid blue’,      background:’pink’,    });</td></tr><tr><td>jQuery对象.css(‘样式属性名’);</td><td></td><td>var h = $(‘div’).css(‘height’);</td></tr><tr><td>jQuery对象.addClass(‘类名’);</td><td>添加类名</td><td></td></tr><tr><td>jQuery对象.removeClass(‘类名’);</td><td>移除类名</td><td></td></tr><tr><td>jQuery对象.toggleClass(‘类名’);</td><td>类名切换</td><td></td></tr><tr><td>jQuery对象.hasClass(‘类名’);</td><td>检测类名是否存在</td><td>返回布尔值</td></tr><tr><td>jQuery对象.attr(name,value)</td><td>设置标签的属性</td><td>$(“img”).attr(“width”,”180”);</td></tr><tr><td>jQuery对象.attr(name);</td><td>获取标签属性值</td><td></td></tr><tr><td>removeAttr(name);</td><td>移除标签的属性</td><td></td></tr><tr><td>$(‘input’).prop(‘属性名’);</td><td>prop方法操作属性</td><td>针对：selected、checked、disabled</td></tr><tr><td>jQuery对象.text();</td><td>操作标签内部的文本</td><td></td></tr><tr><td>jQuery对象.html();</td><td>操作标签内部的所有内容</td><td></td></tr><tr><td>jQuery对象.val();</td><td>操作表单元素的内容</td></tr></tbody></table><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>jQuery对象.show(speed,easing,fn);</td><td>显示</td><td>-   参数speed，动画时长，数字→毫秒      - easing，运动的方式，默认swing缓冲,linear匀速</td></tr><tr><td>jQuery对象.hide(speed,easing,fn);</td><td>隐藏</td><td></td></tr><tr><td>jQuery对象.toggle(speed,easing,fn);</td><td>切换</td><td></td></tr><tr><td>jQuery对象.slideDown(speed,easing,fn);</td><td>下拉 卷曲-显示</td><td></td></tr><tr><td>jQuery对象.slideUp(speed,easing,fn);</td><td>下拉 卷曲-隐藏</td><td></td></tr><tr><td>jQuery对象.slideToggle(speed,easing,fn);</td><td>下拉 卷曲-切换</td><td></td></tr><tr><td>jQuery对象.fadeIn(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>jQuery对象.fadeOut(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>jQuery对象.fadeToggle(speed,easing,fn);</td><td>淡入淡出</td><td></td></tr><tr><td>animate(params,[speed],[easing],[fn])</td><td>自定义动画</td><td>animage({   样式属性名:目标值, 样式属性名:目标值},1000)</td></tr><tr><td>jQuery对象.stop(clearQueue,jumpToEnd);</td><td>停止动画</td><td>2个值 是布尔值</td></tr></tbody></table><h1 id="标签元素控制"><a href="#标签元素控制" class="headerlink" title="标签元素控制"></a>标签元素控制</h1><table><thead><tr><th>动态创建元素</th><th>中文</th></tr></thead><tbody><tr><td>$(‘<li></li>‘)</td><td>创建元素</td></tr><tr><td>新创建jQuery对象.appendTo(‘父选择器’、父对象);</td><td>在最后追加元素</td></tr><tr><td>父元素jQuery对象.apeend(新创建的jQuery对象);</td><td></td></tr><tr><td>新创建jQuery对象.prependTo(‘父元素选择器’);</td><td>在前面追加元素</td></tr><tr><td>父元素jQuery对象.prepend(新创建的jQuery对象);</td><td></td></tr><tr><td>jQuery对象.remove()</td><td>删除元素   删谁就让谁调用这个方法</td></tr><tr><td>jQuery对象.empty()</td><td>清空元素   清空内部的所有元素及元素相关的事件</td></tr><tr><td>jQuery对象.html(‘’);</td><td>清空元素   不推荐使用，该方式不会清空事件</td></tr><tr><td>jQuery对象.clone(布尔值);    返回克隆好的元素</td><td>参数：默认是false,表示仅仅克隆内容。   true，克隆内容和事件</td></tr><tr><td>$(“选择器”).before(html);</td><td></td></tr><tr><td>$(“选择器”).after(html)</td></tr></tbody></table><table><thead><tr><th>操作元素的尺寸</th><th>中文</th></tr></thead><tbody><tr><td>jQuery对象.width(数字);</td><td>仅内容部分</td></tr><tr><td>jQuery对象.height(数字);</td><td>仅内容部分</td></tr><tr><td>jQuery对象.innerWidth(数字);</td><td>内容部分 + padding</td></tr><tr><td>jQuery对象.innerHeight(数字);</td><td>内容部分 + padding</td></tr><tr><td>jQuery对象.outerWidth(数字);</td><td>内容部分 + padding +   border   .outerWidth(true) 额外获取margin</td></tr><tr><td>jQuery对象.outerHeight(数字);</td><td>内容部分 + padding +   border</td></tr></tbody></table><table><thead><tr><th>操作元素的位置</th><th>中文</th></tr></thead><tbody><tr><td>jQuery对象.offset()</td><td>获取的元素的位置，永远参照文档,返回一个对象，对象中包含了元素的位置</td></tr><tr><td>jQuery对象.position();</td><td>返回的一个对象，对象中包含了元素的位置，参照最近的定位元素（和定位有关系）</td></tr><tr><td>jQuery对象.scrollTop();</td><td>$(window).scrollTop()   操作卷去的页面间距</td></tr></tbody></table><h1 id="JQ-ajax"><a href="#JQ-ajax" class="headerlink" title="JQ - ajax"></a>JQ - ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123; <span class="attr">key</span>:value &#125;）</span><br><span class="line">       </span><br><span class="line">url：请求地址</span><br><span class="line">type：请求方法，默认为 <span class="keyword">get</span></span><br><span class="line">dataType：服务端响应数据类型</span><br><span class="line">contentType：请求体内容类型，默认 application/x-www-form-urlencoded</span><br><span class="line">data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</span><br><span class="line">timeout：请求超时时间</span><br><span class="line">beforeSend：请求发起之前触发</span><br><span class="line">success：请求成功之后触发（响应状态码 200）</span><br><span class="line">error：请求失败触发</span><br><span class="line">complete：请求完成触发（不管成功与否）</span><br><span class="line">       </span><br><span class="line">//或者：</span><br><span class="line">$.<span class="keyword">get</span>(url, data, callback)</span><br><span class="line">$.post(url, data, callback)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"/greet"</span>,</span><br><span class="line">    data: &#123;<span class="attr">name</span>: <span class="string">'jenny'</span>&#125;,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// data = jQuery.parseJSON(data);  //dataType指明了返回数据为json类型，故不需要再反序列化</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="请求头设置"><a href="#请求头设置" class="headerlink" title="请求头设置"></a>请求头设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是全局的，所有的ajax请求都会加上这个请求头</span></span><br><span class="line"> $(<span class="built_in">document</span>).ajaxSend(<span class="function"><span class="keyword">function</span> (<span class="params">event, xhr</span>) </span>&#123;</span><br><span class="line">            xhr.setRequestHeader(<span class="string">"custom-header"</span>, <span class="string">"custom-info"</span>) ;  <span class="comment">// 增加一个自定义请求头</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部设置请求头</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  headers:&#123;</span><br><span class="line">   <span class="string">"Referer"</span>: <span class="string">"http://www.baidu.com"</span> <span class="comment">// 有些浏览器不允许修改该请求头       </span></span><br><span class="line">   ,<span class="string">"User-Agent"</span>: <span class="string">"newLine"</span> <span class="comment">// 有些浏览器不允许修改该请求头        </span></span><br><span class="line">   ,<span class="string">"X-Power"</span>: <span class="string">"newLine"</span>       </span><br><span class="line">   ,<span class="string">"Accept-Language"</span>: <span class="string">"en-US"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>入口函数</td><td>$(function(){ // 获取元素});</td></tr><tr><td>$(document).ready(function(){   // 获取元素});</td></tr></tbody></table><p>window.onload会等页面全部加载完执行 只能存在一个，而jq可以存在多个，dpm树结束后就运行    </p><p>“这俩都是在jq原型中创建一个方法，让jq对象调用（如果用上了this  this代码调用者）<br>$.prototype.createTable = function (shuju) {}<br>$.fn.createTable = function (shuju) {}”    </p><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>事件对象.clientX/Y   参照浏览器</td><td>事件对象.preventDefault();   阻止默认行为</td></tr><tr><td>事件对象.pageX/Y   参照文档</td><td>事件对象.stopPropagation();   阻止事件冒泡</td></tr><tr><td>事件对象.offsetX/Y   参照事件源</td><td>事件对象.keyCode   返回键码数字</td></tr><tr><td>事件对象.target;</td><td>事件对象.alt/shift/ctrlKey   返回是布尔值。 检测是否按下（true）</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th><th></th><th></th></tr></thead><tbody><tr><td>多库共存</td><td>jq对象 =   jQuery.noConflict();</td><td>不 冲突</td><td>释放$，改成自定义的对象      var $1 = jQuery.noConflict();</td></tr><tr><td>深/浅拷贝</td><td>$.extend([true],obj1,obj2)</td><td>对obj1进行 深拷贝、浅拷贝</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>*.data()</td><td>拿标签中的data-* 自定义属性的值</td></tr></tbody></table><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>$(selector).load(function)</td><td>当指定的元素（及子元素）已加载时，会发生 load() 事件</td></tr><tr><td>jQuery.getJSON(url,data,success(data,status,xhr))</td><td>通过 HTTP GET 请求载入 JSON 数据。</td></tr><tr><td>jQuery.getScript(url,success(response,status))</td><td>getScript() 方法通过 HTTP GET 请求载入并执行 JavaScript 文件。</td></tr><tr><td>$(from表单).serialize()</td><td>统一获取表单中的数据，以键值对 呈现（input需要name属性）</td></tr></tbody></table><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="回到页面顶端-获取元素位置"><a href="#回到页面顶端-获取元素位置" class="headerlink" title="回到页面顶端+获取元素位置"></a>回到页面顶端+获取元素位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 窗口卷曲事件</span></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = $(<span class="built_in">window</span>).scrollTop() <span class="comment">// 获取页面卷曲值</span></span><br><span class="line">    <span class="keyword">let</span> a = $(<span class="string">'.jia'</span>).offset().top <span class="comment">//获取元素距离页面订单的px</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'html,body'</span>).animate(&#123;</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;) <span class="comment">//回到页面顶端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;隐式迭代、链式编程&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;jQuery对象&quot;&gt;&lt;a href=&quot;#jQuery对象&quot; class=&quot;headerlink&quot; title=&quot;jQuery对象&quot;&gt;&lt;/a&gt;jQuery对象&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr
      
    
    </summary>
    
      <category term="jQuery" scheme="/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 高级、ES5、ES6</title>
    <link href="/2019/05/09/2.1.4.JavaScript%20-%20%E9%AB%98%E7%BA%A7%E3%80%81ES5%E3%80%81ES6/"/>
    <id>/2019/05/09/2.1.4.JavaScript - 高级、ES5、ES6/</id>
    <published>2019-05-09T06:05:56.131Z</published>
    <updated>2019-05-09T06:39:43.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-高级"><a href="#JS-高级" class="headerlink" title="JS 高级"></a>JS 高级</h1><h2 id="原型-对象"><a href="#原型-对象" class="headerlink" title="原型-对象"></a>原型-对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>原型中定义的属性或方法，可以被所关联的构造函数所创建的实例对象==共享==。   减少了属性或方法的在内存占的使用，节省了内存空间。</td><td></td></tr><tr><td>构造函数名.prototype</td><td>构造函数可以通过prototype找到原型</td></tr><tr><td>.constructor</td><td>原型可以通过constructor找到关联的构造函数</td></tr><tr><td>原型链：先从对象本身中查找、会通过proto这个属性提供的地址，找到原型对象、会通过proto这个属性提供的地址，找到原型的原型</td></tr></tbody></table><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型方式继承："><a href="#原型方式继承：" class="headerlink" title="原型方式继承："></a>原型方式继承：</h3><blockquote><p>可继承方法，但不继承属性   </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = <span class="string">'人类'</span>;</span><br><span class="line">     <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 原型继承</span></span><br><span class="line">   Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">   <span class="comment">// 给原型添加constructor属性</span></span><br><span class="line">   Student.prototype.contructor = Student;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 创建一个学生对象</span></span><br><span class="line">   <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">   stu1.eat();</span><br></pre></td></tr></table></figure><h3 id="借用继承："><a href="#借用继承：" class="headerlink" title="借用继承："></a>借用继承：</h3><blockquote><p>call方法改变this的指向，但是不继承函数方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 代表的具体的某一个学生的实例 stu1 、stu2</span></span><br><span class="line">  <span class="keyword">var</span> stu = <span class="keyword">this</span>;</span><br><span class="line">  Person.call(stu,name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个学生对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="组合继承："><a href="#组合继承：" class="headerlink" title="组合继承："></a>组合继承：</h3><blockquote><p>原型继承+借用继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我会吃....."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用继承【借用属性】</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>,name,age,gender)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型继承【继承方法】</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 设置原型contructor属性指向Student</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 创建一个学生对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>,<span class="number">10</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure><h3 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">// 记得用super调用父类的构造方法!</span></span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myGrade() &#123;</span><br><span class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数其他"><a href="#函数其他" class="headerlink" title="函数其他"></a>函数其他</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>函数名.arguments</td><td>获取用户传入的实参</td></tr><tr><td>函数.length</td><td>获取函数形参的个数</td></tr><tr><td>函数.name</td><td>函数的名字</td></tr></tbody></table><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bieShu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'三儿'</span>;</span><br><span class="line">    <span class="keyword">var</span> guanJia = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        a = v;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> guanJia;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cyqz = bieShu();</span><br><span class="line">cyqz(<span class="string">'3'</span>);</span><br><span class="line">cyqz(<span class="string">'33'</span>);</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jisuan</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jisuan(n - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = jisuan(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">52</span>,</span><br><span class="line">    cars: [<span class="string">'奔驰'</span>, <span class="string">'宝马'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">    name: <span class="string">'小三'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!son.hasOwnProperty[key]) &#123;</span><br><span class="line">        son[key] = father[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">52</span>,</span><br><span class="line">    cars: [<span class="string">'奥迪'</span>, <span class="string">'大众'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">    name: <span class="string">'小三'</span></span><br><span class="line">&#125;</span><br><span class="line">copy(father, son)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">fatherOBJ, sonOBJ</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> fatherOBJ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sonOBJ.hasOwnProperty[key]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fatherOBJ[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                sonOBJ[key] = <span class="keyword">new</span> <span class="built_in">Array</span>() </span><br><span class="line">                copy(fatherOBJ[key], sonOBJ[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fatherOBJ[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">                sonOBJ[key] = <span class="keyword">new</span> object() </span><br><span class="line">                copy(fatherOBJ[key], sonOBJ[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sonOBJ[key] = fatherOBJ[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ol><li>在内存中申请了一块空间，存放了一个对象。</li><li>让构造函数内部的this指向该空间</li><li>通过this向内存中空的对象中添加属性和方法</li><li>new关键字最后将this返回给外部变量</li></ol><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this通常指向于调用者<code>会找最近的包裹的function</code></p><ol><li>在全局环境下，this 始终指向全局对象（window）</li><li>普通函数内部this严格模式：window  非严格模式：undefined</li><li>对象内部方法的this指向调用这些方法的对象</li><li>原型链中的方法的this仍然指向调用它的对象</li><li>构造函数中的this与被创建的新对象绑定。</li></ol><table><thead><tr><th>改变this指向</th><th>描述</th></tr></thead><tbody><tr><td>cell   可以用函数       例如 数组中的push            ////           组合继承中也用这个</td><td></td></tr><tr><td>函数名.call(调用者,参数1…)</td><td>函数被借用时，会立即执行，并且函数体内的this会指向借用者或调用者</td></tr><tr><td>函数名.apply(调用者,[参数1…])</td><td>函数被借用时，会立即执行，并且函数体内的this会指向借用者或调用者</td></tr><tr><td>函数名.bind(调用者,参数1…)</td><td>不会立即执行，返回新的函数。并且函数体内的this会指向借用者或调用者</td></tr></tbody></table><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>let<ul><li>let 定义变量,变量不可以重名,必须先定义再使用- 具有块级作用域- 没有变量提升 </li></ul></li><li>const<ul><li>常量一旦初始化，不可以重新赋值</li><li>const 定义常量，常量不可以重名，必须先定义再使用- 具有块级作用域- 没有变量提升</li></ul></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul><li>数组解构<ul><li>let arr = [5, 9, 10];             let [a, b, c] = arr;</li></ul></li><li>对象解构<ul><li>let obj = {foo: ‘aaa’, bar: ‘bbb’};let { foo, bar} = obj;       </li><li>// 更改变量的名称  let obj = {foo: ‘aaa’, bar: ‘bbb’};let {foo: a, bar: b } = obj;</li><li></li><li>let obj = { name: ‘zs’, dog: {  name: ‘BYD’, age: 1}}</li><li>let { dog: { name, age } } = obj;</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><code>箭头函数 不能用于  构造函数</code></p><ul><li>箭头函数<ul><li>let fn = (x, y) =&gt; {    console.log(arguments);    x = 2 <em> x;    y = 2 </em> y;    return x + y;}       </li><li>//若形参只有1个 可省略括号，若代码块只有1个 可省略{}</li></ul></li><li>默认值    function fn(x, y = ‘world’) { }           <ul><li>//形参y 的默认值是world，若传值，则会覆盖    </li></ul></li><li>—rest<ul><li>function getMax(…values) {}           getMax(6, 1, 100, 9, 10)            </li><li>//  写 “  … + 名称  “   函数调用传参时 多余的参数会放在数组中    </li></ul></li></ul><h2 id="Array-扩展"><a href="#Array-扩展" class="headerlink" title="Array 扩展"></a>Array 扩展</h2><ul><li>扩展运算符    <ul><li>// 合并两个数组      let arr1 = [1, 2];let arr2 = [3, 4];let arr3 = […arr1, …arr2];    </li><li>// 把数组展开作为参数，可以替代 apply   </li><li>// 求数组的最大值   let arr = [6, 99, 10, 1];let max = Math.max(…arr);    </li></ul></li><li>Array.from()    <ul><li>//把伪数组转成数组 </li><li>let fakeArr = {  0: 1,  1: 2,  2: 3,  length: 3};</li><li>let arr = Array.from(fakeArr);console.log(arr);    </li></ul></li><li>find()<ul><li>找到数组中第一个满足条件的成员并返回该成员，如果找不到返回undefined</li><li>let arr = [1, 3, -5, 6, -2];let result = arr.find((x) =&gt; x &lt; 0);    </li><li>//find 回调函数有 3 个参数</li><li>arr.find(function (item, index, ar) {    // item  当前的值    // index 当前的值对应的索引    // ar 原数组});</li></ul></li><li>findIndex()<ul><li>找到数组中第一个满足条件的成员并返回该成员的索引，如果找不到返回 -1    </li></ul></li><li>includes()<ul><li>判断数组是否包含某个值，返回 true / false    </li></ul></li></ul><h2 id="String-扩展"><a href="#String-扩展" class="headerlink" title="String 扩展"></a>String 扩展</h2><ul><li>模板字符串    <ul><li>let name = ‘zs’;let age = 18;         // 拼接多个变量 let str = <code>我是${name}，今年${age}</code>;    </li></ul></li><li>includes()     <ul><li>返回布尔值，表示是否找到了参数字符串    </li></ul></li><li>startsWidth() <ul><li>返回布尔值，表示参数字符串是否在原字符串的头部    </li></ul></li><li>endsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的尾部。    </li></ul></li><li>repeat()<ul><li>返回一个新字符串，表示将原字符串重复n次。    </li></ul></li></ul><h2 id="Number-扩展"><a href="#Number-扩展" class="headerlink" title="Number 扩展"></a>Number 扩展</h2><p>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p><ul><li>Number.parseInt()</li><li><ul><li>Number.parseFloat()        </li></ul></li></ul><ul><li>Set 的成员<ul><li>size：属性，获取 set 中成员的个数，相当于数组中的 length</li><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>clear()：清除所有成员，没有返回值。</li></ul></li></ul><p>新增的内置对象,但是成员都是唯一的   // Set 可以通过一个数组初始化  let set = new Set([1, 2, 1, 5, 1, 6]);// 数组去重   let arr = […set];    </p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>通常用于ajax，处理异步请求</p><h2 id="async、await"><a href="#async、await" class="headerlink" title="async、await"></a>async、await</h2><p>async await需要配合使用</p><p>async函数return值是promise对象，结果需要.then 或调用函数时加上await</p><p> (若包含ajax、定时器，则推荐使用async+await来处理程序执行顺序)    </p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>默认导出</td><td>export default {导出内容}</td><td>export default {id:uid,name:uname}                         //导出时default  只能出现一次</td></tr><tr><td>按需导出</td><td>export *(导出变量、函数等)</td><td>export var a =   10           export {a:a,b:b}</td></tr><tr><td>默认导入</td><td>import 接收名称 from   ‘模块名称’</td><td>import abc{成员, ..}   from ‘模块名称’             存在默认导出（未起名）   +   按需导出//导入时可给默认导出的起名</td></tr><tr><td>按需导入</td><td>import {成员, ..} from   ‘模块名称’</td><td>import { 成员名称 as   别名,成员名称… } from ‘模块名称’</td></tr></tbody></table><p>？按需和默认的一并导入，必须是默认的在前、按需的在后</p><h2 id="三点运算符"><a href="#三点运算符" class="headerlink" title="三点运算符"></a>三点运算符</h2><p>…      合并数组、对象  </p><p>//例：let newAry = […ary1,…ary2]    /   let newObj = {…obj1,…obj2}</p><h2 id="对象key名称"><a href="#对象key名称" class="headerlink" title="对象key名称"></a>对象key名称</h2><p>var keyName = ‘uName’;       var obj = { [keyName]: ‘nihao’ }</p><p>es6中 可以动态自定义对象key名称</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>类型</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>不确定es版本</td><td></td><td></td></tr><tr><td>number</td><td>num.toFixed(3)</td><td>保留小数点3位</td></tr><tr><td>js错误处理</td><td>try{}catch(e){console.log(e.message)}</td><td></td></tr><tr><td>获取自定义属性</td><td>this.dataset.id</td><td></td></tr><tr><td>转URL编码 encodeURIComponent(q)       转URL编码 querystring.escape(str)</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>利用json深拷贝</td><td>this.todoContent =   JSON.parse(JSON.stringify(item))</td><td></td></tr><tr><td>数组按照大小排序</td><td>ary.sort((a,b)=&gt;(a-b))</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-高级&quot;&gt;&lt;a href=&quot;#JS-高级&quot; class=&quot;headerlink&quot; title=&quot;JS 高级&quot;&gt;&lt;/a&gt;JS 高级&lt;/h1&gt;&lt;h2 id=&quot;原型-对象&quot;&gt;&lt;a href=&quot;#原型-对象&quot; class=&quot;headerlink&quot; title=&quot;原型-
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Math、Array、Date、String</title>
    <link href="/2019/05/09/2.1.2.JavaScript%20-%20Math%E3%80%81Array%E3%80%81Date%E3%80%81String/"/>
    <id>/2019/05/09/2.1.2.JavaScript - Math、Array、Date、String/</id>
    <published>2019-05-09T05:49:42.142Z</published>
    <updated>2019-05-09T05:49:17.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>Math</th><th>Math.*</th></tr></thead><tbody><tr><td>Math.PI</td><td>获取圆周率</td></tr><tr><td>Math.random()</td><td>返回大于等于0小于1之间的随机数</td></tr><tr><td>Math.floor()</td><td>向下取整，返回一个小于当前数字的整数</td></tr><tr><td>Math.ceil()</td><td>向上取整，返回一个大于当前数字的整数</td></tr><tr><td>Math.round()</td><td>四舍五入</td></tr><tr><td>Math.abs()</td><td>取绝对值</td></tr><tr><td>Math.max()</td><td>返回一组数中的最大值(不可是数组)</td></tr><tr><td>Math.min()</td><td>返回一组数中的最小值(不可是数组)</td></tr><tr><td>Math.pow(x,y)</td><td>返回x的y次幂</td></tr></tbody></table><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><table><thead><tr><th>Array</th><th></th></tr></thead><tbody><tr><td>*.toString()</td><td>把数组转换为字符串，使用逗号分隔</td></tr><tr><td>*.valueOf()</td><td>返回数组对象本身 ？？？</td></tr><tr><td>*.ary.push()</td><td>数组末尾 增加值</td></tr><tr><td>*.ary.pop()</td><td>用于删除数组的最后一个元素并返回删除的元素。(会修改数组长度)</td></tr><tr><td>*.ary.shift()</td><td>用于删除数组的第一个元素并返回删除的元素。(会修改数组长度)</td></tr><tr><td>*.unshift(number)</td><td>在数组起始位置添加一个、或多个值</td></tr><tr><td><em>.concat(</em>   //可以是 nub、ary   )</td><td>拼接字符串、数组（第一个不能是Number类型）</td></tr><tr><td>*.slice(startindex,   endindex)</td><td>从当前数组中复制个新的数组，如果第二个值不写，则取到结尾</td></tr><tr><td>*.splice(startindex,   deletCont, options)</td><td>删除或者替换数组中的某些值</td></tr><tr><td>*.indexOf(content[,index])，lastIndexof()</td><td>查找所传值 在数据中的索引，未找到的话   返回-1</td></tr><tr><td>*.join(‘内容’)</td><td>在数组中的值 之间 插入内容，并转成字符串</td></tr><tr><td>*.reverse()</td><td>数组反转</td></tr><tr><td>*.filter(function(item,index,   ary) {return 不要的值})     //返回一个新数组,可以获取赛选结果</td><td></td></tr><tr><td>map(function(item,index,ary)   {})  //遍历数组,返回一个新数组</td><td></td></tr><tr><td>*.forEach(function(item,index,   ary) {}) //遍历数组,没有返回值</td><td></td></tr><tr><td>*.sort()</td><td>数组排序，默认按升序 排序</td></tr><tr><td>var ary = [1500, 2000, 1000, 2100, 900, 1900, 3000]      ary.filter(function(item, index) {           if (item &gt;= 2000) {                 ary.splice(index, 1)            }       })</td><td>var ary = [‘a’, ‘b’,   ‘c’, ‘d’, ‘a’, ‘e’, ‘f’, ‘a’, ‘g’, ‘h’]      ary.forEach(function(item, index) {           if (item == ‘a’) {             console.log(index)             }       })</td></tr></tbody></table><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><table><thead><tr><th>Date</th><th>var * = new   Date()</th></tr></thead><tbody><tr><td>*.toString();</td><td>转化成字符串(Sat Nov 03 2018 19:04:20   GMT+0800 (中国标准时间))</td></tr><tr><td>*.toDateString();</td><td>转换成日期字符串(Sat Nov   03 2018)</td></tr><tr><td>*.toTimeString();</td><td>转换成时间字符串(19:04:20   GMT+0800 (中国标准时间))</td></tr><tr><td>*.toLocaleDateString();</td><td>返回本地的日期格式  （不同浏览器不同效果）</td></tr><tr><td>*.toLocaleTimeString();</td><td>返回本地的时间格式  （不同浏览器不同效果）</td></tr><tr><td></td><td></td></tr><tr><td>*.getSeconds()</td><td>获取秒</td></tr><tr><td>*.getMinutes()</td><td>获取分钟</td></tr><tr><td>*.getHours()</td><td>获取小时</td></tr><tr><td>*.getDay()</td><td>返回周几   （0表示周日）</td></tr><tr><td>*.getDate()</td><td>返回当前月的第几天</td></tr><tr><td>*.getMonth()</td><td>返回月份   （从0开始）</td></tr><tr><td>*.getFullYear()</td><td>返回年份</td></tr><tr><td>*.valueOf()</td><td>获取当前时间毫秒</td></tr><tr><td>*.getTime()</td><td></td></tr><tr><td>Date.now()</td><td></td></tr><tr><td>toLocaleString()</td><td>格式化</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table><thead><tr><th>String</th><th></th></tr></thead><tbody><tr><td>*.charAt(索引)</td><td>获取指定位置处的字符</td></tr><tr><td>*.str[index]</td><td>获取指定位置的字符 （H5中的方法）</td></tr><tr><td><em>.concat(</em>   //可以是 nub、ary   )</td><td>拼接字符串、数组（第一个不能是Number类型）</td></tr><tr><td>*.slice(索引,索引)</td><td>从指定位置开始，截取字符串到结束位置，end值取不到</td></tr><tr><td>*.substring(start,end)</td><td>从指定位置开始，截取字符串到结束位置，   end值取不到</td></tr><tr><td>*.substr(start,length)</td><td>从指定位置开始，截取length长度个字符</td></tr><tr><td><em>.indexOf(字符,从</em>索引开始找)</td><td>返回字符在字符串中的位置</td></tr><tr><td>lastIndexOf(字符)</td><td>从后往前找，只找第一个匹配的字符</td></tr><tr><td>*.trim()</td><td>只能去除字符串前后空白</td></tr><tr><td>*.toLocaleUpperCase()</td><td>转化为大写</td></tr><tr><td>*.toLocaleLowerCase()</td><td>转化为小写</td></tr><tr><td>*.replace(a,b)</td><td>用b替换a</td></tr><tr><td>*.split()</td><td>以一个分割符,将一个字符串串分割成一个数组</td></tr><tr><td>indexOf()   方法可返回某个指定的字符串值在字符串中首次出现的位置。</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-对象&quot;&gt;&lt;a href=&quot;#JS-对象&quot; class=&quot;headerlink&quot; title=&quot;JS 对象&quot;&gt;&lt;/a&gt;JS 对象&lt;/h1&gt;&lt;h2 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - DOM、BOM操作、事件</title>
    <link href="/2019/05/09/2.1.3.JavaScript%20-%20DOM%E3%80%81BOM%E6%93%8D%E4%BD%9C%E3%80%81%E4%BA%8B%E4%BB%B6/"/>
    <id>/2019/05/09/2.1.3.JavaScript - DOM、BOM操作、事件/</id>
    <published>2019-05-09T05:45:46.181Z</published>
    <updated>2019-05-09T06:05:32.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById(‘id’)</td><td>文档.得到 元素 通过 ID</td><td>根据id值获取单个元素</td></tr><tr><td>document.getElementsByTagName(‘标签名’)</td><td>文档.得到 元素 通过 TagName</td><td>根据标签名获取一组元素</td></tr><tr><td>document.querySelector(‘选择器’)</td><td>文档.查询 选择</td><td>根据选择器获取单个元素</td></tr><tr><td>document.querySelectorAll(‘选择器’)</td><td>文档.查询 选择 所有</td><td>根据选择器获取一组元素</td></tr></tbody></table><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>id、title、href、src、className    \</td><td>innerText、innerHTML      textContent(标准，不兼容ie8)</td><td></td></tr></tbody></table><h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>return false</td><td>取消默认行为</td><td></td></tr><tr><td>href =   javascript:</td><td></td></tr></tbody></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.value</td><td>值</td><td>表单元素的内容</td></tr><tr><td>元素.disabled   （若是其他标签则需要.style.）</td><td>使 xxx失去能力</td><td>操作表单元素是否禁用（true→禁用，false→不禁用）   不加引号</td></tr><tr><td>*.checked</td><td>选中的</td><td>操作表单元素是否选中（true→选中，false→不选中）</td></tr><tr><td>*.selected</td><td>挑选出来的</td><td>操作表单元素的是否选中（true→选中，false→不选中）      注意:原生js中没有:selcted这个选择器            var options = document.querySelectorAll(‘#sel1   option:checked’);  //js  筛选选中的option      options[i].selected = false;        //设置被选中的option的选中状态</td></tr></tbody></table><h2 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>子节点.parentNode</td><td>父节点</td><td>子节点获取父节点</td></tr><tr><td>父节点.childNodes</td><td>子节点</td><td>父节点获取子节点  -     获取的节点包含了文本和元素</td></tr><tr><td>父元素.children</td><td>孩子们</td><td>父节点获取子节点  -   获取仅仅是元素，不包含文本</td></tr><tr><td>父节点.firstElementChild</td><td>第一个  元素    孩子</td><td></td></tr><tr><td>父节点.lastElementChild</td><td>最后一个  元素    孩子</td><td></td></tr><tr><td>节点.nextElementSibling</td><td>下一个 元素 兄弟</td><td>获取上一个兄弟</td></tr><tr><td>节点.previousElementSibling</td><td>以前  元素 兄弟</td><td>获取下一个兄弟</td></tr></tbody></table><p>节点的nodeType、nodeName、nodeValue的属性           </p><ul><li>节点属性nodeType的作用，获取节点类型:        元素节点的nodeType→ 1  ，  文本节点的nodeType→3      </li><li>节点属性nodeName的作用，获取节点的名称： 元素节点→标签名（大写H2）， 文本节点→ #text     </li><li>节点属性nodeValue的作用，获取节点的值： 元素节点→null           文本节点→ 文本值比如换行”↵    “</li></ul><h2 id="动态控制元素"><a href="#动态控制元素" class="headerlink" title="动态控制元素"></a>动态控制元素</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.innerHTML = ‘内容’;</td><td></td><td>通过innerHTML创建元素 (性能差)</td></tr><tr><td>document.createElement(‘标签名’);</td><td>文档.创建 元素</td><td>创建元素，并返回新元素对象  var * = document.createElement(‘li’);</td></tr><tr><td>父元素.appendChild(子元素);</td><td>添加 子节点</td><td>动态追加元素</td></tr><tr><td>父元素.removeChild(子元素);</td><td>移除 子节点</td><td>动态删除元素</td></tr><tr><td>父节点.insertBefore(新的节点,旧的子节点)</td><td>插入 节点</td><td>在*位置上插入新元素  旧子阶段获取：var 旧节点 = 盒子.children[0];</td></tr><tr><td>父节点.replaceChild(新的节点,旧的子节点)</td><td>替换 节点</td><td>替换元素</td></tr><tr><td>元素.cloneNode(true或false);</td><td>克隆 节点</td><td>克隆元素。返回克隆后的元素，默认false（仅克隆外层）；true，克隆所有内容</td></tr></tbody></table><h2 id="自定义行内属性"><a href="#自定义行内属性" class="headerlink" title="自定义行内属性"></a>自定义行内属性</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>元素.getAttribute(name);</td><td>获取 属性</td><td>获取</td></tr><tr><td>元素.setAttribute(name,value);</td><td>设置 属性</td><td>设置</td></tr><tr><td>元素.removeAttribute(name,value);</td><td>移除 属性</td><td>移除</td></tr></tbody></table><h2 id="控制元素样式"><a href="#控制元素样式" class="headerlink" title="控制元素样式"></a>控制元素样式</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>元素.style.样式属性名 = ‘样式属性值’;</td><td>通过style属性设置样式</td></tr><tr><td>元素.className =   ‘类名’</td><td>通过class 控制标签样式</td></tr></tbody></table><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>window</td><td>顶级对象    全局变量或全局函数本质上都是window的属性或方法</td></tr><tr><td>window.innerWidth</td><td>获取浏览器宽度</td></tr><tr><td>var * =   window.pageYOffset</td><td>获取页面卷曲高度</td></tr><tr><td>window.setTimeout(callback,   time);</td><td>定时器，仅执行一次，可返回一个标识  用变量接收</td></tr><tr><td>window.clearTimeout(定时器的标识);</td><td>清除定时器</td></tr><tr><td>window.setInterval(callback,   time)</td><td>定时器，重复执行  直到取消，可返回标识    用变量接收</td></tr><tr><td>window.clearInterval(定时器的标识);</td><td>清除定时器</td></tr></tbody></table><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>location.href</td><td>设置或获取地址栏地址</td></tr><tr><td>location.reload()</td><td>刷新页面</td></tr></tbody></table><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>history.length</td><td>获取历史记录的长度</td></tr><tr><td>history.back()</td><td>回退上一个历史记录</td></tr><tr><td>history.forward()</td><td>前进下一个历史记录</td></tr><tr><td>history.go(数字)</td><td>正数，表示前进； 负数，表示回退</td></tr></tbody></table><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>navigator.userAgent</td><td>获取浏览器的信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>window.onload  = function(){}</td><td>等页面资源全部加完毕后，要执行的程序(一般不用)</td></tr><tr><td>对象名.hasOwnProperty( 键名 )</td><td>检测该属性、方法是否属于x对象</td></tr></tbody></table><table><thead><tr><th>offset</th><th>描述</th></tr></thead><tbody><tr><td>元素.offsetWidth</td><td>返回的是数字。 大小包含： 内容 +   padding + border;      只读，不可赋值</td></tr><tr><td>元素.offsetHeight</td><td></td></tr><tr><td>元素.offsetLeft</td><td>返回的是数字。（参照谁？看定位关系）</td></tr><tr><td>元素.offsetTop</td><td></td></tr><tr><td>元素.offsetParent</td><td>获取“父元素”，  按照定位关系</td></tr></tbody></table><table><thead><tr><th>scroll</th><th>描述</th></tr></thead><tbody><tr><td>元素.scrollWidth</td><td>获取的元素的大小  ,包含   【内容+ padding + 溢出】</td></tr><tr><td>元素.scrollHeight</td><td></td></tr><tr><td>元素.scrollLeft</td><td>获取被卷起的页面间距</td></tr><tr><td>元素.scrollTop</td></tr></tbody></table><table><thead><tr><th>client（不常用）</th><th>描述</th></tr></thead><tbody><tr><td>元素.clientWidth</td><td>获取元素的大小，包含 【内容 + padding】</td></tr><tr><td>元素.clientHeight</td><td></td></tr><tr><td>元素.clientLeft</td><td>获取边框的厚度</td></tr><tr><td>元素.clientTop</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sc = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击按钮  回到页面顶端</span></span><br><span class="line">toTop.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;&#125;;</span><br></pre></td></tr></table></figure><h1 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h1><blockquote><p>事件对象 :事件源.事件类型 =   function(e){  // 第一个形参e就是事件对象    } </p></blockquote><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>*.onclick</td><td>点击</td><td>鼠标点击事件</td></tr><tr><td>*.onmousemove</td><td>鼠标 移动</td><td>document.onmousemove   = function(){}</td></tr><tr><td>*.onmousedown</td><td>鼠标 按下</td><td></td></tr><tr><td>*.onmouseup</td><td>鼠标 弹起</td><td></td></tr><tr><td>onmosueenter/onmosueleave</td><td>鼠标进入  离开</td><td>不支持冒泡</td></tr><tr><td>onmosueover/onmouseout</td><td>鼠标进入  离开</td><td>支持冒泡</td></tr></tbody></table><ul><li><p>事件对象.clientX   /    事件对象.clientY    参照是==浏览器==           client：客户      </p></li><li><p>事件对象.pageX   /    事件对象.pageY    参照是==文档==                page：页面      </p></li><li><p>事件对象.offsetX   /    事件对象.offsetY    参照是==当前的元素==    offset：抵消？      screenX   屏幕</p></li></ul><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>键入 按下</td><td>键盘按下事件</td></tr><tr><td>onkeyup</td><td>键入 抬起</td><td>键盘弹起事件</td></tr></tbody></table><ul><li>事件对象.keyCode     获取键盘按键对应的键码值</li><li>事件对象.altKey        表示alt键是否按下，返回布尔值。</li><li>事件对象.shiftKey        表示shift键是否按下，返回布尔值。</li><li>事件对象.ctrlKey        表示ctrl键是否按下，返回布尔值。（true按下，false没有按下）</li></ul><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p><code>(官宣)老IE不兼容，建议在web使用</code></p><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>事件源.addEventListener(‘类型’,处理程序,捕获);</td><td>添加 事件 监视器</td><td>捕获，可选参数，默认为false。 true→ 捕获，false→冒泡</td></tr><tr><td>事件源.removeEventListener(‘类型’,处理程序名称)</td><td>移除 事件 监视器</td><td>若要通过事件监听的方式移除事件，需单独将事件处理程序   抽取出来命名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="comment">// 事件监听注册事件</span></span><br><span class="line">   btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,fn1);</span><br><span class="line">btn.removeEventListener(<span class="string">'click'</span>,fn1)</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>给一组元素父级标签设置事件委托，提高性能   减少事件绑定       通过事件对象.target的nodeName   属性检测触发元素</td><td></td></tr><tr><td>document.onclick =   function(e) {  var _e = e \</td><td>\</td><td>window.event  }          //解决ie低版本兼容性</td><td></td></tr><tr><td>事件对象.target</td><td>this指向事件源，target指向事件触发点</td></tr></tbody></table><h2 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>touchstart</td><td>触摸 开始</td><td>手指按下    ，需要用事件监听的方式注册</td></tr><tr><td>touchmove</td><td>触摸 移动</td><td>手指移动    ，需要用事件监听的方式注册</td></tr><tr><td>touchend</td><td>触摸 结束</td><td>手指松开    ，需要用事件监听的方式注册</td></tr><tr><td></td><td></td><td></td></tr><tr><td>事件对象.touches</td><td>触摸s</td><td>位于屏幕上的所有手指的列表，伪数组</td></tr><tr><td>事件对象.targetTouches</td><td>目标 触摸s</td><td>位于该元素上的所有手指的列表，伪数组</td></tr><tr><td>事件对象.changedTouches</td><td>改变 触摸</td><td>被改变的手指列表。touchstart时包含刚与屏幕接触的触点，touchend时包含离开屏幕的触点，伪数组</td></tr></tbody></table><ol><li>手指对象.clientX/Y 手指相对于layout viewport的水平/垂直像素距离</li><li>手指对象.pageX/Y 手指相对于layout viewport的水平/垂直像素距离</li></ol><p><code>在移动端推荐使用clientX/Y</code></p><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>英文</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>事件对象.preventDefault();</td><td>防止 默认</td><td>阻止默认行为</td></tr><tr><td>事件对象.stopPropagation();</td><td>停止 传播</td><td>停止冒泡传播</td></tr><tr><td>*.oninput</td><td>输入</td><td>通常用于文本框输入时 触发</td></tr><tr><td>transitionend事件</td><td>过度 结束</td><td>css中过渡结束后检测的行为</td></tr><tr><td>*.onfocus</td><td>获取 焦点</td><td>获取焦点（通常用于表单 的事件）</td></tr><tr><td>*.onblur</td><td>获取 模糊？？ （on 布尔）</td><td>失去焦点（通常用于表单 的事件）</td></tr><tr><td>*.submit</td><td>表单的触发事件</td><td>提交表单时 按键盘enter   也可以提交，但是需要注意 必须有 submit按钮</td></tr><tr><td>window.onhashchange =   ()=&gt;{}</td><td>url改变监听</td><td>window.location.hash     监听url/锚点 改变后的值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;h2 id=&quot;获取元素&quot;&gt;&lt;a href=&quot;#获取元素&quot; class=&quot;headerlink&quot; title=&quot;获取元素&quot;&gt;&lt;/a&gt;获取元
      
    
    </summary>
    
      <category term="JavaScript" scheme="/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
</feed>
